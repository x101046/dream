{
  "version": 3,
  "sources": ["../../../../dev/core/src/Maths/math.polar.ts"],
  "sourcesContent": ["/* eslint-disable @typescript-eslint/naming-convention */\r\nimport type { DeepImmutable } from \"../types\";\r\nimport { Vector2, Vector3 } from \"./math.vector\";\r\n\r\n/**\r\n * Class used to store (r, theta) vector representation\r\n */\r\nexport class Polar {\r\n    public radius: number;\r\n    public theta: number;\r\n\r\n    /**\r\n     * Creates a new Polar object\r\n     * @param radius the radius of the vector\r\n     * @param theta the angle of the vector\r\n     */\r\n    constructor(radius: number, theta: number) {\r\n        this.radius = radius;\r\n        this.theta = theta;\r\n    }\r\n\r\n    /**\r\n     * Gets the class name\r\n     * @returns the string \"Polar\"\r\n     */\r\n    public getClassName() {\r\n        return \"Polar\";\r\n    }\r\n\r\n    /**\r\n     * Converts the current polar to a string\r\n     * @returns the current polar as a string\r\n     */\r\n    public toString() {\r\n        return JSON.stringify(this);\r\n    }\r\n\r\n    /**\r\n     * Converts the current polar to an array\r\n     * @reutrns the current polar as an array\r\n     */\r\n    public asArray() {\r\n        return [this.radius, this.theta];\r\n    }\r\n\r\n    /**\r\n     * Adds the current Polar and the given Polar and stores the result\r\n     * @param polar the polar to add\r\n     * @param ref the polar to store the result in\r\n     * @returns the updated ref\r\n     */\r\n    public addToRef(polar: Polar, ref: Polar) {\r\n        ref.radius = this.radius + polar.radius;\r\n        ref.theta = this.theta + polar.theta;\r\n        return ref;\r\n    }\r\n\r\n    /**\r\n     * Adds the current Polar and the given Polar\r\n     * @param polar the polar to add\r\n     * @returns the sum polar\r\n     */\r\n    public add(polar: Polar) {\r\n        const ref = new Polar(0, 0);\r\n        this.addToRef(polar, ref);\r\n        return ref;\r\n    }\r\n\r\n    /**\r\n     * Adds the given polar to the current polar\r\n     * @param polar the polar to add\r\n     * @returns the current polar\r\n     */\r\n    public addInPlace(polar: Polar) {\r\n        this.addToRef(polar, this);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds the provided values to the current polar\r\n     * @param radius the amount to add to the radius\r\n     * @param theta the amount to add to the theta\r\n     * @returns the current polar\r\n     */\r\n    public addInPlaceFromFloats(radius: number, theta: number) {\r\n        this.radius += radius;\r\n        this.theta += theta;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Subtracts the given Polar from the current Polar and stores the result\r\n     * @param polar the polar to subtract\r\n     * @param ref the polar to store the result in\r\n     * @returns the updated ref\r\n     */\r\n    public subtractToRef(polar: Polar, ref: Polar) {\r\n        ref.radius = this.radius - polar.radius;\r\n        ref.theta = this.theta - polar.theta;\r\n        return ref;\r\n    }\r\n\r\n    /**\r\n     * Subtracts the given Polar from the current Polar\r\n     * @param polar the polar to subtract\r\n     * @returns the difference polar\r\n     */\r\n    public subtract(polar: Polar) {\r\n        const ref = new Polar(0, 0);\r\n        this.subtractToRef(polar, ref);\r\n        return ref;\r\n    }\r\n\r\n    /**\r\n     * Subtracts the given Polar from the current Polar\r\n     * @param polar the polar to subtract\r\n     * @returns the current polar\r\n     */\r\n    public subtractInPlace(polar: Polar) {\r\n        this.subtractToRef(polar, this);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Subtracts the given floats from the current polar\r\n     * @param radius the amount to subtract from the radius\r\n     * @param theta the amount to subtract from the theta\r\n     * @param ref the polar to store the result in\r\n     * @returns the updated ref\r\n     */\r\n    public subtractFromFloatsToRef(radius: number, theta: number, ref: Polar) {\r\n        ref.radius = this.radius - radius;\r\n        ref.theta = this.theta - theta;\r\n        return ref;\r\n    }\r\n\r\n    /**\r\n     * Subtracts the given floats from the current polar\r\n     * @param radius the amount to subtract from the radius\r\n     * @param theta the amount to subtract from the theta\r\n     * @returns the difference polar\r\n     */\r\n    public subtractFromFloats(radius: number, theta: number) {\r\n        const ref = new Polar(0, 0);\r\n        this.subtractFromFloatsToRef(radius, theta, ref);\r\n        return ref;\r\n    }\r\n\r\n    /**\r\n     * Multiplies the given Polar with the current Polar and stores the result\r\n     * @param polar the polar to multiply\r\n     * @param ref the polar to store the result in\r\n     * @returns the updated ref\r\n     */\r\n    public multiplyToRef(polar: Polar, ref: Polar) {\r\n        ref.radius = this.radius * polar.radius;\r\n        ref.theta = this.theta * polar.theta;\r\n        return ref;\r\n    }\r\n\r\n    /**\r\n     * Multiplies the given Polar with the current Polar\r\n     * @param polar the polar to multiply\r\n     * @returns the product polar\r\n     */\r\n    public multiply(polar: Polar) {\r\n        const ref = new Polar(0, 0);\r\n        this.multiplyToRef(polar, ref);\r\n        return ref;\r\n    }\r\n\r\n    /**\r\n     * Multiplies the given Polar with the current Polar\r\n     * @param polar the polar to multiply\r\n     * @returns the current polar\r\n     */\r\n    public multiplyInPlace(polar: Polar) {\r\n        this.multiplyToRef(polar, this);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Divides the current Polar by the given Polar and stores the result\r\n     * @param polar the polar to divide\r\n     * @param ref the polar to store the result in\r\n     * @returns the updated ref\r\n     */\r\n    public divideToRef(polar: Polar, ref: Polar) {\r\n        ref.radius = this.radius / polar.radius;\r\n        ref.theta = this.theta / polar.theta;\r\n        return ref;\r\n    }\r\n\r\n    /**\r\n     * Divides the current Polar by the given Polar\r\n     * @param polar the polar to divide\r\n     * @returns the quotient polar\r\n     */\r\n    public divide(polar: Polar) {\r\n        const ref = new Polar(0, 0);\r\n        this.divideToRef(polar, ref);\r\n        return ref;\r\n    }\r\n\r\n    /**\r\n     * Divides the current Polar by the given Polar\r\n     * @param polar the polar to divide\r\n     * @returns the current polar\r\n     */\r\n    public divideInPlace(polar: Polar) {\r\n        this.divideToRef(polar, this);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Clones the current polar\r\n     * @returns a clone of the current polar\r\n     */\r\n    public clone() {\r\n        return new Polar(this.radius, this.theta);\r\n    }\r\n\r\n    /**\r\n     * Copies the source polar into the current polar\r\n     * @param source the polar to copy from\r\n     * @returns the current polar\r\n     */\r\n    public copyFrom(source: Polar) {\r\n        this.radius = source.radius;\r\n        this.theta = source.theta;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Copies the given values into the current polar\r\n     * @param radius the radius to use\r\n     * @param theta the theta to use\r\n     * @returns the current polar\r\n     */\r\n    public copyFromFloats(radius: number, theta: number) {\r\n        this.radius = radius;\r\n        this.theta = theta;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Scales the current polar and stores the result\r\n     * @param scale defines the multiplication factor\r\n     * @param ref where to store the result\r\n     * @returns the updated ref\r\n     */\r\n    public scaleToRef(scale: number, ref: Polar) {\r\n        ref.radius = this.radius * scale;\r\n        ref.theta = this.theta * scale;\r\n        return ref;\r\n    }\r\n\r\n    /**\r\n     * Scales the current polar and returns a new polar with the scaled coordinates\r\n     * @param scale defines the multiplication factor\r\n     * @returns the scaled polar\r\n     */\r\n    public scale(scale: number) {\r\n        const ref = new Polar(0, 0);\r\n        this.scaleToRef(scale, ref);\r\n        return ref;\r\n    }\r\n\r\n    /**\r\n     * Scales the current polar\r\n     * @param scale defines the multiplication factor\r\n     * @returns the current polar\r\n     */\r\n    public scaleInPlace(scale: number) {\r\n        this.scaleToRef(scale, this);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Sets the values of the current polar\r\n     * @param radius the new radius\r\n     * @param theta the new theta\r\n     * @returns the current polar\r\n     */\r\n    public set(radius: number, theta: number) {\r\n        this.radius = radius;\r\n        this.theta = theta;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Sets the values of the current polar\r\n     * @param value the new values\r\n     * @returns the current polar\r\n     */\r\n    public setAll(value: number) {\r\n        this.set(value, value);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets the rectangular coordinates of the current Polar\r\n     * @param ref the reference to assign the result\r\n     * @returns the updated reference\r\n     */\r\n    public toVector2ToRef(ref: Vector2): Vector2 {\r\n        const x = this.radius * Math.cos(this.theta);\r\n        const y = this.radius * Math.sin(this.theta);\r\n        ref.set(x, y);\r\n        return ref;\r\n    }\r\n\r\n    /**\r\n     * Gets the rectangular coordinates of the current Polar\r\n     * @returns the rectangular coordinates\r\n     */\r\n    public toVector2(): Vector2 {\r\n        const ref = new Vector2(0, 0);\r\n        return this.toVector2ToRef(ref);\r\n    }\r\n\r\n    /**\r\n     * Converts a given Vector2 to its polar coordinates\r\n     * @param v the Vector2 to convert\r\n     * @param ref the reference to assign the result\r\n     * @returns the updated reference\r\n     */\r\n    public static FromVector2ToRef(v: Vector2, ref: Polar): Polar {\r\n        const theta = Math.sign(v.y) * Math.acos(v.x / v.length());\r\n        ref.radius = v.length();\r\n        ref.theta = theta;\r\n        return ref;\r\n    }\r\n\r\n    /**\r\n     * Converts a given Vector2 to its polar coordinates\r\n     * @param v the Vector2 to convert\r\n     * @returns a Polar\r\n     */\r\n    public static FromVector2(v: Vector2): Polar {\r\n        const polar = new Polar(0, 0);\r\n        Polar.FromVector2ToRef(v, polar);\r\n        return polar;\r\n    }\r\n\r\n    /**\r\n     * Converts an array of floats to a polar\r\n     * @param array the array to convert\r\n     * @returns the converted polar\r\n     */\r\n    public static FromArray(array: number[]) {\r\n        return new Polar(array[0], array[1]);\r\n    }\r\n}\r\n\r\n/**\r\n * Class used for (radius, theta, phi) vector representation.\r\n */\r\nexport class Spherical {\r\n    public radius: number;\r\n    public theta: number;\r\n    public phi: number;\r\n\r\n    /**\r\n     * @param radius spherical radius\r\n     * @param theta angle from positive y axis to radial line from 0 to PI (vertical)\r\n     * @param phi angle from positive x axis measured anticlockwise from -PI to PI (horizontal)\r\n     */\r\n    constructor(radius: number, theta: number, phi: number) {\r\n        this.radius = radius;\r\n        this.theta = theta;\r\n        this.phi = phi;\r\n    }\r\n\r\n    /**\r\n     * Gets the class name\r\n     * @returns the string \"Spherical\"\r\n     */\r\n    public getClassName() {\r\n        return \"Spherical\";\r\n    }\r\n\r\n    /**\r\n     * Converts the current spherical to a string\r\n     * @returns the current spherical as a string\r\n     */\r\n    public toString() {\r\n        return JSON.stringify(this);\r\n    }\r\n\r\n    /**\r\n     * Converts the current spherical to an array\r\n     * @reutrns the current spherical as an array\r\n     */\r\n    public asArray() {\r\n        return [this.radius, this.theta, this.phi];\r\n    }\r\n\r\n    /**\r\n     * Adds the current Spherical and the given Spherical and stores the result\r\n     * @param spherical the spherical to add\r\n     * @param ref the spherical to store the result in\r\n     * @returns the updated ref\r\n     */\r\n    public addToRef(spherical: Spherical, ref: Spherical) {\r\n        ref.radius = this.radius + spherical.radius;\r\n        ref.theta = this.theta + spherical.theta;\r\n        ref.phi = this.phi + spherical.phi;\r\n        return ref;\r\n    }\r\n\r\n    /**\r\n     * Adds the current Spherical and the given Spherical\r\n     * @param spherical the spherical to add\r\n     * @returns the sum spherical\r\n     */\r\n    public add(spherical: Spherical) {\r\n        const ref = new Spherical(0, 0, 0);\r\n        this.addToRef(spherical, ref);\r\n        return ref;\r\n    }\r\n\r\n    /**\r\n     * Adds the given spherical to the current spherical\r\n     * @param spherical the spherical to add\r\n     * @returns the current spherical\r\n     */\r\n    public addInPlace(spherical: Spherical) {\r\n        this.addToRef(spherical, this);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds the provided values to the current spherical\r\n     * @param radius the amount to add to the radius\r\n     * @param theta the amount to add to the theta\r\n     * @param phi the amount to add to the phi\r\n     * @returns the current spherical\r\n     */\r\n    public addInPlaceFromFloats(radius: number, theta: number, phi: number) {\r\n        this.radius += radius;\r\n        this.theta += theta;\r\n        this.phi += phi;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Subtracts the given Spherical from the current Spherical and stores the result\r\n     * @param spherical the spherical to subtract\r\n     * @param ref the spherical to store the result in\r\n     * @returns the updated ref\r\n     */\r\n    public subtractToRef(spherical: Spherical, ref: Spherical) {\r\n        ref.radius = this.radius - spherical.radius;\r\n        ref.theta = this.theta - spherical.theta;\r\n        ref.phi = this.phi - spherical.phi;\r\n        return ref;\r\n    }\r\n\r\n    /**\r\n     * Subtracts the given Spherical from the current Spherical\r\n     * @param spherical the spherical to subtract\r\n     * @returns the difference spherical\r\n     */\r\n    public subtract(spherical: Spherical) {\r\n        const ref = new Spherical(0, 0, 0);\r\n        this.subtractToRef(spherical, ref);\r\n        return ref;\r\n    }\r\n\r\n    /**\r\n     * Subtracts the given Spherical from the current Spherical\r\n     * @param spherical the spherical to subtract\r\n     * @returns the current spherical\r\n     */\r\n    public subtractInPlace(spherical: Spherical) {\r\n        this.subtractToRef(spherical, this);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Subtracts the given floats from the current spherical\r\n     * @param radius the amount to subtract from the radius\r\n     * @param theta the amount to subtract from the theta\r\n     * @param phi the amount to subtract from the phi\r\n     * @param ref the spherical to store the result in\r\n     * @returns the updated ref\r\n     */\r\n    public subtractFromFloatsToRef(radius: number, theta: number, phi: number, ref: Spherical) {\r\n        ref.radius = this.radius - radius;\r\n        ref.theta = this.theta - theta;\r\n        ref.phi = this.phi - phi;\r\n        return ref;\r\n    }\r\n\r\n    /**\r\n     * Subtracts the given floats from the current spherical\r\n     * @param radius the amount to subtract from the radius\r\n     * @param theta the amount to subtract from the theta\r\n     * @param phi the amount to subtract from the phi\r\n     * @returns the difference spherical\r\n     */\r\n    public subtractFromFloats(radius: number, theta: number, phi: number) {\r\n        const ref = new Spherical(0, 0, 0);\r\n        this.subtractFromFloatsToRef(radius, theta, phi, ref);\r\n        return ref;\r\n    }\r\n\r\n    /**\r\n     * Multiplies the given Spherical with the current Spherical and stores the result\r\n     * @param spherical the spherical to multiply\r\n     * @param ref the spherical to store the result in\r\n     * @returns the updated ref\r\n     */\r\n    public multiplyToRef(spherical: Spherical, ref: Spherical) {\r\n        ref.radius = this.radius * spherical.radius;\r\n        ref.theta = this.theta * spherical.theta;\r\n        ref.phi = this.phi * spherical.phi;\r\n        return ref;\r\n    }\r\n\r\n    /**\r\n     * Multiplies the given Spherical with the current Spherical\r\n     * @param spherical the spherical to multiply\r\n     * @returns the product spherical\r\n     */\r\n    public multiply(spherical: Spherical) {\r\n        const ref = new Spherical(0, 0, 0);\r\n        this.multiplyToRef(spherical, ref);\r\n        return ref;\r\n    }\r\n\r\n    /**\r\n     * Multiplies the given Spherical with the current Spherical\r\n     * @param spherical the spherical to multiply\r\n     * @returns the current spherical\r\n     */\r\n    public multiplyInPlace(spherical: Spherical) {\r\n        this.multiplyToRef(spherical, this);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Divides the current Spherical by the given Spherical and stores the result\r\n     * @param spherical the spherical to divide\r\n     * @param ref the spherical to store the result in\r\n     * @returns the updated ref\r\n     */\r\n    public divideToRef(spherical: Spherical, ref: Spherical) {\r\n        ref.radius = this.radius / spherical.radius;\r\n        ref.theta = this.theta / spherical.theta;\r\n        ref.phi = this.phi / spherical.phi;\r\n        return ref;\r\n    }\r\n\r\n    /**\r\n     * Divides the current Spherical by the given Spherical\r\n     * @param spherical the spherical to divide\r\n     * @returns the quotient spherical\r\n     */\r\n    public divide(spherical: Spherical) {\r\n        const ref = new Spherical(0, 0, 0);\r\n        this.divideToRef(spherical, ref);\r\n        return ref;\r\n    }\r\n\r\n    /**\r\n     * Divides the current Spherical by the given Spherical\r\n     * @param spherical the spherical to divide\r\n     * @returns the current spherical\r\n     */\r\n    public divideInPlace(spherical: Spherical) {\r\n        this.divideToRef(spherical, this);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Clones the current spherical\r\n     * @returns a clone of the current spherical\r\n     */\r\n    public clone() {\r\n        return new Spherical(this.radius, this.theta, this.phi);\r\n    }\r\n\r\n    /**\r\n     * Copies the source spherical into the current spherical\r\n     * @param source the spherical to copy from\r\n     * @returns the current spherical\r\n     */\r\n    public copyFrom(source: Spherical) {\r\n        this.radius = source.radius;\r\n        this.theta = source.theta;\r\n        this.phi = source.phi;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Copies the given values into the current spherical\r\n     * @param radius the radius to use\r\n     * @param theta the theta to use\r\n     * @param phi the phi to use\r\n     * @returns the current spherical\r\n     */\r\n    public copyFromFloats(radius: number, theta: number, phi: number) {\r\n        this.radius = radius;\r\n        this.theta = theta;\r\n        this.phi = phi;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Scales the current spherical and stores the result\r\n     * @param scale defines the multiplication factor\r\n     * @param ref where to store the result\r\n     * @returns the updated ref\r\n     */\r\n    public scaleToRef(scale: number, ref: Spherical) {\r\n        ref.radius = this.radius * scale;\r\n        ref.theta = this.theta * scale;\r\n        ref.phi = this.phi * scale;\r\n        return ref;\r\n    }\r\n\r\n    /**\r\n     * Scales the current spherical and returns a new spherical with the scaled coordinates\r\n     * @param scale defines the multiplication factor\r\n     * @returns the scaled spherical\r\n     */\r\n    public scale(scale: number) {\r\n        const ref = new Spherical(0, 0, 0);\r\n        this.scaleToRef(scale, ref);\r\n        return ref;\r\n    }\r\n\r\n    /**\r\n     * Scales the current spherical\r\n     * @param scale defines the multiplication factor\r\n     * @returns the current spherical\r\n     */\r\n    public scaleInPlace(scale: number) {\r\n        this.scaleToRef(scale, this);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Sets the values of the current spherical\r\n     * @param radius the new radius\r\n     * @param theta the new theta\r\n     * @param phi the new phi\r\n     * @returns the current spherical\r\n     */\r\n    public set(radius: number, theta: number, phi: number) {\r\n        this.radius = radius;\r\n        this.theta = theta;\r\n        this.phi = phi;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Sets the values of the current spherical\r\n     * @param value the new values\r\n     * @returns the current spherical\r\n     */\r\n    public setAll(value: number) {\r\n        this.set(value, value, value);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Assigns the rectangular coordinates of the current Spherical to a Vector3\r\n     * @param ref the Vector3 to update\r\n     * @returns the updated Vector3\r\n     */\r\n    public toVector3ToRef(ref: DeepImmutable<Vector3>): Vector3 {\r\n        const x = this.radius * Math.sin(this.theta) * Math.cos(this.phi);\r\n        const y = this.radius * Math.cos(this.theta);\r\n        const z = this.radius * Math.sin(this.theta) * Math.sin(this.phi);\r\n        ref.set(x, y, z);\r\n        return ref;\r\n    }\r\n\r\n    /**\r\n     * Gets a Vector3 from the current spherical coordinates\r\n     * @returns the (x, y,z) form of the current Spherical\r\n     */\r\n    public toVector3(): Vector3 {\r\n        const ref = new Vector3(0, 0, 0);\r\n        return this.toVector3ToRef(ref);\r\n    }\r\n\r\n    /**\r\n     * Assigns the spherical coordinates from a Vector3\r\n     * @param vector the vector to convert\r\n     * @param ref the Spherical to update\r\n     * @returns the updated ref\r\n     */\r\n    public static FromVector3ToRef(vector: DeepImmutable<Vector3>, ref: Spherical): Spherical {\r\n        ref.radius = vector.length();\r\n        ref.theta = Math.acos(vector.y / ref.radius);\r\n        ref.phi = Math.atan2(vector.z, vector.x);\r\n        return ref;\r\n    }\r\n\r\n    /**\r\n     * Gets a Spherical from a Vector3\r\n     * @param vector defines the vector in (x, y, z) coordinate space\r\n     * @returns a new Spherical\r\n     */\r\n    public static FromVector3(vector: DeepImmutable<Vector3>): Spherical {\r\n        const spherical = new Spherical(0, 0, 0);\r\n        Spherical.FromVector3ToRef(vector, spherical);\r\n        return spherical;\r\n    }\r\n\r\n    /**\r\n     * Converts an array of floats to a spherical\r\n     * @param array the array to convert\r\n     * @returns the converted spherical\r\n     */\r\n    public static FromArray(array: number[]) {\r\n        return new Spherical(array[0], array[1], array[2]);\r\n    }\r\n}\r\n"],
  "mappings": "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",
  "names": []
}
