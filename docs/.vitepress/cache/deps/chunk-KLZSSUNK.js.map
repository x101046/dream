{
  "version": 3,
  "sources": ["../../../../dev/core/src/Lights/light.ts", "../../../../dev/core/src/Lights/shadowLight.ts", "../../../../dev/core/src/Shaders/ShadersInclude/kernelBlurVaryingDeclaration.ts", "../../../../dev/core/src/Shaders/ShadersInclude/packingFunctions.ts", "../../../../dev/core/src/Shaders/ShadersInclude/kernelBlurFragment.ts", "../../../../dev/core/src/Shaders/ShadersInclude/kernelBlurFragment2.ts", "../../../../dev/core/src/Shaders/kernelBlur.fragment.ts", "../../../../dev/core/src/Shaders/ShadersInclude/kernelBlurVertex.ts", "../../../../dev/core/src/Shaders/kernelBlur.vertex.ts", "../../../../dev/core/src/PostProcesses/blurPostProcess.ts", "../../../../dev/core/src/Shaders/ShadersInclude/bayerDitherFunctions.ts", "../../../../dev/core/src/Shaders/ShadersInclude/shadowMapFragmentExtraDeclaration.ts", "../../../../dev/core/src/Shaders/ShadersInclude/shadowMapFragment.ts", "../../../../dev/core/src/Shaders/shadowMap.fragment.ts", "../../../../dev/core/src/Shaders/ShadersInclude/sceneVertexDeclaration.ts", "../../../../dev/core/src/Shaders/ShadersInclude/meshVertexDeclaration.ts", "../../../../dev/core/src/Shaders/ShadersInclude/shadowMapVertexDeclaration.ts", "../../../../dev/core/src/Shaders/ShadersInclude/shadowMapUboDeclaration.ts", "../../../../dev/core/src/Shaders/ShadersInclude/shadowMapVertexExtraDeclaration.ts", "../../../../dev/core/src/Shaders/ShadersInclude/shadowMapVertexNormalBias.ts", "../../../../dev/core/src/Shaders/ShadersInclude/shadowMapVertexMetric.ts", "../../../../dev/core/src/Shaders/shadowMap.vertex.ts", "../../../../dev/core/src/Shaders/depthBoxBlur.fragment.ts", "../../../../dev/core/src/Shaders/ShadersInclude/shadowMapFragmentSoftTransparentShadow.ts", "../../../../dev/core/src/Lights/Shadows/shadowGenerator.ts", "../../../../dev/core/src/Shaders/depth.fragment.ts", "../../../../dev/core/src/Shaders/ShadersInclude/pointCloudVertexDeclaration.ts", "../../../../dev/core/src/Shaders/depth.vertex.ts", "../../../../dev/core/src/Rendering/depthRenderer.ts", "../../../../dev/core/src/Shaders/minmaxRedux.fragment.ts", "../../../../dev/core/src/Misc/minMaxReducer.ts", "../../../../dev/core/src/Misc/depthReducer.ts", "../../../../dev/core/src/Lights/Shadows/cascadedShadowGenerator.ts", "../../../../dev/core/src/Lights/Shadows/shadowGeneratorSceneComponent.ts", "../../../../dev/core/src/Lights/directionalLight.ts", "../../../../dev/core/src/Lights/hemisphericLight.ts", "../../../../dev/core/src/Lights/pointLight.ts", "../../../../dev/core/src/Lights/spotLight.ts"],
  "sourcesContent": ["import { serialize, SerializationHelper, serializeAsColor3, expandToProperty } from \"../Misc/decorators\";\r\nimport type { Nullable } from \"../types\";\r\nimport type { Scene } from \"../scene\";\r\nimport { Vector3 } from \"../Maths/math.vector\";\r\nimport { Color3, TmpColors } from \"../Maths/math.color\";\r\nimport { Node } from \"../node\";\r\nimport type { AbstractMesh } from \"../Meshes/abstractMesh\";\r\nimport type { Effect } from \"../Materials/effect\";\r\nimport { UniformBuffer } from \"../Materials/uniformBuffer\";\r\nimport type { IShadowGenerator } from \"./Shadows/shadowGenerator\";\r\nimport { GetClass } from \"../Misc/typeStore\";\r\nimport type { ISortableLight } from \"./lightConstants\";\r\nimport { LightConstants } from \"./lightConstants\";\r\nimport type { Camera } from \"../Cameras/camera\";\r\n\r\n/**\r\n * Base class of all the lights in Babylon. It groups all the generic information about lights.\r\n * Lights are used, as you would expect, to affect how meshes are seen, in terms of both illumination and colour.\r\n * All meshes allow light to pass through them unless shadow generation is activated. The default number of lights allowed is four but this can be increased.\r\n */\r\nexport abstract class Light extends Node implements ISortableLight {\r\n    /**\r\n     * Falloff Default: light is falling off following the material specification:\r\n     * standard material is using standard falloff whereas pbr material can request special falloff per materials.\r\n     */\r\n    public static readonly FALLOFF_DEFAULT = LightConstants.FALLOFF_DEFAULT;\r\n\r\n    /**\r\n     * Falloff Physical: light is falling off following the inverse squared distance law.\r\n     */\r\n    public static readonly FALLOFF_PHYSICAL = LightConstants.FALLOFF_PHYSICAL;\r\n\r\n    /**\r\n     * Falloff gltf: light is falling off as described in the gltf moving to PBR document\r\n     * to enhance interoperability with other engines.\r\n     */\r\n    public static readonly FALLOFF_GLTF = LightConstants.FALLOFF_GLTF;\r\n\r\n    /**\r\n     * Falloff Standard: light is falling off like in the standard material\r\n     * to enhance interoperability with other materials.\r\n     */\r\n    public static readonly FALLOFF_STANDARD = LightConstants.FALLOFF_STANDARD;\r\n\r\n    //lightmapMode Consts\r\n    /**\r\n     * If every light affecting the material is in this lightmapMode,\r\n     * material.lightmapTexture adds or multiplies\r\n     * (depends on material.useLightmapAsShadowmap)\r\n     * after every other light calculations.\r\n     */\r\n    public static readonly LIGHTMAP_DEFAULT = LightConstants.LIGHTMAP_DEFAULT;\r\n    /**\r\n     * material.lightmapTexture as only diffuse lighting from this light\r\n     * adds only specular lighting from this light\r\n     * adds dynamic shadows\r\n     */\r\n    public static readonly LIGHTMAP_SPECULAR = LightConstants.LIGHTMAP_SPECULAR;\r\n    /**\r\n     * material.lightmapTexture as only lighting\r\n     * no light calculation from this light\r\n     * only adds dynamic shadows from this light\r\n     */\r\n    public static readonly LIGHTMAP_SHADOWSONLY = LightConstants.LIGHTMAP_SHADOWSONLY;\r\n\r\n    // Intensity Mode Consts\r\n    /**\r\n     * Each light type uses the default quantity according to its type:\r\n     *      point/spot lights use luminous intensity\r\n     *      directional lights use illuminance\r\n     */\r\n    public static readonly INTENSITYMODE_AUTOMATIC = LightConstants.INTENSITYMODE_AUTOMATIC;\r\n    /**\r\n     * lumen (lm)\r\n     */\r\n    public static readonly INTENSITYMODE_LUMINOUSPOWER = LightConstants.INTENSITYMODE_LUMINOUSPOWER;\r\n    /**\r\n     * candela (lm/sr)\r\n     */\r\n    public static readonly INTENSITYMODE_LUMINOUSINTENSITY = LightConstants.INTENSITYMODE_LUMINOUSINTENSITY;\r\n    /**\r\n     * lux (lm/m^2)\r\n     */\r\n    public static readonly INTENSITYMODE_ILLUMINANCE = LightConstants.INTENSITYMODE_ILLUMINANCE;\r\n    /**\r\n     * nit (cd/m^2)\r\n     */\r\n    public static readonly INTENSITYMODE_LUMINANCE = LightConstants.INTENSITYMODE_LUMINANCE;\r\n\r\n    // Light types ids const.\r\n    /**\r\n     * Light type const id of the point light.\r\n     */\r\n    public static readonly LIGHTTYPEID_POINTLIGHT = LightConstants.LIGHTTYPEID_POINTLIGHT;\r\n    /**\r\n     * Light type const id of the directional light.\r\n     */\r\n    public static readonly LIGHTTYPEID_DIRECTIONALLIGHT = LightConstants.LIGHTTYPEID_DIRECTIONALLIGHT;\r\n    /**\r\n     * Light type const id of the spot light.\r\n     */\r\n    public static readonly LIGHTTYPEID_SPOTLIGHT = LightConstants.LIGHTTYPEID_SPOTLIGHT;\r\n    /**\r\n     * Light type const id of the hemispheric light.\r\n     */\r\n    public static readonly LIGHTTYPEID_HEMISPHERICLIGHT = LightConstants.LIGHTTYPEID_HEMISPHERICLIGHT;\r\n\r\n    /**\r\n     * Diffuse gives the basic color to an object.\r\n     */\r\n    @serializeAsColor3()\r\n    public diffuse = new Color3(1.0, 1.0, 1.0);\r\n\r\n    /**\r\n     * Specular produces a highlight color on an object.\r\n     * Note: This is not affecting PBR materials.\r\n     */\r\n    @serializeAsColor3()\r\n    public specular = new Color3(1.0, 1.0, 1.0);\r\n\r\n    /**\r\n     * Defines the falloff type for this light. This lets overriding how punctual light are\r\n     * falling off base on range or angle.\r\n     * This can be set to any values in Light.FALLOFF_x.\r\n     *\r\n     * Note: This is only useful for PBR Materials at the moment. This could be extended if required to\r\n     * other types of materials.\r\n     */\r\n    @serialize()\r\n    public falloffType = Light.FALLOFF_DEFAULT;\r\n\r\n    /**\r\n     * Strength of the light.\r\n     * Note: By default it is define in the framework own unit.\r\n     * Note: In PBR materials the intensityMode can be use to chose what unit the intensity is defined in.\r\n     */\r\n    @serialize()\r\n    public intensity = 1.0;\r\n\r\n    private _range = Number.MAX_VALUE;\r\n    protected _inverseSquaredRange = 0;\r\n\r\n    /**\r\n     * Defines how far from the source the light is impacting in scene units.\r\n     * Note: Unused in PBR material as the distance light falloff is defined following the inverse squared falloff.\r\n     */\r\n    @serialize()\r\n    public get range(): number {\r\n        return this._range;\r\n    }\r\n    /**\r\n     * Defines how far from the source the light is impacting in scene units.\r\n     * Note: Unused in PBR material as the distance light falloff is defined following the inverse squared falloff.\r\n     */\r\n    public set range(value: number) {\r\n        this._range = value;\r\n        this._inverseSquaredRange = 1.0 / (this.range * this.range);\r\n    }\r\n\r\n    /**\r\n     * Cached photometric scale default to 1.0 as the automatic intensity mode defaults to 1.0 for every type\r\n     * of light.\r\n     */\r\n    private _photometricScale = 1.0;\r\n\r\n    private _intensityMode: number = Light.INTENSITYMODE_AUTOMATIC;\r\n    /**\r\n     * Gets the photometric scale used to interpret the intensity.\r\n     * This is only relevant with PBR Materials where the light intensity can be defined in a physical way.\r\n     */\r\n    @serialize()\r\n    public get intensityMode(): number {\r\n        return this._intensityMode;\r\n    }\r\n    /**\r\n     * Sets the photometric scale used to interpret the intensity.\r\n     * This is only relevant with PBR Materials where the light intensity can be defined in a physical way.\r\n     */\r\n    public set intensityMode(value: number) {\r\n        this._intensityMode = value;\r\n        this._computePhotometricScale();\r\n    }\r\n\r\n    private _radius = 0.00001;\r\n    /**\r\n     * Gets the light radius used by PBR Materials to simulate soft area lights.\r\n     */\r\n    @serialize()\r\n    public get radius(): number {\r\n        return this._radius;\r\n    }\r\n    /**\r\n     * sets the light radius used by PBR Materials to simulate soft area lights.\r\n     */\r\n    public set radius(value: number) {\r\n        this._radius = value;\r\n        this._computePhotometricScale();\r\n    }\r\n\r\n    @serialize()\r\n    private _renderPriority: number;\r\n    /**\r\n     * Defines the rendering priority of the lights. It can help in case of fallback or number of lights\r\n     * exceeding the number allowed of the materials.\r\n     */\r\n    @expandToProperty(\"_reorderLightsInScene\")\r\n    public renderPriority: number = 0;\r\n\r\n    @serialize(\"shadowEnabled\")\r\n    private _shadowEnabled: boolean = true;\r\n    /**\r\n     * Gets whether or not the shadows are enabled for this light. This can help turning off/on shadow without detaching\r\n     * the current shadow generator.\r\n     */\r\n    public get shadowEnabled(): boolean {\r\n        return this._shadowEnabled;\r\n    }\r\n    /**\r\n     * Sets whether or not the shadows are enabled for this light. This can help turning off/on shadow without detaching\r\n     * the current shadow generator.\r\n     */\r\n    public set shadowEnabled(value: boolean) {\r\n        if (this._shadowEnabled === value) {\r\n            return;\r\n        }\r\n\r\n        this._shadowEnabled = value;\r\n        this._markMeshesAsLightDirty();\r\n    }\r\n\r\n    private _includedOnlyMeshes: AbstractMesh[];\r\n    /**\r\n     * Gets the only meshes impacted by this light.\r\n     */\r\n    public get includedOnlyMeshes(): AbstractMesh[] {\r\n        return this._includedOnlyMeshes;\r\n    }\r\n    /**\r\n     * Sets the only meshes impacted by this light.\r\n     */\r\n    public set includedOnlyMeshes(value: AbstractMesh[]) {\r\n        this._includedOnlyMeshes = value;\r\n        this._hookArrayForIncludedOnly(value);\r\n    }\r\n\r\n    private _excludedMeshes: AbstractMesh[];\r\n    /**\r\n     * Gets the meshes not impacted by this light.\r\n     */\r\n    public get excludedMeshes(): AbstractMesh[] {\r\n        return this._excludedMeshes;\r\n    }\r\n    /**\r\n     * Sets the meshes not impacted by this light.\r\n     */\r\n    public set excludedMeshes(value: AbstractMesh[]) {\r\n        this._excludedMeshes = value;\r\n        this._hookArrayForExcluded(value);\r\n    }\r\n\r\n    @serialize(\"excludeWithLayerMask\")\r\n    private _excludeWithLayerMask = 0;\r\n    /**\r\n     * Gets the layer id use to find what meshes are not impacted by the light.\r\n     * Inactive if 0\r\n     */\r\n    public get excludeWithLayerMask(): number {\r\n        return this._excludeWithLayerMask;\r\n    }\r\n    /**\r\n     * Sets the layer id use to find what meshes are not impacted by the light.\r\n     * Inactive if 0\r\n     */\r\n    public set excludeWithLayerMask(value: number) {\r\n        this._excludeWithLayerMask = value;\r\n        this._resyncMeshes();\r\n    }\r\n\r\n    @serialize(\"includeOnlyWithLayerMask\")\r\n    private _includeOnlyWithLayerMask = 0;\r\n    /**\r\n     * Gets the layer id use to find what meshes are impacted by the light.\r\n     * Inactive if 0\r\n     */\r\n    public get includeOnlyWithLayerMask(): number {\r\n        return this._includeOnlyWithLayerMask;\r\n    }\r\n    /**\r\n     * Sets the layer id use to find what meshes are impacted by the light.\r\n     * Inactive if 0\r\n     */\r\n    public set includeOnlyWithLayerMask(value: number) {\r\n        this._includeOnlyWithLayerMask = value;\r\n        this._resyncMeshes();\r\n    }\r\n\r\n    @serialize(\"lightmapMode\")\r\n    private _lightmapMode = 0;\r\n    /**\r\n     * Gets the lightmap mode of this light (should be one of the constants defined by Light.LIGHTMAP_x)\r\n     */\r\n    public get lightmapMode(): number {\r\n        return this._lightmapMode;\r\n    }\r\n    /**\r\n     * Sets the lightmap mode of this light (should be one of the constants defined by Light.LIGHTMAP_x)\r\n     */\r\n    public set lightmapMode(value: number) {\r\n        if (this._lightmapMode === value) {\r\n            return;\r\n        }\r\n\r\n        this._lightmapMode = value;\r\n        this._markMeshesAsLightDirty();\r\n    }\r\n\r\n    /**\r\n     * Shadow generators associated to the light.\r\n     * @internal Internal use only.\r\n     */\r\n    public _shadowGenerators: Nullable<Map<Nullable<Camera>, IShadowGenerator>> = null;\r\n\r\n    /**\r\n     * @internal Internal use only.\r\n     */\r\n    public _excludedMeshesIds = new Array<string>();\r\n\r\n    /**\r\n     * @internal Internal use only.\r\n     */\r\n    public _includedOnlyMeshesIds = new Array<string>();\r\n\r\n    /**\r\n     * The current light uniform buffer.\r\n     * @internal Internal use only.\r\n     */\r\n    public _uniformBuffer: UniformBuffer;\r\n\r\n    /** @internal */\r\n    public _renderId: number;\r\n\r\n    private _lastUseSpecular: boolean;\r\n\r\n    /**\r\n     * Creates a Light object in the scene.\r\n     * Documentation : https://doc.babylonjs.com/features/featuresDeepDive/lights/lights_introduction\r\n     * @param name The friendly name of the light\r\n     * @param scene The scene the light belongs too\r\n     */\r\n    constructor(name: string, scene?: Scene) {\r\n        super(name, scene);\r\n        this.getScene().addLight(this);\r\n        this._uniformBuffer = new UniformBuffer(this.getScene().getEngine(), undefined, undefined, name);\r\n        this._buildUniformLayout();\r\n\r\n        this.includedOnlyMeshes = [] as AbstractMesh[];\r\n        this.excludedMeshes = [] as AbstractMesh[];\r\n\r\n        this._resyncMeshes();\r\n    }\r\n\r\n    protected abstract _buildUniformLayout(): void;\r\n\r\n    /**\r\n     * Sets the passed Effect \"effect\" with the Light information.\r\n     * @param effect The effect to update\r\n     * @param lightIndex The index of the light in the effect to update\r\n     * @returns The light\r\n     */\r\n    public abstract transferToEffect(effect: Effect, lightIndex: string): Light;\r\n\r\n    /**\r\n     * Sets the passed Effect \"effect\" with the Light textures.\r\n     * @param effect The effect to update\r\n     * @param lightIndex The index of the light in the effect to update\r\n     * @returns The light\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public transferTexturesToEffect(effect: Effect, lightIndex: string): Light {\r\n        // Do nothing by default.\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Binds the lights information from the scene to the effect for the given mesh.\r\n     * @param lightIndex Light index\r\n     * @param scene The scene where the light belongs to\r\n     * @param effect The effect we are binding the data to\r\n     * @param useSpecular Defines if specular is supported\r\n     * @param receiveShadows Defines if the effect (mesh) we bind the light for receives shadows\r\n     */\r\n    public _bindLight(lightIndex: number, scene: Scene, effect: Effect, useSpecular: boolean, receiveShadows = true): void {\r\n        const iAsString = lightIndex.toString();\r\n        let needUpdate = false;\r\n\r\n        this._uniformBuffer.bindToEffect(effect, \"Light\" + iAsString);\r\n\r\n        if (this._renderId !== scene.getRenderId() || this._lastUseSpecular !== useSpecular || !this._uniformBuffer.useUbo) {\r\n            this._renderId = scene.getRenderId();\r\n            this._lastUseSpecular = useSpecular;\r\n\r\n            const scaledIntensity = this.getScaledIntensity();\r\n\r\n            this.transferToEffect(effect, iAsString);\r\n\r\n            this.diffuse.scaleToRef(scaledIntensity, TmpColors.Color3[0]);\r\n            this._uniformBuffer.updateColor4(\"vLightDiffuse\", TmpColors.Color3[0], this.range, iAsString);\r\n            if (useSpecular) {\r\n                this.specular.scaleToRef(scaledIntensity, TmpColors.Color3[1]);\r\n                this._uniformBuffer.updateColor4(\"vLightSpecular\", TmpColors.Color3[1], this.radius, iAsString);\r\n            }\r\n            needUpdate = true;\r\n        }\r\n\r\n        // Textures might still need to be rebound.\r\n        this.transferTexturesToEffect(effect, iAsString);\r\n\r\n        // Shadows\r\n        if (scene.shadowsEnabled && this.shadowEnabled && receiveShadows) {\r\n            const shadowGenerator = this.getShadowGenerator(scene.activeCamera) ?? this.getShadowGenerator();\r\n            if (shadowGenerator) {\r\n                shadowGenerator.bindShadowLight(iAsString, effect);\r\n                needUpdate = true;\r\n            }\r\n        }\r\n\r\n        if (needUpdate) {\r\n            this._uniformBuffer.update();\r\n        } else {\r\n            this._uniformBuffer.bindUniformBuffer();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets the passed Effect \"effect\" with the Light information.\r\n     * @param effect The effect to update\r\n     * @param lightDataUniformName The uniform used to store light data (position or direction)\r\n     * @returns The light\r\n     */\r\n    public abstract transferToNodeMaterialEffect(effect: Effect, lightDataUniformName: string): Light;\r\n\r\n    /**\r\n     * Returns the string \"Light\".\r\n     * @returns the class name\r\n     */\r\n    public getClassName(): string {\r\n        return \"Light\";\r\n    }\r\n\r\n    /** @internal */\r\n    public readonly _isLight = true;\r\n\r\n    /**\r\n     * Converts the light information to a readable string for debug purpose.\r\n     * @param fullDetails Supports for multiple levels of logging within scene loading\r\n     * @returns the human readable light info\r\n     */\r\n    public toString(fullDetails?: boolean): string {\r\n        let ret = \"Name: \" + this.name;\r\n        ret += \", type: \" + [\"Point\", \"Directional\", \"Spot\", \"Hemispheric\"][this.getTypeID()];\r\n        if (this.animations) {\r\n            for (let i = 0; i < this.animations.length; i++) {\r\n                ret += \", animation[0]: \" + this.animations[i].toString(fullDetails);\r\n            }\r\n        }\r\n        return ret;\r\n    }\r\n\r\n    /** @internal */\r\n    protected _syncParentEnabledState() {\r\n        super._syncParentEnabledState();\r\n        if (!this.isDisposed()) {\r\n            this._resyncMeshes();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set the enabled state of this node.\r\n     * @param value - the new enabled state\r\n     */\r\n    public setEnabled(value: boolean): void {\r\n        super.setEnabled(value);\r\n\r\n        this._resyncMeshes();\r\n    }\r\n\r\n    /**\r\n     * Returns the Light associated shadow generator if any.\r\n     * @param camera Camera for which the shadow generator should be retrieved (default: null). If null, retrieves the default shadow generator\r\n     * @returns the associated shadow generator.\r\n     */\r\n    public getShadowGenerator(camera: Nullable<Camera> = null): Nullable<IShadowGenerator> {\r\n        if (this._shadowGenerators === null) {\r\n            return null;\r\n        }\r\n\r\n        return this._shadowGenerators.get(camera) ?? null;\r\n    }\r\n\r\n    /**\r\n     * Returns all the shadow generators associated to this light\r\n     * @returns\r\n     */\r\n    public getShadowGenerators(): Nullable<Map<Nullable<Camera>, IShadowGenerator>> {\r\n        return this._shadowGenerators;\r\n    }\r\n\r\n    /**\r\n     * Returns a Vector3, the absolute light position in the World.\r\n     * @returns the world space position of the light\r\n     */\r\n    public getAbsolutePosition(): Vector3 {\r\n        return Vector3.Zero();\r\n    }\r\n\r\n    /**\r\n     * Specifies if the light will affect the passed mesh.\r\n     * @param mesh The mesh to test against the light\r\n     * @returns true the mesh is affected otherwise, false.\r\n     */\r\n    public canAffectMesh(mesh: AbstractMesh): boolean {\r\n        if (!mesh) {\r\n            return true;\r\n        }\r\n\r\n        if (this.includedOnlyMeshes && this.includedOnlyMeshes.length > 0 && this.includedOnlyMeshes.indexOf(mesh) === -1) {\r\n            return false;\r\n        }\r\n\r\n        if (this.excludedMeshes && this.excludedMeshes.length > 0 && this.excludedMeshes.indexOf(mesh) !== -1) {\r\n            return false;\r\n        }\r\n\r\n        if (this.includeOnlyWithLayerMask !== 0 && (this.includeOnlyWithLayerMask & mesh.layerMask) === 0) {\r\n            return false;\r\n        }\r\n\r\n        if (this.excludeWithLayerMask !== 0 && this.excludeWithLayerMask & mesh.layerMask) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Releases resources associated with this node.\r\n     * @param doNotRecurse Set to true to not recurse into each children (recurse into each children by default)\r\n     * @param disposeMaterialAndTextures Set to true to also dispose referenced materials and textures (false by default)\r\n     */\r\n    public dispose(doNotRecurse?: boolean, disposeMaterialAndTextures = false): void {\r\n        if (this._shadowGenerators) {\r\n            const iterator = this._shadowGenerators.values();\r\n            for (let key = iterator.next(); key.done !== true; key = iterator.next()) {\r\n                const shadowGenerator = key.value;\r\n                shadowGenerator.dispose();\r\n            }\r\n            this._shadowGenerators = null;\r\n        }\r\n\r\n        // Animations\r\n        this.getScene().stopAnimation(this);\r\n\r\n        if (this._parentContainer) {\r\n            const index = this._parentContainer.lights.indexOf(this);\r\n            if (index > -1) {\r\n                this._parentContainer.lights.splice(index, 1);\r\n            }\r\n            this._parentContainer = null;\r\n        }\r\n\r\n        // Remove from meshes\r\n        for (const mesh of this.getScene().meshes) {\r\n            mesh._removeLightSource(this, true);\r\n        }\r\n\r\n        this._uniformBuffer.dispose();\r\n\r\n        // Remove from scene\r\n        this.getScene().removeLight(this);\r\n        super.dispose(doNotRecurse, disposeMaterialAndTextures);\r\n    }\r\n\r\n    /**\r\n     * Returns the light type ID (integer).\r\n     * @returns The light Type id as a constant defines in Light.LIGHTTYPEID_x\r\n     */\r\n    public getTypeID(): number {\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n     * Returns the intensity scaled by the Photometric Scale according to the light type and intensity mode.\r\n     * @returns the scaled intensity in intensity mode unit\r\n     */\r\n    public getScaledIntensity() {\r\n        return this._photometricScale * this.intensity;\r\n    }\r\n\r\n    /**\r\n     * Returns a new Light object, named \"name\", from the current one.\r\n     * @param name The name of the cloned light\r\n     * @param newParent The parent of this light, if it has one\r\n     * @returns the new created light\r\n     */\r\n    public clone(name: string, newParent: Nullable<Node> = null): Nullable<Light> {\r\n        const constructor = Light.GetConstructorFromName(this.getTypeID(), name, this.getScene());\r\n\r\n        if (!constructor) {\r\n            return null;\r\n        }\r\n        const clonedLight = SerializationHelper.Clone(constructor, this);\r\n        if (name) {\r\n            clonedLight.name = name;\r\n        }\r\n        if (newParent) {\r\n            clonedLight.parent = newParent;\r\n        }\r\n        clonedLight.setEnabled(this.isEnabled());\r\n\r\n        this.onClonedObservable.notifyObservers(clonedLight);\r\n\r\n        return clonedLight;\r\n    }\r\n\r\n    /**\r\n     * Serializes the current light into a Serialization object.\r\n     * @returns the serialized object.\r\n     */\r\n    public serialize(): any {\r\n        const serializationObject = SerializationHelper.Serialize(this);\r\n        serializationObject.uniqueId = this.uniqueId;\r\n\r\n        // Type\r\n        serializationObject.type = this.getTypeID();\r\n\r\n        // Parent\r\n        if (this.parent) {\r\n            this.parent._serializeAsParent(serializationObject);\r\n        }\r\n\r\n        // Inclusion / exclusions\r\n        if (this.excludedMeshes.length > 0) {\r\n            serializationObject.excludedMeshesIds = [];\r\n            this.excludedMeshes.forEach((mesh: AbstractMesh) => {\r\n                serializationObject.excludedMeshesIds.push(mesh.id);\r\n            });\r\n        }\r\n\r\n        if (this.includedOnlyMeshes.length > 0) {\r\n            serializationObject.includedOnlyMeshesIds = [];\r\n            this.includedOnlyMeshes.forEach((mesh: AbstractMesh) => {\r\n                serializationObject.includedOnlyMeshesIds.push(mesh.id);\r\n            });\r\n        }\r\n\r\n        // Animations\r\n        SerializationHelper.AppendSerializedAnimations(this, serializationObject);\r\n        serializationObject.ranges = this.serializeAnimationRanges();\r\n\r\n        serializationObject.isEnabled = this.isEnabled();\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    /**\r\n     * Creates a new typed light from the passed type (integer) : point light = 0, directional light = 1, spot light = 2, hemispheric light = 3.\r\n     * This new light is named \"name\" and added to the passed scene.\r\n     * @param type Type according to the types available in Light.LIGHTTYPEID_x\r\n     * @param name The friendly name of the light\r\n     * @param scene The scene the new light will belong to\r\n     * @returns the constructor function\r\n     */\r\n    static GetConstructorFromName(type: number, name: string, scene: Scene): Nullable<() => Light> {\r\n        const constructorFunc = Node.Construct(\"Light_Type_\" + type, name, scene);\r\n\r\n        if (constructorFunc) {\r\n            return <() => Light>constructorFunc;\r\n        }\r\n\r\n        // Default to no light for none present once.\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Parses the passed \"parsedLight\" and returns a new instanced Light from this parsing.\r\n     * @param parsedLight The JSON representation of the light\r\n     * @param scene The scene to create the parsed light in\r\n     * @returns the created light after parsing\r\n     */\r\n    public static Parse(parsedLight: any, scene: Scene): Nullable<Light> {\r\n        const constructor = Light.GetConstructorFromName(parsedLight.type, parsedLight.name, scene);\r\n\r\n        if (!constructor) {\r\n            return null;\r\n        }\r\n\r\n        const light = SerializationHelper.Parse(constructor, parsedLight, scene);\r\n\r\n        // Inclusion / exclusions\r\n        if (parsedLight.excludedMeshesIds) {\r\n            light._excludedMeshesIds = parsedLight.excludedMeshesIds;\r\n        }\r\n\r\n        if (parsedLight.includedOnlyMeshesIds) {\r\n            light._includedOnlyMeshesIds = parsedLight.includedOnlyMeshesIds;\r\n        }\r\n\r\n        // Parent\r\n        if (parsedLight.parentId !== undefined) {\r\n            light._waitingParentId = parsedLight.parentId;\r\n        }\r\n\r\n        if (parsedLight.parentInstanceIndex !== undefined) {\r\n            light._waitingParentInstanceIndex = parsedLight.parentInstanceIndex;\r\n        }\r\n\r\n        // Falloff\r\n        if (parsedLight.falloffType !== undefined) {\r\n            light.falloffType = parsedLight.falloffType;\r\n        }\r\n\r\n        // Lightmaps\r\n        if (parsedLight.lightmapMode !== undefined) {\r\n            light.lightmapMode = parsedLight.lightmapMode;\r\n        }\r\n\r\n        // Animations\r\n        if (parsedLight.animations) {\r\n            for (let animationIndex = 0; animationIndex < parsedLight.animations.length; animationIndex++) {\r\n                const parsedAnimation = parsedLight.animations[animationIndex];\r\n                const internalClass = GetClass(\"BABYLON.Animation\");\r\n                if (internalClass) {\r\n                    light.animations.push(internalClass.Parse(parsedAnimation));\r\n                }\r\n            }\r\n            Node.ParseAnimationRanges(light, parsedLight, scene);\r\n        }\r\n\r\n        if (parsedLight.autoAnimate) {\r\n            scene.beginAnimation(light, parsedLight.autoAnimateFrom, parsedLight.autoAnimateTo, parsedLight.autoAnimateLoop, parsedLight.autoAnimateSpeed || 1.0);\r\n        }\r\n\r\n        // Check if isEnabled is defined to be back compatible with prior serialized versions.\r\n        if (parsedLight.isEnabled !== undefined) {\r\n            light.setEnabled(parsedLight.isEnabled);\r\n        }\r\n\r\n        return light;\r\n    }\r\n\r\n    private _hookArrayForExcluded(array: AbstractMesh[]): void {\r\n        const oldPush = array.push;\r\n        array.push = (...items: AbstractMesh[]) => {\r\n            const result = oldPush.apply(array, items);\r\n\r\n            for (const item of items) {\r\n                item._resyncLightSource(this);\r\n            }\r\n\r\n            return result;\r\n        };\r\n\r\n        const oldSplice = array.splice;\r\n        array.splice = (index: number, deleteCount?: number) => {\r\n            const deleted = oldSplice.apply(array, [index, deleteCount]);\r\n\r\n            for (const item of deleted) {\r\n                item._resyncLightSource(this);\r\n            }\r\n\r\n            return deleted;\r\n        };\r\n\r\n        for (const item of array) {\r\n            item._resyncLightSource(this);\r\n        }\r\n    }\r\n\r\n    private _hookArrayForIncludedOnly(array: AbstractMesh[]): void {\r\n        const oldPush = array.push;\r\n        array.push = (...items: AbstractMesh[]) => {\r\n            const result = oldPush.apply(array, items);\r\n\r\n            this._resyncMeshes();\r\n\r\n            return result;\r\n        };\r\n\r\n        const oldSplice = array.splice;\r\n        array.splice = (index: number, deleteCount?: number) => {\r\n            const deleted = oldSplice.apply(array, [index, deleteCount]);\r\n\r\n            this._resyncMeshes();\r\n\r\n            return deleted;\r\n        };\r\n\r\n        this._resyncMeshes();\r\n    }\r\n\r\n    private _resyncMeshes() {\r\n        for (const mesh of this.getScene().meshes) {\r\n            mesh._resyncLightSource(this);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Forces the meshes to update their light related information in their rendering used effects\r\n     * @internal Internal Use Only\r\n     */\r\n    public _markMeshesAsLightDirty() {\r\n        for (const mesh of this.getScene().meshes) {\r\n            if (mesh.lightSources.indexOf(this) !== -1) {\r\n                mesh._markSubMeshesAsLightDirty();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Recomputes the cached photometric scale if needed.\r\n     */\r\n    private _computePhotometricScale(): void {\r\n        this._photometricScale = this._getPhotometricScale();\r\n        this.getScene().resetCachedMaterial();\r\n    }\r\n\r\n    /**\r\n     * Returns the Photometric Scale according to the light type and intensity mode.\r\n     */\r\n    private _getPhotometricScale() {\r\n        let photometricScale = 0.0;\r\n        const lightTypeID = this.getTypeID();\r\n\r\n        //get photometric mode\r\n        let photometricMode = this.intensityMode;\r\n        if (photometricMode === Light.INTENSITYMODE_AUTOMATIC) {\r\n            if (lightTypeID === Light.LIGHTTYPEID_DIRECTIONALLIGHT) {\r\n                photometricMode = Light.INTENSITYMODE_ILLUMINANCE;\r\n            } else {\r\n                photometricMode = Light.INTENSITYMODE_LUMINOUSINTENSITY;\r\n            }\r\n        }\r\n\r\n        //compute photometric scale\r\n        switch (lightTypeID) {\r\n            case Light.LIGHTTYPEID_POINTLIGHT:\r\n            case Light.LIGHTTYPEID_SPOTLIGHT:\r\n                switch (photometricMode) {\r\n                    case Light.INTENSITYMODE_LUMINOUSPOWER:\r\n                        photometricScale = 1.0 / (4.0 * Math.PI);\r\n                        break;\r\n                    case Light.INTENSITYMODE_LUMINOUSINTENSITY:\r\n                        photometricScale = 1.0;\r\n                        break;\r\n                    case Light.INTENSITYMODE_LUMINANCE:\r\n                        photometricScale = this.radius * this.radius;\r\n                        break;\r\n                }\r\n                break;\r\n\r\n            case Light.LIGHTTYPEID_DIRECTIONALLIGHT:\r\n                switch (photometricMode) {\r\n                    case Light.INTENSITYMODE_ILLUMINANCE:\r\n                        photometricScale = 1.0;\r\n                        break;\r\n                    case Light.INTENSITYMODE_LUMINANCE: {\r\n                        // When radius (and therefore solid angle) is non-zero a directional lights brightness can be specified via central (peak) luminance.\r\n                        // For a directional light the 'radius' defines the angular radius (in radians) rather than world-space radius (e.g. in metres).\r\n                        let apexAngleRadians = this.radius;\r\n                        // Impose a minimum light angular size to avoid the light becoming an infinitely small angular light source (i.e. a dirac delta function).\r\n                        apexAngleRadians = Math.max(apexAngleRadians, 0.001);\r\n                        const solidAngle = 2.0 * Math.PI * (1.0 - Math.cos(apexAngleRadians));\r\n                        photometricScale = solidAngle;\r\n                        break;\r\n                    }\r\n                }\r\n                break;\r\n\r\n            case Light.LIGHTTYPEID_HEMISPHERICLIGHT:\r\n                // No fall off in hemispheric light.\r\n                photometricScale = 1.0;\r\n                break;\r\n        }\r\n        return photometricScale;\r\n    }\r\n\r\n    /**\r\n     * Reorder the light in the scene according to their defined priority.\r\n     * @internal Internal Use Only\r\n     */\r\n    public _reorderLightsInScene(): void {\r\n        const scene = this.getScene();\r\n        if (this._renderPriority != 0) {\r\n            scene.requireLightSorting = true;\r\n        }\r\n        this.getScene().sortLightsByPriority();\r\n    }\r\n\r\n    /**\r\n     * Prepares the list of defines specific to the light type.\r\n     * @param defines the list of defines\r\n     * @param lightIndex defines the index of the light for the effect\r\n     */\r\n    public abstract prepareLightSpecificDefines(defines: any, lightIndex: number): void;\r\n}\r\n", "import { serialize, serializeAsVector3 } from \"../Misc/decorators\";\r\nimport type { Camera } from \"../Cameras/camera\";\r\nimport type { Scene } from \"../scene\";\r\nimport { Matrix, Vector3 } from \"../Maths/math.vector\";\r\nimport type { AbstractMesh } from \"../Meshes/abstractMesh\";\r\nimport { Light } from \"./light\";\r\nimport { Axis } from \"../Maths/math.axis\";\r\n/**\r\n * Interface describing all the common properties and methods a shadow light needs to implement.\r\n * This helps both the shadow generator and materials to generate the corresponding shadow maps\r\n * as well as binding the different shadow properties to the effects.\r\n */\r\nexport interface IShadowLight extends Light {\r\n    /**\r\n     * The light id in the scene (used in scene.getLightById for instance)\r\n     */\r\n    id: string;\r\n    /**\r\n     * The position the shadow will be casted from.\r\n     */\r\n    position: Vector3;\r\n    /**\r\n     * In 2d mode (needCube being false), the direction used to cast the shadow.\r\n     */\r\n    direction: Vector3;\r\n    /**\r\n     * The transformed position. Position of the light in world space taking parenting in account.\r\n     */\r\n    transformedPosition: Vector3;\r\n    /**\r\n     * The transformed direction. Direction of the light in world space taking parenting in account.\r\n     */\r\n    transformedDirection: Vector3;\r\n    /**\r\n     * The friendly name of the light in the scene.\r\n     */\r\n    name: string;\r\n    /**\r\n     * Defines the shadow projection clipping minimum z value.\r\n     */\r\n    shadowMinZ: number;\r\n    /**\r\n     * Defines the shadow projection clipping maximum z value.\r\n     */\r\n    shadowMaxZ: number;\r\n\r\n    /**\r\n     * Computes the transformed information (transformedPosition and transformedDirection in World space) of the current light\r\n     * @returns true if the information has been computed, false if it does not need to (no parenting)\r\n     */\r\n    computeTransformedInformation(): boolean;\r\n\r\n    /**\r\n     * Gets the scene the light belongs to.\r\n     * @returns The scene\r\n     */\r\n    getScene(): Scene;\r\n\r\n    /**\r\n     * Callback defining a custom Projection Matrix Builder.\r\n     * This can be used to override the default projection matrix computation.\r\n     */\r\n    customProjectionMatrixBuilder: (viewMatrix: Matrix, renderList: Array<AbstractMesh>, result: Matrix) => void;\r\n\r\n    /**\r\n     * Sets the shadow projection matrix in parameter to the generated projection matrix.\r\n     * @param matrix The matrix to updated with the projection information\r\n     * @param viewMatrix The transform matrix of the light\r\n     * @param renderList The list of mesh to render in the map\r\n     * @returns The current light\r\n     */\r\n    setShadowProjectionMatrix(matrix: Matrix, viewMatrix: Matrix, renderList: Array<AbstractMesh>): IShadowLight;\r\n\r\n    /**\r\n     * Gets the current depth scale used in ESM.\r\n     * @returns The scale\r\n     */\r\n    getDepthScale(): number;\r\n\r\n    /**\r\n     * Returns whether or not the shadow generation require a cube texture or a 2d texture.\r\n     * @returns true if a cube texture needs to be use\r\n     */\r\n    needCube(): boolean;\r\n\r\n    /**\r\n     * Detects if the projection matrix requires to be recomputed this frame.\r\n     * @returns true if it requires to be recomputed otherwise, false.\r\n     */\r\n    needProjectionMatrixCompute(): boolean;\r\n\r\n    /**\r\n     * Forces the shadow generator to recompute the projection matrix even if position and direction did not changed.\r\n     */\r\n    forceProjectionMatrixCompute(): void;\r\n\r\n    /**\r\n     * Get the direction to use to render the shadow map. In case of cube texture, the face index can be passed.\r\n     * @param faceIndex The index of the face we are computed the direction to generate shadow\r\n     * @returns The set direction in 2d mode otherwise the direction to the cubemap face if needCube() is true\r\n     */\r\n    getShadowDirection(faceIndex?: number): Vector3;\r\n\r\n    /**\r\n     * Gets the minZ used for shadow according to both the scene and the light.\r\n     * @param activeCamera The camera we are returning the min for\r\n     * @returns the depth min z\r\n     */\r\n    getDepthMinZ(activeCamera: Camera): number;\r\n\r\n    /**\r\n     * Gets the maxZ used for shadow according to both the scene and the light.\r\n     * @param activeCamera The camera we are returning the max for\r\n     * @returns the depth max z\r\n     */\r\n    getDepthMaxZ(activeCamera: Camera): number;\r\n}\r\n\r\n/**\r\n * Base implementation IShadowLight\r\n * It groups all the common behaviour in order to reduce duplication and better follow the DRY pattern.\r\n */\r\nexport abstract class ShadowLight extends Light implements IShadowLight {\r\n    protected abstract _setDefaultShadowProjectionMatrix(matrix: Matrix, viewMatrix: Matrix, renderList: Array<AbstractMesh>): void;\r\n\r\n    protected _position: Vector3;\r\n    protected _setPosition(value: Vector3) {\r\n        this._position = value;\r\n    }\r\n    /**\r\n     * Sets the position the shadow will be casted from. Also use as the light position for both\r\n     * point and spot lights.\r\n     */\r\n    @serializeAsVector3()\r\n    public get position(): Vector3 {\r\n        return this._position;\r\n    }\r\n    /**\r\n     * Sets the position the shadow will be casted from. Also use as the light position for both\r\n     * point and spot lights.\r\n     */\r\n    public set position(value: Vector3) {\r\n        this._setPosition(value);\r\n    }\r\n\r\n    protected _direction: Vector3;\r\n    protected _setDirection(value: Vector3) {\r\n        this._direction = value;\r\n    }\r\n    /**\r\n     * In 2d mode (needCube being false), gets the direction used to cast the shadow.\r\n     * Also use as the light direction on spot and directional lights.\r\n     */\r\n    @serializeAsVector3()\r\n    public get direction(): Vector3 {\r\n        return this._direction;\r\n    }\r\n    /**\r\n     * In 2d mode (needCube being false), sets the direction used to cast the shadow.\r\n     * Also use as the light direction on spot and directional lights.\r\n     */\r\n    public set direction(value: Vector3) {\r\n        this._setDirection(value);\r\n    }\r\n\r\n    protected _shadowMinZ: number;\r\n    /**\r\n     * Gets the shadow projection clipping minimum z value.\r\n     */\r\n    @serialize()\r\n    public get shadowMinZ(): number {\r\n        return this._shadowMinZ;\r\n    }\r\n    /**\r\n     * Sets the shadow projection clipping minimum z value.\r\n     */\r\n    public set shadowMinZ(value: number) {\r\n        this._shadowMinZ = value;\r\n        this.forceProjectionMatrixCompute();\r\n    }\r\n\r\n    protected _shadowMaxZ: number;\r\n    /**\r\n     * Sets the shadow projection clipping maximum z value.\r\n     */\r\n    @serialize()\r\n    public get shadowMaxZ(): number {\r\n        return this._shadowMaxZ;\r\n    }\r\n    /**\r\n     * Gets the shadow projection clipping maximum z value.\r\n     */\r\n    public set shadowMaxZ(value: number) {\r\n        this._shadowMaxZ = value;\r\n        this.forceProjectionMatrixCompute();\r\n    }\r\n\r\n    /**\r\n     * Callback defining a custom Projection Matrix Builder.\r\n     * This can be used to override the default projection matrix computation.\r\n     */\r\n    public customProjectionMatrixBuilder: (viewMatrix: Matrix, renderList: Array<AbstractMesh>, result: Matrix) => void;\r\n\r\n    /**\r\n     * The transformed position. Position of the light in world space taking parenting in account.\r\n     */\r\n    public transformedPosition: Vector3;\r\n\r\n    /**\r\n     * The transformed direction. Direction of the light in world space taking parenting in account.\r\n     */\r\n    public transformedDirection: Vector3;\r\n\r\n    private _needProjectionMatrixCompute: boolean = true;\r\n\r\n    /**\r\n     * Computes the transformed information (transformedPosition and transformedDirection in World space) of the current light\r\n     * @returns true if the information has been computed, false if it does not need to (no parenting)\r\n     */\r\n    public computeTransformedInformation(): boolean {\r\n        if (this.parent && this.parent.getWorldMatrix) {\r\n            if (!this.transformedPosition) {\r\n                this.transformedPosition = Vector3.Zero();\r\n            }\r\n            Vector3.TransformCoordinatesToRef(this.position, this.parent.getWorldMatrix(), this.transformedPosition);\r\n\r\n            // In case the direction is present.\r\n            if (this.direction) {\r\n                if (!this.transformedDirection) {\r\n                    this.transformedDirection = Vector3.Zero();\r\n                }\r\n                Vector3.TransformNormalToRef(this.direction, this.parent.getWorldMatrix(), this.transformedDirection);\r\n            }\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Return the depth scale used for the shadow map.\r\n     * @returns the depth scale.\r\n     */\r\n    public getDepthScale(): number {\r\n        return 50.0;\r\n    }\r\n\r\n    /**\r\n     * Get the direction to use to render the shadow map. In case of cube texture, the face index can be passed.\r\n     * @param faceIndex The index of the face we are computed the direction to generate shadow\r\n     * @returns The set direction in 2d mode otherwise the direction to the cubemap face if needCube() is true\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public getShadowDirection(faceIndex?: number): Vector3 {\r\n        return this.transformedDirection ? this.transformedDirection : this.direction;\r\n    }\r\n\r\n    /**\r\n     * Returns the ShadowLight absolute position in the World.\r\n     * @returns the position vector in world space\r\n     */\r\n    public getAbsolutePosition(): Vector3 {\r\n        return this.transformedPosition ? this.transformedPosition : this.position;\r\n    }\r\n\r\n    /**\r\n     * Sets the ShadowLight direction toward the passed target.\r\n     * @param target The point to target in local space\r\n     * @returns the updated ShadowLight direction\r\n     */\r\n    public setDirectionToTarget(target: Vector3): Vector3 {\r\n        this.direction = Vector3.Normalize(target.subtract(this.position));\r\n        return this.direction;\r\n    }\r\n\r\n    /**\r\n     * Returns the light rotation in euler definition.\r\n     * @returns the x y z rotation in local space.\r\n     */\r\n    public getRotation(): Vector3 {\r\n        this.direction.normalize();\r\n        const xaxis = Vector3.Cross(this.direction, Axis.Y);\r\n        const yaxis = Vector3.Cross(xaxis, this.direction);\r\n        return Vector3.RotationFromAxis(xaxis, yaxis, this.direction);\r\n    }\r\n\r\n    /**\r\n     * Returns whether or not the shadow generation require a cube texture or a 2d texture.\r\n     * @returns true if a cube texture needs to be use\r\n     */\r\n    public needCube(): boolean {\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Detects if the projection matrix requires to be recomputed this frame.\r\n     * @returns true if it requires to be recomputed otherwise, false.\r\n     */\r\n    public needProjectionMatrixCompute(): boolean {\r\n        return this._needProjectionMatrixCompute;\r\n    }\r\n\r\n    /**\r\n     * Forces the shadow generator to recompute the projection matrix even if position and direction did not changed.\r\n     */\r\n    public forceProjectionMatrixCompute(): void {\r\n        this._needProjectionMatrixCompute = true;\r\n    }\r\n\r\n    /** @internal */\r\n    public _initCache() {\r\n        super._initCache();\r\n\r\n        this._cache.position = Vector3.Zero();\r\n    }\r\n\r\n    /** @internal */\r\n    public _isSynchronized(): boolean {\r\n        if (!this._cache.position.equals(this.position)) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Computes the world matrix of the node\r\n     * @param force defines if the cache version should be invalidated forcing the world matrix to be created from scratch\r\n     * @returns the world matrix\r\n     */\r\n    public computeWorldMatrix(force?: boolean): Matrix {\r\n        if (!force && this.isSynchronized()) {\r\n            this._currentRenderId = this.getScene().getRenderId();\r\n            return this._worldMatrix;\r\n        }\r\n\r\n        this._updateCache();\r\n        this._cache.position.copyFrom(this.position);\r\n\r\n        if (!this._worldMatrix) {\r\n            this._worldMatrix = Matrix.Identity();\r\n        }\r\n\r\n        Matrix.TranslationToRef(this.position.x, this.position.y, this.position.z, this._worldMatrix);\r\n\r\n        if (this.parent && this.parent.getWorldMatrix) {\r\n            this._worldMatrix.multiplyToRef(this.parent.getWorldMatrix(), this._worldMatrix);\r\n\r\n            this._markSyncedWithParent();\r\n        }\r\n\r\n        // Cache the determinant\r\n        this._worldMatrixDeterminantIsDirty = true;\r\n\r\n        return this._worldMatrix;\r\n    }\r\n\r\n    /**\r\n     * Gets the minZ used for shadow according to both the scene and the light.\r\n     * @param activeCamera The camera we are returning the min for\r\n     * @returns the depth min z\r\n     */\r\n    public getDepthMinZ(activeCamera: Camera): number {\r\n        return this.shadowMinZ !== undefined ? this.shadowMinZ : activeCamera.minZ;\r\n    }\r\n\r\n    /**\r\n     * Gets the maxZ used for shadow according to both the scene and the light.\r\n     * @param activeCamera The camera we are returning the max for\r\n     * @returns the depth max z\r\n     */\r\n    public getDepthMaxZ(activeCamera: Camera): number {\r\n        return this.shadowMaxZ !== undefined ? this.shadowMaxZ : activeCamera.maxZ;\r\n    }\r\n\r\n    /**\r\n     * Sets the shadow projection matrix in parameter to the generated projection matrix.\r\n     * @param matrix The matrix to updated with the projection information\r\n     * @param viewMatrix The transform matrix of the light\r\n     * @param renderList The list of mesh to render in the map\r\n     * @returns The current light\r\n     */\r\n    public setShadowProjectionMatrix(matrix: Matrix, viewMatrix: Matrix, renderList: Array<AbstractMesh>): IShadowLight {\r\n        if (this.customProjectionMatrixBuilder) {\r\n            this.customProjectionMatrixBuilder(viewMatrix, renderList, matrix);\r\n        } else {\r\n            this._setDefaultShadowProjectionMatrix(matrix, viewMatrix, renderList);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /** @internal */\r\n    protected _syncParentEnabledState() {\r\n        super._syncParentEnabledState();\r\n        if (!this.parent || !this.parent.getWorldMatrix) {\r\n            (this.transformedPosition as any) = null;\r\n            (this.transformedDirection as any) = null;\r\n        }\r\n    }\r\n}\r\n", "// Do not edit.\nimport { ShaderStore } from \"../../Engines/shaderStore\";\n\nconst name = \"kernelBlurVaryingDeclaration\";\nconst shader = `varying vec2 sampleCoord{X};`;\n// Sideeffect\nShaderStore.IncludesShadersStore[name] = shader;\n/** @internal */\nexport const kernelBlurVaryingDeclaration = { name, shader };\n", "// Do not edit.\nimport { ShaderStore } from \"../../Engines/shaderStore\";\n\nconst name = \"packingFunctions\";\nconst shader = `vec4 pack(float depth)\n{const vec4 bit_shift=vec4(255.0*255.0*255.0,255.0*255.0,255.0,1.0);const vec4 bit_mask=vec4(0.0,1.0/255.0,1.0/255.0,1.0/255.0);vec4 res=fract(depth*bit_shift);res-=res.xxyz*bit_mask;return res;}\nfloat unpack(vec4 color)\n{const vec4 bit_shift=vec4(1.0/(255.0*255.0*255.0),1.0/(255.0*255.0),1.0/255.0,1.0);return dot(color,bit_shift);}`;\n// Sideeffect\nShaderStore.IncludesShadersStore[name] = shader;\n/** @internal */\nexport const packingFunctions = { name, shader };\n", "// Do not edit.\nimport { ShaderStore } from \"../../Engines/shaderStore\";\n\nconst name = \"kernelBlurFragment\";\nconst shader = `#ifdef DOF\nfactor=sampleCoC(sampleCoord{X}); \ncomputedWeight=KERNEL_WEIGHT{X}*factor;sumOfWeights+=computedWeight;\n#else\ncomputedWeight=KERNEL_WEIGHT{X};\n#endif\n#ifdef PACKEDFLOAT\nblend+=unpack(texture2D(textureSampler,sampleCoord{X}))*computedWeight;\n#else\nblend+=texture2D(textureSampler,sampleCoord{X})*computedWeight;\n#endif\n`;\n// Sideeffect\nShaderStore.IncludesShadersStore[name] = shader;\n/** @internal */\nexport const kernelBlurFragment = { name, shader };\n", "// Do not edit.\nimport { ShaderStore } from \"../../Engines/shaderStore\";\n\nconst name = \"kernelBlurFragment2\";\nconst shader = `#ifdef DOF\nfactor=sampleCoC(sampleCenter+delta*KERNEL_DEP_OFFSET{X});computedWeight=KERNEL_DEP_WEIGHT{X}*factor;sumOfWeights+=computedWeight;\n#else\ncomputedWeight=KERNEL_DEP_WEIGHT{X};\n#endif\n#ifdef PACKEDFLOAT\nblend+=unpack(texture2D(textureSampler,sampleCenter+delta*KERNEL_DEP_OFFSET{X}))*computedWeight;\n#else\nblend+=texture2D(textureSampler,sampleCenter+delta*KERNEL_DEP_OFFSET{X})*computedWeight;\n#endif\n`;\n// Sideeffect\nShaderStore.IncludesShadersStore[name] = shader;\n/** @internal */\nexport const kernelBlurFragment2 = { name, shader };\n", "// Do not edit.\nimport { ShaderStore } from \"../Engines/shaderStore\";\nimport \"./ShadersInclude/kernelBlurVaryingDeclaration\";\nimport \"./ShadersInclude/packingFunctions\";\nimport \"./ShadersInclude/kernelBlurFragment\";\nimport \"./ShadersInclude/kernelBlurFragment2\";\n\nconst name = \"kernelBlurPixelShader\";\nconst shader = `uniform sampler2D textureSampler;uniform vec2 delta;varying vec2 sampleCenter;\n#ifdef DOF\nuniform sampler2D circleOfConfusionSampler;float sampleCoC(in vec2 offset) {float coc=texture2D(circleOfConfusionSampler,offset).r;return coc; }\n#endif\n#include<kernelBlurVaryingDeclaration>[0..varyingCount]\n#ifdef PACKEDFLOAT\n#include<packingFunctions>\n#endif\n#define CUSTOM_FRAGMENT_DEFINITIONS\nvoid main(void)\n{float computedWeight=0.0;\n#ifdef PACKEDFLOAT\nfloat blend=0.;\n#else\nvec4 blend=vec4(0.);\n#endif\n#ifdef DOF\nfloat sumOfWeights=CENTER_WEIGHT; \nfloat factor=0.0;\n#ifdef PACKEDFLOAT\nblend+=unpack(texture2D(textureSampler,sampleCenter))*CENTER_WEIGHT;\n#else\nblend+=texture2D(textureSampler,sampleCenter)*CENTER_WEIGHT;\n#endif\n#endif\n#include<kernelBlurFragment>[0..varyingCount]\n#include<kernelBlurFragment2>[0..depCount]\n#ifdef PACKEDFLOAT\ngl_FragColor=pack(blend);\n#else\ngl_FragColor=blend;\n#endif\n#ifdef DOF\ngl_FragColor/=sumOfWeights;\n#endif\n}`;\n// Sideeffect\nShaderStore.ShadersStore[name] = shader;\n/** @internal */\nexport const kernelBlurPixelShader = { name, shader };\n", "// Do not edit.\nimport { ShaderStore } from \"../../Engines/shaderStore\";\n\nconst name = \"kernelBlurVertex\";\nconst shader = `sampleCoord{X}=sampleCenter+delta*KERNEL_OFFSET{X};`;\n// Sideeffect\nShaderStore.IncludesShadersStore[name] = shader;\n/** @internal */\nexport const kernelBlurVertex = { name, shader };\n", "// Do not edit.\nimport { ShaderStore } from \"../Engines/shaderStore\";\nimport \"./ShadersInclude/kernelBlurVaryingDeclaration\";\nimport \"./ShadersInclude/kernelBlurVertex\";\n\nconst name = \"kernelBlurVertexShader\";\nconst shader = `attribute vec2 position;uniform vec2 delta;varying vec2 sampleCenter;\n#include<kernelBlurVaryingDeclaration>[0..varyingCount]\nconst vec2 madd=vec2(0.5,0.5);\n#define CUSTOM_VERTEX_DEFINITIONS\nvoid main(void) {\n#define CUSTOM_VERTEX_MAIN_BEGIN\nsampleCenter=(position*madd+madd);\n#include<kernelBlurVertex>[0..varyingCount]\ngl_Position=vec4(position,0.0,1.0);\n#define CUSTOM_VERTEX_MAIN_END\n}`;\n// Sideeffect\nShaderStore.ShadersStore[name] = shader;\n/** @internal */\nexport const kernelBlurVertexShader = { name, shader };\n", "/* eslint-disable @typescript-eslint/no-unused-vars */\r\nimport type { Vector2 } from \"../Maths/math.vector\";\r\nimport type { Nullable } from \"../types\";\r\nimport type { PostProcessOptions } from \"./postProcess\";\r\nimport { PostProcess } from \"./postProcess\";\r\nimport type { Camera } from \"../Cameras/camera\";\r\nimport type { Effect } from \"../Materials/effect\";\r\nimport { Texture } from \"../Materials/Textures/texture\";\r\nimport type { Engine } from \"../Engines/engine\";\r\nimport { Constants } from \"../Engines/constants\";\r\n\r\nimport \"../Shaders/kernelBlur.fragment\";\r\nimport \"../Shaders/kernelBlur.vertex\";\r\nimport { RegisterClass } from \"../Misc/typeStore\";\r\nimport { serialize, serializeAsVector2, SerializationHelper } from \"../Misc/decorators\";\r\n\r\nimport type { Scene } from \"../scene\";\r\n\r\n/**\r\n * The Blur Post Process which blurs an image based on a kernel and direction.\r\n * Can be used twice in x and y directions to perform a gaussian blur in two passes.\r\n */\r\nexport class BlurPostProcess extends PostProcess {\r\n    @serialize(\"kernel\")\r\n    protected _kernel: number;\r\n    protected _idealKernel: number;\r\n    @serialize(\"packedFloat\")\r\n    protected _packedFloat: boolean = false;\r\n    private _staticDefines: string = \"\";\r\n\r\n    /** The direction in which to blur the image. */\r\n    @serializeAsVector2()\r\n    public direction: Vector2;\r\n\r\n    /**\r\n     * Sets the length in pixels of the blur sample region\r\n     */\r\n    public set kernel(v: number) {\r\n        if (this._idealKernel === v) {\r\n            return;\r\n        }\r\n\r\n        v = Math.max(v, 1);\r\n        this._idealKernel = v;\r\n        this._kernel = this._nearestBestKernel(v);\r\n        if (!this._blockCompilation) {\r\n            this._updateParameters();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the length in pixels of the blur sample region\r\n     */\r\n    public get kernel(): number {\r\n        return this._idealKernel;\r\n    }\r\n\r\n    /**\r\n     * Sets whether or not the blur needs to unpack/repack floats\r\n     */\r\n    public set packedFloat(v: boolean) {\r\n        if (this._packedFloat === v) {\r\n            return;\r\n        }\r\n        this._packedFloat = v;\r\n        if (!this._blockCompilation) {\r\n            this._updateParameters();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets whether or not the blur is unpacking/repacking floats\r\n     */\r\n    public get packedFloat(): boolean {\r\n        return this._packedFloat;\r\n    }\r\n\r\n    /**\r\n     * Gets a string identifying the name of the class\r\n     * @returns \"BlurPostProcess\" string\r\n     */\r\n    public getClassName(): string {\r\n        return \"BlurPostProcess\";\r\n    }\r\n\r\n    /**\r\n     * Creates a new instance BlurPostProcess\r\n     * @param name The name of the effect.\r\n     * @param direction The direction in which to blur the image.\r\n     * @param kernel The size of the kernel to be used when computing the blur. eg. Size of 3 will blur the center pixel by 2 pixels surrounding it.\r\n     * @param options The required width/height ratio to downsize to before computing the render pass. (Use 1.0 for full size)\r\n     * @param camera The camera to apply the render pass to.\r\n     * @param samplingMode The sampling mode to be used when computing the pass. (default: 0)\r\n     * @param engine The engine which the post process will be applied. (default: current engine)\r\n     * @param reusable If the post process can be reused on the same frame. (default: false)\r\n     * @param textureType Type of textures used when performing the post process. (default: 0)\r\n     * @param defines\r\n     * @param _blockCompilation If compilation of the shader should not be done in the constructor. The updateEffect method can be used to compile the shader at a later time. (default: false)\r\n     * @param textureFormat Format of textures used when performing the post process. (default: TEXTUREFORMAT_RGBA)\r\n     */\r\n    constructor(\r\n        name: string,\r\n        direction: Vector2,\r\n        kernel: number,\r\n        options: number | PostProcessOptions,\r\n        camera: Nullable<Camera>,\r\n        samplingMode: number = Texture.BILINEAR_SAMPLINGMODE,\r\n        engine?: Engine,\r\n        reusable?: boolean,\r\n        textureType = Constants.TEXTURETYPE_UNSIGNED_INT,\r\n        defines = \"\",\r\n        private _blockCompilation = false,\r\n        textureFormat = Constants.TEXTUREFORMAT_RGBA\r\n    ) {\r\n        super(\r\n            name,\r\n            \"kernelBlur\",\r\n            [\"delta\", \"direction\"],\r\n            [\"circleOfConfusionSampler\"],\r\n            options,\r\n            camera,\r\n            samplingMode,\r\n            engine,\r\n            reusable,\r\n            null,\r\n            textureType,\r\n            \"kernelBlur\",\r\n            { varyingCount: 0, depCount: 0 },\r\n            true,\r\n            textureFormat\r\n        );\r\n        this._staticDefines = defines;\r\n        this.direction = direction;\r\n        this.onApplyObservable.add((effect: Effect) => {\r\n            if (this._outputTexture) {\r\n                effect.setFloat2(\"delta\", (1 / this._outputTexture.width) * this.direction.x, (1 / this._outputTexture.height) * this.direction.y);\r\n            } else {\r\n                effect.setFloat2(\"delta\", (1 / this.width) * this.direction.x, (1 / this.height) * this.direction.y);\r\n            }\r\n        });\r\n\r\n        this.kernel = kernel;\r\n    }\r\n\r\n    /**\r\n     * Updates the effect with the current post process compile time values and recompiles the shader.\r\n     * @param defines Define statements that should be added at the beginning of the shader. (default: null)\r\n     * @param uniforms Set of uniform variables that will be passed to the shader. (default: null)\r\n     * @param samplers Set of Texture2D variables that will be passed to the shader. (default: null)\r\n     * @param indexParameters The index parameters to be used for babylons include syntax \"#include<kernelBlurVaryingDeclaration>[0..varyingCount]\". (default: undefined) See usage in babylon.blurPostProcess.ts and kernelBlur.vertex.fx\r\n     * @param onCompiled Called when the shader has been compiled.\r\n     * @param onError Called if there is an error when compiling a shader.\r\n     */\r\n    public updateEffect(\r\n        defines: Nullable<string> = null,\r\n        uniforms: Nullable<string[]> = null,\r\n        samplers: Nullable<string[]> = null,\r\n        indexParameters?: any,\r\n        onCompiled?: (effect: Effect) => void,\r\n        onError?: (effect: Effect, errors: string) => void\r\n    ) {\r\n        this._updateParameters(onCompiled, onError);\r\n    }\r\n\r\n    protected _updateParameters(onCompiled?: (effect: Effect) => void, onError?: (effect: Effect, errors: string) => void): void {\r\n        // Generate sampling offsets and weights\r\n        const N = this._kernel;\r\n        const centerIndex = (N - 1) / 2;\r\n\r\n        // Generate Gaussian sampling weights over kernel\r\n        let offsets = [];\r\n        let weights = [];\r\n        let totalWeight = 0;\r\n        for (let i = 0; i < N; i++) {\r\n            const u = i / (N - 1);\r\n            const w = this._gaussianWeight(u * 2.0 - 1);\r\n            offsets[i] = i - centerIndex;\r\n            weights[i] = w;\r\n            totalWeight += w;\r\n        }\r\n\r\n        // Normalize weights\r\n        for (let i = 0; i < weights.length; i++) {\r\n            weights[i] /= totalWeight;\r\n        }\r\n\r\n        // Optimize: combine samples to take advantage of hardware linear sampling\r\n        // Walk from left to center, combining pairs (symmetrically)\r\n        const linearSamplingWeights = [];\r\n        const linearSamplingOffsets = [];\r\n\r\n        const linearSamplingMap = [];\r\n\r\n        for (let i = 0; i <= centerIndex; i += 2) {\r\n            const j = Math.min(i + 1, Math.floor(centerIndex));\r\n\r\n            const singleCenterSample = i === j;\r\n\r\n            if (singleCenterSample) {\r\n                linearSamplingMap.push({ o: offsets[i], w: weights[i] });\r\n            } else {\r\n                const sharedCell = j === centerIndex;\r\n\r\n                const weightLinear = weights[i] + weights[j] * (sharedCell ? 0.5 : 1);\r\n                const offsetLinear = offsets[i] + 1 / (1 + weights[i] / weights[j]);\r\n\r\n                if (offsetLinear === 0) {\r\n                    linearSamplingMap.push({ o: offsets[i], w: weights[i] });\r\n                    linearSamplingMap.push({ o: offsets[i + 1], w: weights[i + 1] });\r\n                } else {\r\n                    linearSamplingMap.push({ o: offsetLinear, w: weightLinear });\r\n                    linearSamplingMap.push({ o: -offsetLinear, w: weightLinear });\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let i = 0; i < linearSamplingMap.length; i++) {\r\n            linearSamplingOffsets[i] = linearSamplingMap[i].o;\r\n            linearSamplingWeights[i] = linearSamplingMap[i].w;\r\n        }\r\n\r\n        // Replace with optimized\r\n        offsets = linearSamplingOffsets;\r\n        weights = linearSamplingWeights;\r\n\r\n        // Generate shaders\r\n        const maxVaryingRows = this.getEngine().getCaps().maxVaryingVectors;\r\n        const freeVaryingVec2 = Math.max(maxVaryingRows, 0) - 1; // Because of sampleCenter\r\n\r\n        let varyingCount = Math.min(offsets.length, freeVaryingVec2);\r\n\r\n        let defines = \"\";\r\n        defines += this._staticDefines;\r\n\r\n        // The DOF fragment should ignore the center pixel when looping as it is handled manually in the fragment shader.\r\n        if (this._staticDefines.indexOf(\"DOF\") != -1) {\r\n            defines += `#define CENTER_WEIGHT ${this._glslFloat(weights[varyingCount - 1])}\\n`;\r\n            varyingCount--;\r\n        }\r\n\r\n        for (let i = 0; i < varyingCount; i++) {\r\n            defines += `#define KERNEL_OFFSET${i} ${this._glslFloat(offsets[i])}\\n`;\r\n            defines += `#define KERNEL_WEIGHT${i} ${this._glslFloat(weights[i])}\\n`;\r\n        }\r\n\r\n        let depCount = 0;\r\n        for (let i = freeVaryingVec2; i < offsets.length; i++) {\r\n            defines += `#define KERNEL_DEP_OFFSET${depCount} ${this._glslFloat(offsets[i])}\\n`;\r\n            defines += `#define KERNEL_DEP_WEIGHT${depCount} ${this._glslFloat(weights[i])}\\n`;\r\n            depCount++;\r\n        }\r\n\r\n        if (this.packedFloat) {\r\n            defines += `#define PACKEDFLOAT 1`;\r\n        }\r\n\r\n        this._blockCompilation = false;\r\n        super.updateEffect(\r\n            defines,\r\n            null,\r\n            null,\r\n            {\r\n                varyingCount: varyingCount,\r\n                depCount: depCount,\r\n            },\r\n            onCompiled,\r\n            onError\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Best kernels are odd numbers that when divided by 2, their integer part is even, so 5, 9 or 13.\r\n     * Other odd kernels optimize correctly but require proportionally more samples, even kernels are\r\n     * possible but will produce minor visual artifacts. Since each new kernel requires a new shader we\r\n     * want to minimize kernel changes, having gaps between physical kernels is helpful in that regard.\r\n     * The gaps between physical kernels are compensated for in the weighting of the samples\r\n     * @param idealKernel Ideal blur kernel.\r\n     * @returns Nearest best kernel.\r\n     */\r\n    protected _nearestBestKernel(idealKernel: number): number {\r\n        const v = Math.round(idealKernel);\r\n        for (const k of [v, v - 1, v + 1, v - 2, v + 2]) {\r\n            if (k % 2 !== 0 && Math.floor(k / 2) % 2 === 0 && k > 0) {\r\n                return Math.max(k, 3);\r\n            }\r\n        }\r\n        return Math.max(v, 3);\r\n    }\r\n\r\n    /**\r\n     * Calculates the value of a Gaussian distribution with sigma 3 at a given point.\r\n     * @param x The point on the Gaussian distribution to sample.\r\n     * @returns the value of the Gaussian function at x.\r\n     */\r\n    protected _gaussianWeight(x: number): number {\r\n        //reference: Engines/ImageProcessingBlur.cpp #dcc760\r\n        // We are evaluating the Gaussian (normal) distribution over a kernel parameter space of [-1,1],\r\n        // so we truncate at three standard deviations by setting stddev (sigma) to 1/3.\r\n        // The choice of 3-sigma truncation is common but arbitrary, and means that the signal is\r\n        // truncated at around 1.3% of peak strength.\r\n\r\n        //the distribution is scaled to account for the difference between the actual kernel size and the requested kernel size\r\n        const sigma = 1 / 3;\r\n        const denominator = Math.sqrt(2.0 * Math.PI) * sigma;\r\n        const exponent = -((x * x) / (2.0 * sigma * sigma));\r\n        const weight = (1.0 / denominator) * Math.exp(exponent);\r\n        return weight;\r\n    }\r\n\r\n    /**\r\n     * Generates a string that can be used as a floating point number in GLSL.\r\n     * @param x Value to print.\r\n     * @param decimalFigures Number of decimal places to print the number to (excluding trailing 0s).\r\n     * @returns GLSL float string.\r\n     */\r\n    protected _glslFloat(x: number, decimalFigures = 8) {\r\n        return x.toFixed(decimalFigures).replace(/0+$/, \"\");\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public static _Parse(parsedPostProcess: any, targetCamera: Camera, scene: Scene, rootUrl: string): Nullable<BlurPostProcess> {\r\n        return SerializationHelper.Parse(\r\n            () => {\r\n                return new BlurPostProcess(\r\n                    parsedPostProcess.name,\r\n                    parsedPostProcess.direction,\r\n                    parsedPostProcess.kernel,\r\n                    parsedPostProcess.options,\r\n                    targetCamera,\r\n                    parsedPostProcess.renderTargetSamplingMode,\r\n                    scene.getEngine(),\r\n                    parsedPostProcess.reusable,\r\n                    parsedPostProcess.textureType,\r\n                    undefined,\r\n                    false\r\n                );\r\n            },\r\n            parsedPostProcess,\r\n            scene,\r\n            rootUrl\r\n        );\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.BlurPostProcess\", BlurPostProcess);\r\n", "// Do not edit.\nimport { ShaderStore } from \"../../Engines/shaderStore\";\n\nconst name = \"bayerDitherFunctions\";\nconst shader = `float bayerDither2(vec2 _P) {return mod(2.0*_P.y+_P.x+1.0,4.0);}\nfloat bayerDither4(vec2 _P) {vec2 P1=mod(_P,2.0); \nvec2 P2=floor(0.5*mod(_P,4.0)); \nreturn 4.0*bayerDither2(P1)+bayerDither2(P2);}\nfloat bayerDither8(vec2 _P) {vec2 P1=mod(_P,2.0); \nvec2 P2=floor(0.5 *mod(_P,4.0)); \nvec2 P4=floor(0.25*mod(_P,8.0)); \nreturn 4.0*(4.0*bayerDither2(P1)+bayerDither2(P2))+bayerDither2(P4);}\n`;\n// Sideeffect\nShaderStore.IncludesShadersStore[name] = shader;\n/** @internal */\nexport const bayerDitherFunctions = { name, shader };\n", "// Do not edit.\nimport { ShaderStore } from \"../../Engines/shaderStore\";\nimport \"./packingFunctions\";\nimport \"./bayerDitherFunctions\";\n\nconst name = \"shadowMapFragmentExtraDeclaration\";\nconst shader = `#if SM_FLOAT==0\n#include<packingFunctions>\n#endif\n#if SM_SOFTTRANSPARENTSHADOW==1\n#include<bayerDitherFunctions>\nuniform float softTransparentShadowSM;\n#endif\nvarying float vDepthMetricSM;\n#if SM_USEDISTANCE==1\nuniform vec3 lightDataSM;varying vec3 vPositionWSM;\n#endif\nuniform vec3 biasAndScaleSM;uniform vec2 depthValuesSM;\n#if defined(SM_DEPTHCLAMP) && SM_DEPTHCLAMP==1\nvarying float zSM;\n#endif\n`;\n// Sideeffect\nShaderStore.IncludesShadersStore[name] = shader;\n/** @internal */\nexport const shadowMapFragmentExtraDeclaration = { name, shader };\n", "// Do not edit.\nimport { ShaderStore } from \"../../Engines/shaderStore\";\n\nconst name = \"shadowMapFragment\";\nconst shader = `float depthSM=vDepthMetricSM;\n#if defined(SM_DEPTHCLAMP) && SM_DEPTHCLAMP==1\n#if SM_USEDISTANCE==1\ndepthSM=(length(vPositionWSM-lightDataSM)+depthValuesSM.x)/depthValuesSM.y+biasAndScaleSM.x;\n#else\n#ifdef USE_REVERSE_DEPTHBUFFER\ndepthSM=(-zSM+depthValuesSM.x)/depthValuesSM.y+biasAndScaleSM.x;\n#else\ndepthSM=(zSM+depthValuesSM.x)/depthValuesSM.y+biasAndScaleSM.x;\n#endif\n#endif\n#ifdef USE_REVERSE_DEPTHBUFFER\ngl_FragDepth=clamp(1.0-depthSM,0.0,1.0);\n#else\ngl_FragDepth=clamp(depthSM,0.0,1.0); \n#endif\n#elif SM_USEDISTANCE==1\ndepthSM=(length(vPositionWSM-lightDataSM)+depthValuesSM.x)/depthValuesSM.y+biasAndScaleSM.x;\n#endif\n#if SM_ESM==1\ndepthSM=clamp(exp(-min(87.,biasAndScaleSM.z*depthSM)),0.,1.);\n#endif\n#if SM_FLOAT==1\ngl_FragColor=vec4(depthSM,1.0,1.0,1.0);\n#else\ngl_FragColor=pack(depthSM);\n#endif\nreturn;`;\n// Sideeffect\nShaderStore.IncludesShadersStore[name] = shader;\n/** @internal */\nexport const shadowMapFragment = { name, shader };\n", "// Do not edit.\nimport { ShaderStore } from \"../Engines/shaderStore\";\nimport \"./ShadersInclude/shadowMapFragmentExtraDeclaration\";\nimport \"./ShadersInclude/clipPlaneFragmentDeclaration\";\nimport \"./ShadersInclude/clipPlaneFragment\";\nimport \"./ShadersInclude/shadowMapFragment\";\n\nconst name = \"shadowMapPixelShader\";\nconst shader = `#include<shadowMapFragmentExtraDeclaration>\n#ifdef ALPHATEXTURE\nvarying vec2 vUV;uniform sampler2D diffuseSampler;\n#endif\n#include<clipPlaneFragmentDeclaration>\n#define CUSTOM_FRAGMENT_DEFINITIONS\nvoid main(void)\n{\n#include<clipPlaneFragment>\n#ifdef ALPHATEXTURE\nfloat alphaFromAlphaTexture=texture2D(diffuseSampler,vUV).a;\n#ifdef ALPHATESTVALUE\nif (alphaFromAlphaTexture<ALPHATESTVALUE)\ndiscard;\n#endif\n#endif\n#if SM_SOFTTRANSPARENTSHADOW==1\n#ifdef ALPHATEXTURE\nif ((bayerDither8(floor(mod(gl_FragCoord.xy,8.0))))/64.0>=softTransparentShadowSM*alphaFromAlphaTexture) discard;\n#else\nif ((bayerDither8(floor(mod(gl_FragCoord.xy,8.0))))/64.0>=softTransparentShadowSM) discard;\n#endif\n#endif\n#include<shadowMapFragment>\n}`;\n// Sideeffect\nShaderStore.ShadersStore[name] = shader;\n/** @internal */\nexport const shadowMapPixelShader = { name, shader };\n", "// Do not edit.\nimport { ShaderStore } from \"../../Engines/shaderStore\";\n\nconst name = \"sceneVertexDeclaration\";\nconst shader = `uniform mat4 viewProjection;\n#ifdef MULTIVIEW\nuniform mat4 viewProjectionR;\n#endif\nuniform mat4 view;uniform mat4 projection;uniform vec4 vEyePosition;\n`;\n// Sideeffect\nShaderStore.IncludesShadersStore[name] = shader;\n/** @internal */\nexport const sceneVertexDeclaration = { name, shader };\n", "// Do not edit.\nimport { ShaderStore } from \"../../Engines/shaderStore\";\n\nconst name = \"meshVertexDeclaration\";\nconst shader = `uniform mat4 world;uniform float visibility;\n`;\n// Sideeffect\nShaderStore.IncludesShadersStore[name] = shader;\n/** @internal */\nexport const meshVertexDeclaration = { name, shader };\n", "// Do not edit.\nimport { ShaderStore } from \"../../Engines/shaderStore\";\nimport \"./sceneVertexDeclaration\";\nimport \"./meshVertexDeclaration\";\n\nconst name = \"shadowMapVertexDeclaration\";\nconst shader = `#include<sceneVertexDeclaration>\n#include<meshVertexDeclaration>\n`;\n// Sideeffect\nShaderStore.IncludesShadersStore[name] = shader;\n/** @internal */\nexport const shadowMapVertexDeclaration = { name, shader };\n", "// Do not edit.\nimport { ShaderStore } from \"../../Engines/shaderStore\";\nimport \"./sceneUboDeclaration\";\nimport \"./meshUboDeclaration\";\n\nconst name = \"shadowMapUboDeclaration\";\nconst shader = `layout(std140,column_major) uniform;\n#include<sceneUboDeclaration>\n#include<meshUboDeclaration>\n`;\n// Sideeffect\nShaderStore.IncludesShadersStore[name] = shader;\n/** @internal */\nexport const shadowMapUboDeclaration = { name, shader };\n", "// Do not edit.\nimport { ShaderStore } from \"../../Engines/shaderStore\";\n\nconst name = \"shadowMapVertexExtraDeclaration\";\nconst shader = `#if SM_NORMALBIAS==1\nuniform vec3 lightDataSM;\n#endif\nuniform vec3 biasAndScaleSM;uniform vec2 depthValuesSM;varying float vDepthMetricSM;\n#if SM_USEDISTANCE==1\nvarying vec3 vPositionWSM;\n#endif\n#if defined(SM_DEPTHCLAMP) && SM_DEPTHCLAMP==1\nvarying float zSM;\n#endif\n`;\n// Sideeffect\nShaderStore.IncludesShadersStore[name] = shader;\n/** @internal */\nexport const shadowMapVertexExtraDeclaration = { name, shader };\n", "// Do not edit.\nimport { ShaderStore } from \"../../Engines/shaderStore\";\n\nconst name = \"shadowMapVertexNormalBias\";\nconst shader = `#if SM_NORMALBIAS==1\n#if SM_DIRECTIONINLIGHTDATA==1\nvec3 worldLightDirSM=normalize(-lightDataSM.xyz);\n#else\nvec3 directionToLightSM=lightDataSM.xyz-worldPos.xyz;vec3 worldLightDirSM=normalize(directionToLightSM);\n#endif\nfloat ndlSM=dot(vNormalW,worldLightDirSM);float sinNLSM=sqrt(1.0-ndlSM*ndlSM);float normalBiasSM=biasAndScaleSM.y*sinNLSM;worldPos.xyz-=vNormalW*normalBiasSM;\n#endif\n`;\n// Sideeffect\nShaderStore.IncludesShadersStore[name] = shader;\n/** @internal */\nexport const shadowMapVertexNormalBias = { name, shader };\n", "// Do not edit.\nimport { ShaderStore } from \"../../Engines/shaderStore\";\n\nconst name = \"shadowMapVertexMetric\";\nconst shader = `#if SM_USEDISTANCE==1\nvPositionWSM=worldPos.xyz;\n#endif\n#if SM_DEPTHTEXTURE==1\n#ifdef IS_NDC_HALF_ZRANGE\n#define BIASFACTOR 0.5\n#else\n#define BIASFACTOR 1.0\n#endif\n#ifdef USE_REVERSE_DEPTHBUFFER\ngl_Position.z-=biasAndScaleSM.x*gl_Position.w*BIASFACTOR;\n#else\ngl_Position.z+=biasAndScaleSM.x*gl_Position.w*BIASFACTOR;\n#endif\n#endif\n#if defined(SM_DEPTHCLAMP) && SM_DEPTHCLAMP==1\nzSM=gl_Position.z;gl_Position.z=0.0;\n#elif SM_USEDISTANCE==0\n#ifdef USE_REVERSE_DEPTHBUFFER\nvDepthMetricSM=(-gl_Position.z+depthValuesSM.x)/depthValuesSM.y+biasAndScaleSM.x;\n#else\nvDepthMetricSM=(gl_Position.z+depthValuesSM.x)/depthValuesSM.y+biasAndScaleSM.x;\n#endif\n#endif\n`;\n// Sideeffect\nShaderStore.IncludesShadersStore[name] = shader;\n/** @internal */\nexport const shadowMapVertexMetric = { name, shader };\n", "// Do not edit.\nimport { ShaderStore } from \"../Engines/shaderStore\";\nimport \"./ShadersInclude/bonesDeclaration\";\nimport \"./ShadersInclude/bakedVertexAnimationDeclaration\";\nimport \"./ShadersInclude/morphTargetsVertexGlobalDeclaration\";\nimport \"./ShadersInclude/morphTargetsVertexDeclaration\";\nimport \"./ShadersInclude/helperFunctions\";\nimport \"./ShadersInclude/shadowMapVertexDeclaration\";\nimport \"./ShadersInclude/shadowMapUboDeclaration\";\nimport \"./ShadersInclude/shadowMapVertexExtraDeclaration\";\nimport \"./ShadersInclude/clipPlaneVertexDeclaration\";\nimport \"./ShadersInclude/morphTargetsVertexGlobal\";\nimport \"./ShadersInclude/morphTargetsVertex\";\nimport \"./ShadersInclude/instancesVertex\";\nimport \"./ShadersInclude/bonesVertex\";\nimport \"./ShadersInclude/bakedVertexAnimation\";\nimport \"./ShadersInclude/shadowMapVertexNormalBias\";\nimport \"./ShadersInclude/shadowMapVertexMetric\";\nimport \"./ShadersInclude/clipPlaneVertex\";\n\nconst name = \"shadowMapVertexShader\";\nconst shader = `attribute vec3 position;\n#ifdef NORMAL\nattribute vec3 normal;\n#endif\n#include<bonesDeclaration>\n#include<bakedVertexAnimationDeclaration>\n#include<morphTargetsVertexGlobalDeclaration>\n#include<morphTargetsVertexDeclaration>[0..maxSimultaneousMorphTargets]\n#ifdef INSTANCES\nattribute vec4 world0;attribute vec4 world1;attribute vec4 world2;attribute vec4 world3;\n#endif\n#include<helperFunctions>\n#include<__decl__shadowMapVertex>\n#ifdef ALPHATEXTURE\nvarying vec2 vUV;uniform mat4 diffuseMatrix;\n#ifdef UV1\nattribute vec2 uv;\n#endif\n#ifdef UV2\nattribute vec2 uv2;\n#endif\n#endif\n#include<shadowMapVertexExtraDeclaration>\n#include<clipPlaneVertexDeclaration>\n#define CUSTOM_VERTEX_DEFINITIONS\nvoid main(void)\n{vec3 positionUpdated=position;\n#ifdef UV1\nvec2 uvUpdated=uv;\n#endif\n#ifdef NORMAL\nvec3 normalUpdated=normal;\n#endif\n#include<morphTargetsVertexGlobal>\n#include<morphTargetsVertex>[0..maxSimultaneousMorphTargets]\n#include<instancesVertex>\n#include<bonesVertex>\n#include<bakedVertexAnimation>\nvec4 worldPos=finalWorld*vec4(positionUpdated,1.0);\n#ifdef NORMAL\nmat3 normWorldSM=mat3(finalWorld);\n#if defined(INSTANCES) && defined(THIN_INSTANCES)\nvec3 vNormalW=normalUpdated/vec3(dot(normWorldSM[0],normWorldSM[0]),dot(normWorldSM[1],normWorldSM[1]),dot(normWorldSM[2],normWorldSM[2]));vNormalW=normalize(normWorldSM*vNormalW);\n#else\n#ifdef NONUNIFORMSCALING\nnormWorldSM=transposeMat3(inverseMat3(normWorldSM));\n#endif\nvec3 vNormalW=normalize(normWorldSM*normalUpdated);\n#endif\n#endif\n#include<shadowMapVertexNormalBias>\ngl_Position=viewProjection*worldPos;\n#include<shadowMapVertexMetric>\n#ifdef ALPHATEXTURE\n#ifdef UV1\nvUV=vec2(diffuseMatrix*vec4(uvUpdated,1.0,0.0));\n#endif\n#ifdef UV2\nvUV=vec2(diffuseMatrix*vec4(uv2,1.0,0.0));\n#endif\n#endif\n#include<clipPlaneVertex>\n}`;\n// Sideeffect\nShaderStore.ShadersStore[name] = shader;\n/** @internal */\nexport const shadowMapVertexShader = { name, shader };\n", "// Do not edit.\nimport { ShaderStore } from \"../Engines/shaderStore\";\n\nconst name = \"depthBoxBlurPixelShader\";\nconst shader = `varying vec2 vUV;uniform sampler2D textureSampler;uniform vec2 screenSize;\n#define CUSTOM_FRAGMENT_DEFINITIONS\nvoid main(void)\n{vec4 colorDepth=vec4(0.0);for (int x=-OFFSET; x<=OFFSET; x++)\nfor (int y=-OFFSET; y<=OFFSET; y++)\ncolorDepth+=texture2D(textureSampler,vUV+vec2(x,y)/screenSize);gl_FragColor=(colorDepth/float((OFFSET*2+1)*(OFFSET*2+1)));}`;\n// Sideeffect\nShaderStore.ShadersStore[name] = shader;\n/** @internal */\nexport const depthBoxBlurPixelShader = { name, shader };\n", "// Do not edit.\nimport { ShaderStore } from \"../../Engines/shaderStore\";\n\nconst name = \"shadowMapFragmentSoftTransparentShadow\";\nconst shader = `#if SM_SOFTTRANSPARENTSHADOW==1\nif ((bayerDither8(floor(mod(gl_FragCoord.xy,8.0))))/64.0>=softTransparentShadowSM*alpha) discard;\n#endif\n`;\n// Sideeffect\nShaderStore.IncludesShadersStore[name] = shader;\n/** @internal */\nexport const shadowMapFragmentSoftTransparentShadow = { name, shader };\n", "import type { SmartArray } from \"../../Misc/smartArray\";\r\nimport type { Nullable } from \"../../types\";\r\nimport type { Scene } from \"../../scene\";\r\nimport { Matrix, Vector3, Vector2 } from \"../../Maths/math.vector\";\r\nimport { Color4 } from \"../../Maths/math.color\";\r\nimport { VertexBuffer } from \"../../Buffers/buffer\";\r\nimport type { SubMesh } from \"../../Meshes/subMesh\";\r\nimport type { AbstractMesh } from \"../../Meshes/abstractMesh\";\r\nimport type { Mesh } from \"../../Meshes/mesh\";\r\n\r\nimport type { IShadowLight } from \"../../Lights/shadowLight\";\r\nimport { Light } from \"../../Lights/light\";\r\nimport type { MaterialDefines } from \"../../Materials/materialDefines\";\r\nimport { MaterialHelper } from \"../../Materials/materialHelper\";\r\nimport type { Effect, IEffectCreationOptions } from \"../../Materials/effect\";\r\nimport { Texture } from \"../../Materials/Textures/texture\";\r\nimport { RenderTargetTexture } from \"../../Materials/Textures/renderTargetTexture\";\r\n\r\nimport { PostProcess } from \"../../PostProcesses/postProcess\";\r\nimport { BlurPostProcess } from \"../../PostProcesses/blurPostProcess\";\r\nimport { Constants } from \"../../Engines/constants\";\r\nimport { Observable } from \"../../Misc/observable\";\r\nimport { _WarnImport } from \"../../Misc/devTools\";\r\nimport { EffectFallbacks } from \"../../Materials/effectFallbacks\";\r\nimport { RenderingManager } from \"../../Rendering/renderingManager\";\r\nimport { DrawWrapper } from \"../../Materials/drawWrapper\";\r\nimport type { UniformBuffer } from \"../../Materials/uniformBuffer\";\r\nimport type { Camera } from \"../../Cameras/camera\";\r\n\r\nimport \"../../Shaders/shadowMap.fragment\";\r\nimport \"../../Shaders/shadowMap.vertex\";\r\nimport \"../../Shaders/depthBoxBlur.fragment\";\r\nimport \"../../Shaders/ShadersInclude/shadowMapFragmentSoftTransparentShadow\";\r\nimport { addClipPlaneUniforms, bindClipPlane, prepareStringDefinesForClipPlanes } from \"../../Materials/clipPlaneMaterialHelper\";\r\nimport type { BaseTexture } from \"../../Materials/Textures/baseTexture\";\r\n\r\n/**\r\n * Defines the options associated with the creation of a custom shader for a shadow generator.\r\n */\r\nexport interface ICustomShaderOptions {\r\n    /**\r\n     * Gets or sets the custom shader name to use\r\n     */\r\n    shaderName: string;\r\n\r\n    /**\r\n     * The list of attribute names used in the shader\r\n     */\r\n    attributes?: string[];\r\n\r\n    /**\r\n     * The list of uniform names used in the shader\r\n     */\r\n    uniforms?: string[];\r\n\r\n    /**\r\n     * The list of sampler names used in the shader\r\n     */\r\n    samplers?: string[];\r\n\r\n    /**\r\n     * The list of defines used in the shader\r\n     */\r\n    defines?: string[];\r\n}\r\n\r\n/**\r\n * Interface to implement to create a shadow generator compatible with BJS.\r\n */\r\nexport interface IShadowGenerator {\r\n    /** Gets or set the id of the shadow generator. It will be the one from the light if not defined */\r\n    id: string;\r\n    /**\r\n     * Gets the main RTT containing the shadow map (usually storing depth from the light point of view).\r\n     * @returns The render target texture if present otherwise, null\r\n     */\r\n    getShadowMap(): Nullable<RenderTargetTexture>;\r\n\r\n    /**\r\n     * Determine whether the shadow generator is ready or not (mainly all effects and related post processes needs to be ready).\r\n     * @param subMesh The submesh we want to render in the shadow map\r\n     * @param useInstances Defines whether will draw in the map using instances\r\n     * @param isTransparent Indicates that isReady is called for a transparent subMesh\r\n     * @returns true if ready otherwise, false\r\n     */\r\n    isReady(subMesh: SubMesh, useInstances: boolean, isTransparent: boolean): boolean;\r\n\r\n    /**\r\n     * Prepare all the defines in a material relying on a shadow map at the specified light index.\r\n     * @param defines Defines of the material we want to update\r\n     * @param lightIndex Index of the light in the enabled light list of the material\r\n     */\r\n    prepareDefines(defines: MaterialDefines, lightIndex: number): void;\r\n    /**\r\n     * Binds the shadow related information inside of an effect (information like near, far, darkness...\r\n     * defined in the generator but impacting the effect).\r\n     * It implies the uniforms available on the materials are the standard BJS ones.\r\n     * @param lightIndex Index of the light in the enabled light list of the material owning the effect\r\n     * @param effect The effect we are binding the information for\r\n     */\r\n    bindShadowLight(lightIndex: string, effect: Effect): void;\r\n    /**\r\n     * Gets the transformation matrix used to project the meshes into the map from the light point of view.\r\n     * (eq to shadow projection matrix * light transform matrix)\r\n     * @returns The transform matrix used to create the shadow map\r\n     */\r\n    getTransformMatrix(): Matrix;\r\n\r\n    /**\r\n     * Recreates the shadow map dependencies like RTT and post processes. This can be used during the switch between\r\n     * Cube and 2D textures for instance.\r\n     */\r\n    recreateShadowMap(): void;\r\n\r\n    /**\r\n     * Forces all the attached effect to compile to enable rendering only once ready vs. lazily compiling effects.\r\n     * @param onCompiled Callback triggered at the and of the effects compilation\r\n     * @param options Sets of optional options forcing the compilation with different modes\r\n     */\r\n    forceCompilation(onCompiled?: (generator: IShadowGenerator) => void, options?: Partial<{ useInstances: boolean }>): void;\r\n\r\n    /**\r\n     * Forces all the attached effect to compile to enable rendering only once ready vs. lazily compiling effects.\r\n     * @param options Sets of optional options forcing the compilation with different modes\r\n     * @returns A promise that resolves when the compilation completes\r\n     */\r\n    forceCompilationAsync(options?: Partial<{ useInstances: boolean }>): Promise<void>;\r\n\r\n    /**\r\n     * Serializes the shadow generator setup to a json object.\r\n     * @returns The serialized JSON object\r\n     */\r\n    serialize(): any;\r\n\r\n    /**\r\n     * Disposes the Shadow map and related Textures and effects.\r\n     */\r\n    dispose(): void;\r\n}\r\n\r\n/**\r\n * Default implementation IShadowGenerator.\r\n * This is the main object responsible of generating shadows in the framework.\r\n * Documentation: https://doc.babylonjs.com/features/featuresDeepDive/lights/shadows\r\n */\r\nexport class ShadowGenerator implements IShadowGenerator {\r\n    /**\r\n     * Name of the shadow generator class\r\n     */\r\n    public static CLASSNAME = \"ShadowGenerator\";\r\n\r\n    /**\r\n     * Shadow generator mode None: no filtering applied.\r\n     */\r\n    public static readonly FILTER_NONE = 0;\r\n    /**\r\n     * Shadow generator mode ESM: Exponential Shadow Mapping.\r\n     * (http://developer.download.nvidia.com/presentations/2008/GDC/GDC08_SoftShadowMapping.pdf)\r\n     */\r\n    public static readonly FILTER_EXPONENTIALSHADOWMAP = 1;\r\n    /**\r\n     * Shadow generator mode Poisson Sampling: Percentage Closer Filtering.\r\n     * (Multiple Tap around evenly distributed around the pixel are used to evaluate the shadow strength)\r\n     */\r\n    public static readonly FILTER_POISSONSAMPLING = 2;\r\n    /**\r\n     * Shadow generator mode ESM: Blurred Exponential Shadow Mapping.\r\n     * (http://developer.download.nvidia.com/presentations/2008/GDC/GDC08_SoftShadowMapping.pdf)\r\n     */\r\n    public static readonly FILTER_BLUREXPONENTIALSHADOWMAP = 3;\r\n    /**\r\n     * Shadow generator mode ESM: Exponential Shadow Mapping using the inverse of the exponential preventing\r\n     * edge artifacts on steep falloff.\r\n     * (http://developer.download.nvidia.com/presentations/2008/GDC/GDC08_SoftShadowMapping.pdf)\r\n     */\r\n    public static readonly FILTER_CLOSEEXPONENTIALSHADOWMAP = 4;\r\n    /**\r\n     * Shadow generator mode ESM: Blurred Exponential Shadow Mapping using the inverse of the exponential preventing\r\n     * edge artifacts on steep falloff.\r\n     * (http://developer.download.nvidia.com/presentations/2008/GDC/GDC08_SoftShadowMapping.pdf)\r\n     */\r\n    public static readonly FILTER_BLURCLOSEEXPONENTIALSHADOWMAP = 5;\r\n    /**\r\n     * Shadow generator mode PCF: Percentage Closer Filtering\r\n     * benefits from Webgl 2 shadow samplers. Fallback to Poisson Sampling in Webgl 1\r\n     * (https://developer.nvidia.com/gpugems/GPUGems/gpugems_ch11.html)\r\n     */\r\n    public static readonly FILTER_PCF = 6;\r\n    /**\r\n     * Shadow generator mode PCSS: Percentage Closering Soft Shadow.\r\n     * benefits from Webgl 2 shadow samplers. Fallback to Poisson Sampling in Webgl 1\r\n     * Contact Hardening\r\n     */\r\n    public static readonly FILTER_PCSS = 7;\r\n\r\n    /**\r\n     * Reserved for PCF and PCSS\r\n     * Highest Quality.\r\n     *\r\n     * Execute PCF on a 5*5 kernel improving a lot the shadow aliasing artifacts.\r\n     *\r\n     * Execute PCSS with 32 taps blocker search and 64 taps PCF.\r\n     */\r\n    public static readonly QUALITY_HIGH = 0;\r\n    /**\r\n     * Reserved for PCF and PCSS\r\n     * Good tradeoff for quality/perf cross devices\r\n     *\r\n     * Execute PCF on a 3*3 kernel.\r\n     *\r\n     * Execute PCSS with 16 taps blocker search and 32 taps PCF.\r\n     */\r\n    public static readonly QUALITY_MEDIUM = 1;\r\n    /**\r\n     * Reserved for PCF and PCSS\r\n     * The lowest quality but the fastest.\r\n     *\r\n     * Execute PCF on a 1*1 kernel.\r\n     *\r\n     * Execute PCSS with 16 taps blocker search and 16 taps PCF.\r\n     */\r\n    public static readonly QUALITY_LOW = 2;\r\n\r\n    /**\r\n     * Defines the default alpha cutoff value used for transparent alpha tested materials.\r\n     */\r\n    public static DEFAULT_ALPHA_CUTOFF = 0.5;\r\n\r\n    /** Gets or set the id of the shadow generator. It will be the one from the light if not defined */\r\n    public id: string;\r\n\r\n    /** Gets or sets the custom shader name to use */\r\n    public customShaderOptions: ICustomShaderOptions;\r\n\r\n    /** Gets or sets a custom function to allow/disallow rendering a sub mesh in the shadow map */\r\n    public customAllowRendering: (subMesh: SubMesh) => boolean;\r\n\r\n    /**\r\n     * Observable triggered before the shadow is rendered. Can be used to update internal effect state\r\n     */\r\n    public onBeforeShadowMapRenderObservable = new Observable<Effect>();\r\n\r\n    /**\r\n     * Observable triggered after the shadow is rendered. Can be used to restore internal effect state\r\n     */\r\n    public onAfterShadowMapRenderObservable = new Observable<Effect>();\r\n\r\n    /**\r\n     * Observable triggered before a mesh is rendered in the shadow map.\r\n     * Can be used to update internal effect state (that you can get from the onBeforeShadowMapRenderObservable)\r\n     */\r\n    public onBeforeShadowMapRenderMeshObservable = new Observable<Mesh>();\r\n\r\n    /**\r\n     * Observable triggered after a mesh is rendered in the shadow map.\r\n     * Can be used to update internal effect state (that you can get from the onAfterShadowMapRenderObservable)\r\n     */\r\n    public onAfterShadowMapRenderMeshObservable = new Observable<Mesh>();\r\n\r\n    protected _bias = 0.00005;\r\n    /**\r\n     * Gets the bias: offset applied on the depth preventing acnea (in light direction).\r\n     */\r\n    public get bias(): number {\r\n        return this._bias;\r\n    }\r\n    /**\r\n     * Sets the bias: offset applied on the depth preventing acnea (in light direction).\r\n     */\r\n    public set bias(bias: number) {\r\n        this._bias = bias;\r\n    }\r\n\r\n    protected _normalBias = 0;\r\n    /**\r\n     * Gets the normalBias: offset applied on the depth preventing acnea (along side the normal direction and proportional to the light/normal angle).\r\n     */\r\n    public get normalBias(): number {\r\n        return this._normalBias;\r\n    }\r\n    /**\r\n     * Sets the normalBias: offset applied on the depth preventing acnea (along side the normal direction and proportional to the light/normal angle).\r\n     */\r\n    public set normalBias(normalBias: number) {\r\n        this._normalBias = normalBias;\r\n    }\r\n\r\n    protected _blurBoxOffset = 1;\r\n    /**\r\n     * Gets the blur box offset: offset applied during the blur pass.\r\n     * Only useful if useKernelBlur = false\r\n     */\r\n    public get blurBoxOffset(): number {\r\n        return this._blurBoxOffset;\r\n    }\r\n    /**\r\n     * Sets the blur box offset: offset applied during the blur pass.\r\n     * Only useful if useKernelBlur = false\r\n     */\r\n    public set blurBoxOffset(value: number) {\r\n        if (this._blurBoxOffset === value) {\r\n            return;\r\n        }\r\n\r\n        this._blurBoxOffset = value;\r\n        this._disposeBlurPostProcesses();\r\n    }\r\n\r\n    protected _blurScale = 2;\r\n    /**\r\n     * Gets the blur scale: scale of the blurred texture compared to the main shadow map.\r\n     * 2 means half of the size.\r\n     */\r\n    public get blurScale(): number {\r\n        return this._blurScale;\r\n    }\r\n    /**\r\n     * Sets the blur scale: scale of the blurred texture compared to the main shadow map.\r\n     * 2 means half of the size.\r\n     */\r\n    public set blurScale(value: number) {\r\n        if (this._blurScale === value) {\r\n            return;\r\n        }\r\n\r\n        this._blurScale = value;\r\n        this._disposeBlurPostProcesses();\r\n    }\r\n\r\n    protected _blurKernel = 1;\r\n    /**\r\n     * Gets the blur kernel: kernel size of the blur pass.\r\n     * Only useful if useKernelBlur = true\r\n     */\r\n    public get blurKernel(): number {\r\n        return this._blurKernel;\r\n    }\r\n    /**\r\n     * Sets the blur kernel: kernel size of the blur pass.\r\n     * Only useful if useKernelBlur = true\r\n     */\r\n    public set blurKernel(value: number) {\r\n        if (this._blurKernel === value) {\r\n            return;\r\n        }\r\n\r\n        this._blurKernel = value;\r\n        this._disposeBlurPostProcesses();\r\n    }\r\n\r\n    protected _useKernelBlur = false;\r\n    /**\r\n     * Gets whether the blur pass is a kernel blur (if true) or box blur.\r\n     * Only useful in filtered mode (useBlurExponentialShadowMap...)\r\n     */\r\n    public get useKernelBlur(): boolean {\r\n        return this._useKernelBlur;\r\n    }\r\n    /**\r\n     * Sets whether the blur pass is a kernel blur (if true) or box blur.\r\n     * Only useful in filtered mode (useBlurExponentialShadowMap...)\r\n     */\r\n    public set useKernelBlur(value: boolean) {\r\n        if (this._useKernelBlur === value) {\r\n            return;\r\n        }\r\n\r\n        this._useKernelBlur = value;\r\n        this._disposeBlurPostProcesses();\r\n    }\r\n\r\n    protected _depthScale: number;\r\n    /**\r\n     * Gets the depth scale used in ESM mode.\r\n     */\r\n    public get depthScale(): number {\r\n        return this._depthScale !== undefined ? this._depthScale : this._light.getDepthScale();\r\n    }\r\n    /**\r\n     * Sets the depth scale used in ESM mode.\r\n     * This can override the scale stored on the light.\r\n     */\r\n    public set depthScale(value: number) {\r\n        this._depthScale = value;\r\n    }\r\n\r\n    protected _validateFilter(filter: number): number {\r\n        return filter;\r\n    }\r\n\r\n    protected _filter = ShadowGenerator.FILTER_NONE;\r\n    /**\r\n     * Gets the current mode of the shadow generator (normal, PCF, ESM...).\r\n     * The returned value is a number equal to one of the available mode defined in ShadowMap.FILTER_x like _FILTER_NONE\r\n     */\r\n    public get filter(): number {\r\n        return this._filter;\r\n    }\r\n    /**\r\n     * Sets the current mode of the shadow generator (normal, PCF, ESM...).\r\n     * The returned value is a number equal to one of the available mode defined in ShadowMap.FILTER_x like _FILTER_NONE\r\n     */\r\n    public set filter(value: number) {\r\n        value = this._validateFilter(value);\r\n\r\n        // Blurring the cubemap is going to be too expensive. Reverting to unblurred version\r\n        if (this._light.needCube()) {\r\n            if (value === ShadowGenerator.FILTER_BLUREXPONENTIALSHADOWMAP) {\r\n                this.useExponentialShadowMap = true;\r\n                return;\r\n            } else if (value === ShadowGenerator.FILTER_BLURCLOSEEXPONENTIALSHADOWMAP) {\r\n                this.useCloseExponentialShadowMap = true;\r\n                return;\r\n            }\r\n            // PCF on cubemap would also be expensive\r\n            else if (value === ShadowGenerator.FILTER_PCF || value === ShadowGenerator.FILTER_PCSS) {\r\n                this.usePoissonSampling = true;\r\n                return;\r\n            }\r\n        }\r\n\r\n        // Weblg1 fallback for PCF.\r\n        if (value === ShadowGenerator.FILTER_PCF || value === ShadowGenerator.FILTER_PCSS) {\r\n            if (!this._scene.getEngine()._features.supportShadowSamplers) {\r\n                this.usePoissonSampling = true;\r\n                return;\r\n            }\r\n        }\r\n\r\n        if (this._filter === value) {\r\n            return;\r\n        }\r\n\r\n        this._filter = value;\r\n        this._disposeBlurPostProcesses();\r\n        this._applyFilterValues();\r\n        this._light._markMeshesAsLightDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets if the current filter is set to Poisson Sampling.\r\n     */\r\n    public get usePoissonSampling(): boolean {\r\n        return this.filter === ShadowGenerator.FILTER_POISSONSAMPLING;\r\n    }\r\n    /**\r\n     * Sets the current filter to Poisson Sampling.\r\n     */\r\n    public set usePoissonSampling(value: boolean) {\r\n        const filter = this._validateFilter(ShadowGenerator.FILTER_POISSONSAMPLING);\r\n\r\n        if (!value && this.filter !== ShadowGenerator.FILTER_POISSONSAMPLING) {\r\n            return;\r\n        }\r\n\r\n        this.filter = value ? filter : ShadowGenerator.FILTER_NONE;\r\n    }\r\n\r\n    /**\r\n     * Gets if the current filter is set to ESM.\r\n     */\r\n    public get useExponentialShadowMap(): boolean {\r\n        return this.filter === ShadowGenerator.FILTER_EXPONENTIALSHADOWMAP;\r\n    }\r\n    /**\r\n     * Sets the current filter is to ESM.\r\n     */\r\n    public set useExponentialShadowMap(value: boolean) {\r\n        const filter = this._validateFilter(ShadowGenerator.FILTER_EXPONENTIALSHADOWMAP);\r\n\r\n        if (!value && this.filter !== ShadowGenerator.FILTER_EXPONENTIALSHADOWMAP) {\r\n            return;\r\n        }\r\n        this.filter = value ? filter : ShadowGenerator.FILTER_NONE;\r\n    }\r\n\r\n    /**\r\n     * Gets if the current filter is set to filtered ESM.\r\n     */\r\n    public get useBlurExponentialShadowMap(): boolean {\r\n        return this.filter === ShadowGenerator.FILTER_BLUREXPONENTIALSHADOWMAP;\r\n    }\r\n    /**\r\n     * Gets if the current filter is set to filtered  ESM.\r\n     */\r\n    public set useBlurExponentialShadowMap(value: boolean) {\r\n        const filter = this._validateFilter(ShadowGenerator.FILTER_BLUREXPONENTIALSHADOWMAP);\r\n\r\n        if (!value && this.filter !== ShadowGenerator.FILTER_BLUREXPONENTIALSHADOWMAP) {\r\n            return;\r\n        }\r\n        this.filter = value ? filter : ShadowGenerator.FILTER_NONE;\r\n    }\r\n\r\n    /**\r\n     * Gets if the current filter is set to \"close ESM\" (using the inverse of the\r\n     * exponential to prevent steep falloff artifacts).\r\n     */\r\n    public get useCloseExponentialShadowMap(): boolean {\r\n        return this.filter === ShadowGenerator.FILTER_CLOSEEXPONENTIALSHADOWMAP;\r\n    }\r\n    /**\r\n     * Sets the current filter to \"close ESM\" (using the inverse of the\r\n     * exponential to prevent steep falloff artifacts).\r\n     */\r\n    public set useCloseExponentialShadowMap(value: boolean) {\r\n        const filter = this._validateFilter(ShadowGenerator.FILTER_CLOSEEXPONENTIALSHADOWMAP);\r\n\r\n        if (!value && this.filter !== ShadowGenerator.FILTER_CLOSEEXPONENTIALSHADOWMAP) {\r\n            return;\r\n        }\r\n        this.filter = value ? filter : ShadowGenerator.FILTER_NONE;\r\n    }\r\n\r\n    /**\r\n     * Gets if the current filter is set to filtered \"close ESM\" (using the inverse of the\r\n     * exponential to prevent steep falloff artifacts).\r\n     */\r\n    public get useBlurCloseExponentialShadowMap(): boolean {\r\n        return this.filter === ShadowGenerator.FILTER_BLURCLOSEEXPONENTIALSHADOWMAP;\r\n    }\r\n    /**\r\n     * Sets the current filter to filtered \"close ESM\" (using the inverse of the\r\n     * exponential to prevent steep falloff artifacts).\r\n     */\r\n    public set useBlurCloseExponentialShadowMap(value: boolean) {\r\n        const filter = this._validateFilter(ShadowGenerator.FILTER_BLURCLOSEEXPONENTIALSHADOWMAP);\r\n\r\n        if (!value && this.filter !== ShadowGenerator.FILTER_BLURCLOSEEXPONENTIALSHADOWMAP) {\r\n            return;\r\n        }\r\n        this.filter = value ? filter : ShadowGenerator.FILTER_NONE;\r\n    }\r\n\r\n    /**\r\n     * Gets if the current filter is set to \"PCF\" (percentage closer filtering).\r\n     */\r\n    public get usePercentageCloserFiltering(): boolean {\r\n        return this.filter === ShadowGenerator.FILTER_PCF;\r\n    }\r\n    /**\r\n     * Sets the current filter to \"PCF\" (percentage closer filtering).\r\n     */\r\n    public set usePercentageCloserFiltering(value: boolean) {\r\n        const filter = this._validateFilter(ShadowGenerator.FILTER_PCF);\r\n\r\n        if (!value && this.filter !== ShadowGenerator.FILTER_PCF) {\r\n            return;\r\n        }\r\n        this.filter = value ? filter : ShadowGenerator.FILTER_NONE;\r\n    }\r\n\r\n    protected _filteringQuality = ShadowGenerator.QUALITY_HIGH;\r\n    /**\r\n     * Gets the PCF or PCSS Quality.\r\n     * Only valid if usePercentageCloserFiltering or usePercentageCloserFiltering is true.\r\n     */\r\n    public get filteringQuality(): number {\r\n        return this._filteringQuality;\r\n    }\r\n    /**\r\n     * Sets the PCF or PCSS Quality.\r\n     * Only valid if usePercentageCloserFiltering or usePercentageCloserFiltering is true.\r\n     */\r\n    public set filteringQuality(filteringQuality: number) {\r\n        if (this._filteringQuality === filteringQuality) {\r\n            return;\r\n        }\r\n\r\n        this._filteringQuality = filteringQuality;\r\n\r\n        this._disposeBlurPostProcesses();\r\n        this._applyFilterValues();\r\n        this._light._markMeshesAsLightDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets if the current filter is set to \"PCSS\" (contact hardening).\r\n     */\r\n    public get useContactHardeningShadow(): boolean {\r\n        return this.filter === ShadowGenerator.FILTER_PCSS;\r\n    }\r\n    /**\r\n     * Sets the current filter to \"PCSS\" (contact hardening).\r\n     */\r\n    public set useContactHardeningShadow(value: boolean) {\r\n        const filter = this._validateFilter(ShadowGenerator.FILTER_PCSS);\r\n\r\n        if (!value && this.filter !== ShadowGenerator.FILTER_PCSS) {\r\n            return;\r\n        }\r\n        this.filter = value ? filter : ShadowGenerator.FILTER_NONE;\r\n    }\r\n\r\n    protected _contactHardeningLightSizeUVRatio = 0.1;\r\n    /**\r\n     * Gets the Light Size (in shadow map uv unit) used in PCSS to determine the blocker search area and the penumbra size.\r\n     * Using a ratio helps keeping shape stability independently of the map size.\r\n     *\r\n     * It does not account for the light projection as it was having too much\r\n     * instability during the light setup or during light position changes.\r\n     *\r\n     * Only valid if useContactHardeningShadow is true.\r\n     */\r\n    public get contactHardeningLightSizeUVRatio(): number {\r\n        return this._contactHardeningLightSizeUVRatio;\r\n    }\r\n    /**\r\n     * Sets the Light Size (in shadow map uv unit) used in PCSS to determine the blocker search area and the penumbra size.\r\n     * Using a ratio helps keeping shape stability independently of the map size.\r\n     *\r\n     * It does not account for the light projection as it was having too much\r\n     * instability during the light setup or during light position changes.\r\n     *\r\n     * Only valid if useContactHardeningShadow is true.\r\n     */\r\n    public set contactHardeningLightSizeUVRatio(contactHardeningLightSizeUVRatio: number) {\r\n        this._contactHardeningLightSizeUVRatio = contactHardeningLightSizeUVRatio;\r\n    }\r\n\r\n    protected _darkness = 0;\r\n\r\n    /** Gets or sets the actual darkness of a shadow */\r\n    public get darkness() {\r\n        return this._darkness;\r\n    }\r\n\r\n    public set darkness(value: number) {\r\n        this.setDarkness(value);\r\n    }\r\n\r\n    /**\r\n     * Returns the darkness value (float). This can only decrease the actual darkness of a shadow.\r\n     * 0 means strongest and 1 would means no shadow.\r\n     * @returns the darkness.\r\n     */\r\n    public getDarkness(): number {\r\n        return this._darkness;\r\n    }\r\n    /**\r\n     * Sets the darkness value (float). This can only decrease the actual darkness of a shadow.\r\n     * @param darkness The darkness value 0 means strongest and 1 would means no shadow.\r\n     * @returns the shadow generator allowing fluent coding.\r\n     */\r\n    public setDarkness(darkness: number): ShadowGenerator {\r\n        if (darkness >= 1.0) {\r\n            this._darkness = 1.0;\r\n        } else if (darkness <= 0.0) {\r\n            this._darkness = 0.0;\r\n        } else {\r\n            this._darkness = darkness;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    protected _transparencyShadow = false;\r\n\r\n    /** Gets or sets the ability to have transparent shadow  */\r\n    public get transparencyShadow() {\r\n        return this._transparencyShadow;\r\n    }\r\n\r\n    public set transparencyShadow(value: boolean) {\r\n        this.setTransparencyShadow(value);\r\n    }\r\n\r\n    /**\r\n     * Sets the ability to have transparent shadow (boolean).\r\n     * @param transparent True if transparent else False\r\n     * @returns the shadow generator allowing fluent coding\r\n     */\r\n    public setTransparencyShadow(transparent: boolean): ShadowGenerator {\r\n        this._transparencyShadow = transparent;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Enables or disables shadows with varying strength based on the transparency\r\n     * When it is enabled, the strength of the shadow is taken equal to mesh.visibility\r\n     * If you enabled an alpha texture on your material, the alpha value red from the texture is also combined to compute the strength:\r\n     *          mesh.visibility * alphaTexture.a\r\n     * The texture used is the diffuse by default, but it can be set to the opacity by setting useOpacityTextureForTransparentShadow\r\n     * Note that by definition transparencyShadow must be set to true for enableSoftTransparentShadow to work!\r\n     */\r\n    public enableSoftTransparentShadow: boolean = false;\r\n\r\n    /**\r\n     * If this is true, use the opacity texture's alpha channel for transparent shadows instead of the diffuse one\r\n     */\r\n    public useOpacityTextureForTransparentShadow: boolean = false;\r\n\r\n    protected _shadowMap: Nullable<RenderTargetTexture>;\r\n    protected _shadowMap2: Nullable<RenderTargetTexture>;\r\n\r\n    /**\r\n     * Gets the main RTT containing the shadow map (usually storing depth from the light point of view).\r\n     * @returns The render target texture if present otherwise, null\r\n     */\r\n    public getShadowMap(): Nullable<RenderTargetTexture> {\r\n        return this._shadowMap;\r\n    }\r\n\r\n    /**\r\n     * Gets the RTT used during rendering (can be a blurred version of the shadow map or the shadow map itself).\r\n     * @returns The render target texture if the shadow map is present otherwise, null\r\n     */\r\n    public getShadowMapForRendering(): Nullable<RenderTargetTexture> {\r\n        if (this._shadowMap2) {\r\n            return this._shadowMap2;\r\n        }\r\n\r\n        return this._shadowMap;\r\n    }\r\n\r\n    /**\r\n     * Gets the class name of that object\r\n     * @returns \"ShadowGenerator\"\r\n     */\r\n    public getClassName(): string {\r\n        return ShadowGenerator.CLASSNAME;\r\n    }\r\n\r\n    /**\r\n     * Helper function to add a mesh and its descendants to the list of shadow casters.\r\n     * @param mesh Mesh to add\r\n     * @param includeDescendants boolean indicating if the descendants should be added. Default to true\r\n     * @returns the Shadow Generator itself\r\n     */\r\n    public addShadowCaster(mesh: AbstractMesh, includeDescendants = true): ShadowGenerator {\r\n        if (!this._shadowMap) {\r\n            return this;\r\n        }\r\n\r\n        if (!this._shadowMap.renderList) {\r\n            this._shadowMap.renderList = [];\r\n        }\r\n\r\n        if (this._shadowMap.renderList.indexOf(mesh) === -1) {\r\n            this._shadowMap.renderList.push(mesh);\r\n        }\r\n\r\n        if (includeDescendants) {\r\n            for (const childMesh of mesh.getChildMeshes()) {\r\n                if (this._shadowMap.renderList.indexOf(childMesh) === -1) {\r\n                    this._shadowMap.renderList.push(childMesh);\r\n                }\r\n            }\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Helper function to remove a mesh and its descendants from the list of shadow casters\r\n     * @param mesh Mesh to remove\r\n     * @param includeDescendants boolean indicating if the descendants should be removed. Default to true\r\n     * @returns the Shadow Generator itself\r\n     */\r\n    public removeShadowCaster(mesh: AbstractMesh, includeDescendants = true): ShadowGenerator {\r\n        if (!this._shadowMap || !this._shadowMap.renderList) {\r\n            return this;\r\n        }\r\n\r\n        const index = this._shadowMap.renderList.indexOf(mesh);\r\n\r\n        if (index !== -1) {\r\n            this._shadowMap.renderList.splice(index, 1);\r\n        }\r\n\r\n        if (includeDescendants) {\r\n            for (const child of mesh.getChildren()) {\r\n                this.removeShadowCaster(<any>child);\r\n            }\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Controls the extent to which the shadows fade out at the edge of the frustum\r\n     */\r\n    public frustumEdgeFalloff = 0;\r\n\r\n    protected _light: IShadowLight;\r\n    /**\r\n     * Returns the associated light object.\r\n     * @returns the light generating the shadow\r\n     */\r\n    public getLight(): IShadowLight {\r\n        return this._light;\r\n    }\r\n\r\n    /**\r\n     * If true the shadow map is generated by rendering the back face of the mesh instead of the front face.\r\n     * This can help with self-shadowing as the geometry making up the back of objects is slightly offset.\r\n     * It might on the other hand introduce peter panning.\r\n     */\r\n    public forceBackFacesOnly = false;\r\n\r\n    protected _camera: Nullable<Camera>;\r\n\r\n    protected _getCamera() {\r\n        return this._camera ?? this._scene.activeCamera;\r\n    }\r\n\r\n    protected _scene: Scene;\r\n    protected _useRedTextureType: boolean;\r\n    protected _lightDirection = Vector3.Zero();\r\n\r\n    protected _viewMatrix = Matrix.Zero();\r\n    protected _projectionMatrix = Matrix.Zero();\r\n    protected _transformMatrix = Matrix.Zero();\r\n    protected _cachedPosition: Vector3 = new Vector3(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);\r\n    protected _cachedDirection: Vector3 = new Vector3(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);\r\n    protected _cachedDefines: string;\r\n    protected _currentRenderId: number;\r\n    protected _boxBlurPostprocess: Nullable<PostProcess>;\r\n    protected _kernelBlurXPostprocess: Nullable<PostProcess>;\r\n    protected _kernelBlurYPostprocess: Nullable<PostProcess>;\r\n    protected _blurPostProcesses: PostProcess[];\r\n    protected _mapSize: number;\r\n    protected _currentFaceIndex = 0;\r\n    protected _currentFaceIndexCache = 0;\r\n    protected _textureType: number;\r\n    protected _defaultTextureMatrix = Matrix.Identity();\r\n    protected _storedUniqueId: Nullable<number>;\r\n    protected _useUBO: boolean;\r\n    protected _sceneUBOs: UniformBuffer[];\r\n    protected _currentSceneUBO: UniformBuffer;\r\n    protected _opacityTexture: Nullable<BaseTexture>;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public static _SceneComponentInitialization: (scene: Scene) => void = (_) => {\r\n        throw _WarnImport(\"ShadowGeneratorSceneComponent\");\r\n    };\r\n\r\n    /**\r\n     * Gets or sets the size of the texture what stores the shadows\r\n     */\r\n    public get mapSize(): number {\r\n        return this._mapSize;\r\n    }\r\n\r\n    public set mapSize(size: number) {\r\n        this._mapSize = size;\r\n        this._light._markMeshesAsLightDirty();\r\n        this.recreateShadowMap();\r\n    }\r\n\r\n    /**\r\n     * Creates a ShadowGenerator object.\r\n     * A ShadowGenerator is the required tool to use the shadows.\r\n     * Each light casting shadows needs to use its own ShadowGenerator.\r\n     * Documentation : https://doc.babylonjs.com/features/featuresDeepDive/lights/shadows\r\n     * @param mapSize The size of the texture what stores the shadows. Example : 1024.\r\n     * @param light The light object generating the shadows.\r\n     * @param usefullFloatFirst By default the generator will try to use half float textures but if you need precision (for self shadowing for instance), you can use this option to enforce full float texture.\r\n     * @param camera Camera associated with this shadow generator (default: null). If null, takes the scene active camera at the time we need to access it\r\n     * @param useRedTextureType Forces the generator to use a Red instead of a RGBA type for the shadow map texture format (default: false)\r\n     */\r\n    constructor(mapSize: number, light: IShadowLight, usefullFloatFirst?: boolean, camera?: Nullable<Camera>, useRedTextureType?: boolean) {\r\n        this._mapSize = mapSize;\r\n        this._light = light;\r\n        this._scene = light.getScene();\r\n        this._camera = camera ?? null;\r\n        this._useRedTextureType = !!useRedTextureType;\r\n\r\n        let shadowGenerators = light._shadowGenerators;\r\n        if (!shadowGenerators) {\r\n            shadowGenerators = light._shadowGenerators = new Map();\r\n        }\r\n        shadowGenerators.set(this._camera, this);\r\n        this.id = light.id;\r\n        this._useUBO = this._scene.getEngine().supportsUniformBuffers;\r\n\r\n        if (this._useUBO) {\r\n            this._sceneUBOs = [];\r\n            this._sceneUBOs.push(this._scene.createSceneUniformBuffer(`Scene for Shadow Generator (light \"${this._light.name}\")`));\r\n        }\r\n\r\n        ShadowGenerator._SceneComponentInitialization(this._scene);\r\n\r\n        // Texture type fallback from float to int if not supported.\r\n        const caps = this._scene.getEngine().getCaps();\r\n\r\n        if (!usefullFloatFirst) {\r\n            if (caps.textureHalfFloatRender && caps.textureHalfFloatLinearFiltering) {\r\n                this._textureType = Constants.TEXTURETYPE_HALF_FLOAT;\r\n            } else if (caps.textureFloatRender && caps.textureFloatLinearFiltering) {\r\n                this._textureType = Constants.TEXTURETYPE_FLOAT;\r\n            } else {\r\n                this._textureType = Constants.TEXTURETYPE_UNSIGNED_INT;\r\n            }\r\n        } else {\r\n            if (caps.textureFloatRender && caps.textureFloatLinearFiltering) {\r\n                this._textureType = Constants.TEXTURETYPE_FLOAT;\r\n            } else if (caps.textureHalfFloatRender && caps.textureHalfFloatLinearFiltering) {\r\n                this._textureType = Constants.TEXTURETYPE_HALF_FLOAT;\r\n            } else {\r\n                this._textureType = Constants.TEXTURETYPE_UNSIGNED_INT;\r\n            }\r\n        }\r\n\r\n        this._initializeGenerator();\r\n        this._applyFilterValues();\r\n    }\r\n\r\n    protected _initializeGenerator(): void {\r\n        this._light._markMeshesAsLightDirty();\r\n        this._initializeShadowMap();\r\n    }\r\n\r\n    protected _createTargetRenderTexture(): void {\r\n        const engine = this._scene.getEngine();\r\n        if (engine._features.supportDepthStencilTexture) {\r\n            this._shadowMap = new RenderTargetTexture(\r\n                this._light.name + \"_shadowMap\",\r\n                this._mapSize,\r\n                this._scene,\r\n                false,\r\n                true,\r\n                this._textureType,\r\n                this._light.needCube(),\r\n                undefined,\r\n                false,\r\n                false,\r\n                undefined,\r\n                this._useRedTextureType ? Constants.TEXTUREFORMAT_RED : Constants.TEXTUREFORMAT_RGBA\r\n            );\r\n            this._shadowMap.createDepthStencilTexture(engine.useReverseDepthBuffer ? Constants.GREATER : Constants.LESS, true);\r\n        } else {\r\n            this._shadowMap = new RenderTargetTexture(this._light.name + \"_shadowMap\", this._mapSize, this._scene, false, true, this._textureType, this._light.needCube());\r\n        }\r\n        this._shadowMap.noPrePassRenderer = true;\r\n    }\r\n\r\n    protected _initializeShadowMap(): void {\r\n        this._createTargetRenderTexture();\r\n\r\n        if (this._shadowMap === null) {\r\n            return;\r\n        }\r\n\r\n        this._shadowMap.wrapU = Texture.CLAMP_ADDRESSMODE;\r\n        this._shadowMap.wrapV = Texture.CLAMP_ADDRESSMODE;\r\n        this._shadowMap.anisotropicFilteringLevel = 1;\r\n        this._shadowMap.updateSamplingMode(Texture.BILINEAR_SAMPLINGMODE);\r\n        this._shadowMap.renderParticles = false;\r\n        this._shadowMap.ignoreCameraViewport = true;\r\n        if (this._storedUniqueId) {\r\n            this._shadowMap.uniqueId = this._storedUniqueId;\r\n        }\r\n\r\n        // Custom render function.\r\n        this._shadowMap.customRenderFunction = (\r\n            opaqueSubMeshes: SmartArray<SubMesh>,\r\n            alphaTestSubMeshes: SmartArray<SubMesh>,\r\n            transparentSubMeshes: SmartArray<SubMesh>,\r\n            depthOnlySubMeshes: SmartArray<SubMesh>\r\n        ) => this._renderForShadowMap(opaqueSubMeshes, alphaTestSubMeshes, transparentSubMeshes, depthOnlySubMeshes);\r\n\r\n        // Force the mesh is ready function to true as we are double checking it\r\n        // in the custom render function. Also it prevents side effects and useless\r\n        // shader variations in DEPTHPREPASS mode.\r\n        this._shadowMap.customIsReadyFunction = () => {\r\n            return true;\r\n        };\r\n\r\n        const engine = this._scene.getEngine();\r\n\r\n        this._shadowMap.onBeforeBindObservable.add(() => {\r\n            this._currentSceneUBO = this._scene.getSceneUniformBuffer();\r\n            engine._debugPushGroup?.(`shadow map generation for pass id ${engine.currentRenderPassId}`, 1);\r\n        });\r\n\r\n        // Record Face Index before render.\r\n        this._shadowMap.onBeforeRenderObservable.add((faceIndex: number) => {\r\n            if (this._sceneUBOs) {\r\n                this._scene.setSceneUniformBuffer(this._sceneUBOs[0]);\r\n            }\r\n            this._currentFaceIndex = faceIndex;\r\n            if (this._filter === ShadowGenerator.FILTER_PCF) {\r\n                engine.setColorWrite(false);\r\n            }\r\n            this.getTransformMatrix(); // generate the view/projection matrix\r\n            this._scene.setTransformMatrix(this._viewMatrix, this._projectionMatrix);\r\n            if (this._useUBO) {\r\n                this._scene.getSceneUniformBuffer().unbindEffect();\r\n                this._scene.finalizeSceneUbo();\r\n            }\r\n        });\r\n\r\n        // Blur if required after render.\r\n        this._shadowMap.onAfterUnbindObservable.add(() => {\r\n            if (this._sceneUBOs) {\r\n                this._scene.setSceneUniformBuffer(this._currentSceneUBO);\r\n            }\r\n            this._scene.updateTransformMatrix(); // restore the view/projection matrices of the active camera\r\n\r\n            if (this._filter === ShadowGenerator.FILTER_PCF) {\r\n                engine.setColorWrite(true);\r\n            }\r\n            if (!this.useBlurExponentialShadowMap && !this.useBlurCloseExponentialShadowMap) {\r\n                engine._debugPopGroup?.(1);\r\n                return;\r\n            }\r\n            const shadowMap = this.getShadowMapForRendering();\r\n\r\n            if (shadowMap) {\r\n                this._scene.postProcessManager.directRender(this._blurPostProcesses, shadowMap.renderTarget, true);\r\n                engine.unBindFramebuffer(shadowMap.renderTarget!, true);\r\n                engine._debugPopGroup?.(1);\r\n            }\r\n        });\r\n\r\n        // Clear according to the chosen filter.\r\n        const clearZero = new Color4(0, 0, 0, 0);\r\n        const clearOne = new Color4(1.0, 1.0, 1.0, 1.0);\r\n        this._shadowMap.onClearObservable.add((engine) => {\r\n            if (this._filter === ShadowGenerator.FILTER_PCF) {\r\n                engine.clear(clearOne, false, true, false);\r\n            } else if (this.useExponentialShadowMap || this.useBlurExponentialShadowMap) {\r\n                engine.clear(clearZero, true, true, false);\r\n            } else {\r\n                engine.clear(clearOne, true, true, false);\r\n            }\r\n        });\r\n\r\n        // Recreate on resize.\r\n        this._shadowMap.onResizeObservable.add((rtt) => {\r\n            this._storedUniqueId = this._shadowMap!.uniqueId;\r\n            this._mapSize = rtt.getRenderSize();\r\n            this._light._markMeshesAsLightDirty();\r\n            this.recreateShadowMap();\r\n        });\r\n\r\n        // Ensures rendering groupids do not erase the depth buffer\r\n        // or we would lose the shadows information.\r\n        for (let i = RenderingManager.MIN_RENDERINGGROUPS; i < RenderingManager.MAX_RENDERINGGROUPS; i++) {\r\n            this._shadowMap.setRenderingAutoClearDepthStencil(i, false);\r\n        }\r\n    }\r\n\r\n    protected _initializeBlurRTTAndPostProcesses(): void {\r\n        const engine = this._scene.getEngine();\r\n        const targetSize = this._mapSize / this.blurScale;\r\n\r\n        if (!this.useKernelBlur || this.blurScale !== 1.0) {\r\n            this._shadowMap2 = new RenderTargetTexture(this._light.name + \"_shadowMap2\", targetSize, this._scene, false, true, this._textureType, undefined, undefined, false);\r\n            this._shadowMap2.wrapU = Texture.CLAMP_ADDRESSMODE;\r\n            this._shadowMap2.wrapV = Texture.CLAMP_ADDRESSMODE;\r\n            this._shadowMap2.updateSamplingMode(Texture.BILINEAR_SAMPLINGMODE);\r\n        }\r\n\r\n        if (this.useKernelBlur) {\r\n            this._kernelBlurXPostprocess = new BlurPostProcess(\r\n                this._light.name + \"KernelBlurX\",\r\n                new Vector2(1, 0),\r\n                this.blurKernel,\r\n                1.0,\r\n                null,\r\n                Texture.BILINEAR_SAMPLINGMODE,\r\n                engine,\r\n                false,\r\n                this._textureType\r\n            );\r\n            this._kernelBlurXPostprocess.width = targetSize;\r\n            this._kernelBlurXPostprocess.height = targetSize;\r\n            this._kernelBlurXPostprocess.externalTextureSamplerBinding = true;\r\n            this._kernelBlurXPostprocess.onApplyObservable.add((effect) => {\r\n                effect.setTexture(\"textureSampler\", this._shadowMap);\r\n            });\r\n\r\n            this._kernelBlurYPostprocess = new BlurPostProcess(\r\n                this._light.name + \"KernelBlurY\",\r\n                new Vector2(0, 1),\r\n                this.blurKernel,\r\n                1.0,\r\n                null,\r\n                Texture.BILINEAR_SAMPLINGMODE,\r\n                engine,\r\n                false,\r\n                this._textureType\r\n            );\r\n\r\n            this._kernelBlurXPostprocess.autoClear = false;\r\n            this._kernelBlurYPostprocess.autoClear = false;\r\n\r\n            if (this._textureType === Constants.TEXTURETYPE_UNSIGNED_INT) {\r\n                (<BlurPostProcess>this._kernelBlurXPostprocess).packedFloat = true;\r\n                (<BlurPostProcess>this._kernelBlurYPostprocess).packedFloat = true;\r\n            }\r\n\r\n            this._blurPostProcesses = [this._kernelBlurXPostprocess, this._kernelBlurYPostprocess];\r\n        } else {\r\n            this._boxBlurPostprocess = new PostProcess(\r\n                this._light.name + \"DepthBoxBlur\",\r\n                \"depthBoxBlur\",\r\n                [\"screenSize\", \"boxOffset\"],\r\n                [],\r\n                1.0,\r\n                null,\r\n                Texture.BILINEAR_SAMPLINGMODE,\r\n                engine,\r\n                false,\r\n                \"#define OFFSET \" + this._blurBoxOffset,\r\n                this._textureType\r\n            );\r\n            this._boxBlurPostprocess.externalTextureSamplerBinding = true;\r\n            this._boxBlurPostprocess.onApplyObservable.add((effect) => {\r\n                effect.setFloat2(\"screenSize\", targetSize, targetSize);\r\n                effect.setTexture(\"textureSampler\", this._shadowMap);\r\n            });\r\n\r\n            this._boxBlurPostprocess.autoClear = false;\r\n\r\n            this._blurPostProcesses = [this._boxBlurPostprocess];\r\n        }\r\n    }\r\n\r\n    protected _renderForShadowMap(\r\n        opaqueSubMeshes: SmartArray<SubMesh>,\r\n        alphaTestSubMeshes: SmartArray<SubMesh>,\r\n        transparentSubMeshes: SmartArray<SubMesh>,\r\n        depthOnlySubMeshes: SmartArray<SubMesh>\r\n    ): void {\r\n        let index: number;\r\n\r\n        if (depthOnlySubMeshes.length) {\r\n            for (index = 0; index < depthOnlySubMeshes.length; index++) {\r\n                this._renderSubMeshForShadowMap(depthOnlySubMeshes.data[index]);\r\n            }\r\n        }\r\n\r\n        for (index = 0; index < opaqueSubMeshes.length; index++) {\r\n            this._renderSubMeshForShadowMap(opaqueSubMeshes.data[index]);\r\n        }\r\n\r\n        for (index = 0; index < alphaTestSubMeshes.length; index++) {\r\n            this._renderSubMeshForShadowMap(alphaTestSubMeshes.data[index]);\r\n        }\r\n\r\n        if (this._transparencyShadow) {\r\n            for (index = 0; index < transparentSubMeshes.length; index++) {\r\n                this._renderSubMeshForShadowMap(transparentSubMeshes.data[index], true);\r\n            }\r\n        } else {\r\n            for (index = 0; index < transparentSubMeshes.length; index++) {\r\n                transparentSubMeshes.data[index].getEffectiveMesh()._internalAbstractMeshDataInfo._isActiveIntermediate = false;\r\n            }\r\n        }\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    protected _bindCustomEffectForRenderSubMeshForShadowMap(subMesh: SubMesh, effect: Effect, mesh: AbstractMesh): void {\r\n        effect.setMatrix(\"viewProjection\", this.getTransformMatrix());\r\n    }\r\n\r\n    protected _renderSubMeshForShadowMap(subMesh: SubMesh, isTransparent: boolean = false): void {\r\n        const renderingMesh = subMesh.getRenderingMesh();\r\n        const effectiveMesh = subMesh.getEffectiveMesh();\r\n        const scene = this._scene;\r\n        const engine = scene.getEngine();\r\n        const material = subMesh.getMaterial();\r\n\r\n        effectiveMesh._internalAbstractMeshDataInfo._isActiveIntermediate = false;\r\n\r\n        if (!material || subMesh.verticesCount === 0 || subMesh._renderId === scene.getRenderId()) {\r\n            return;\r\n        }\r\n\r\n        // Culling\r\n        const detNeg = effectiveMesh._getWorldMatrixDeterminant() < 0;\r\n        let sideOrientation = renderingMesh.overrideMaterialSideOrientation ?? material.sideOrientation;\r\n        if (detNeg) {\r\n            sideOrientation =\r\n                sideOrientation === Constants.MATERIAL_ClockWiseSideOrientation ? Constants.MATERIAL_CounterClockWiseSideOrientation : Constants.MATERIAL_ClockWiseSideOrientation;\r\n        }\r\n        const reverseSideOrientation = sideOrientation === Constants.MATERIAL_ClockWiseSideOrientation;\r\n\r\n        engine.setState(material.backFaceCulling, undefined, undefined, reverseSideOrientation, material.cullBackFaces);\r\n\r\n        // Managing instances\r\n        const batch = renderingMesh._getInstancesRenderList(subMesh._id, !!subMesh.getReplacementMesh());\r\n        if (batch.mustReturn) {\r\n            return;\r\n        }\r\n\r\n        const hardwareInstancedRendering =\r\n            engine.getCaps().instancedArrays &&\r\n            ((batch.visibleInstances[subMesh._id] !== null && batch.visibleInstances[subMesh._id] !== undefined) || renderingMesh.hasThinInstances);\r\n\r\n        if (this.customAllowRendering && !this.customAllowRendering(subMesh)) {\r\n            return;\r\n        }\r\n\r\n        if (this.isReady(subMesh, hardwareInstancedRendering, isTransparent)) {\r\n            subMesh._renderId = scene.getRenderId();\r\n\r\n            const shadowDepthWrapper = material.shadowDepthWrapper;\r\n\r\n            const drawWrapper = shadowDepthWrapper?.getEffect(subMesh, this, engine.currentRenderPassId) ?? subMesh._getDrawWrapper()!;\r\n            const effect = DrawWrapper.GetEffect(drawWrapper)!;\r\n\r\n            engine.enableEffect(drawWrapper);\r\n\r\n            if (!hardwareInstancedRendering) {\r\n                renderingMesh._bind(subMesh, effect, material.fillMode);\r\n            }\r\n\r\n            this.getTransformMatrix(); // make sure _cachedDirection et _cachedPosition are up to date\r\n\r\n            effect.setFloat3(\"biasAndScaleSM\", this.bias, this.normalBias, this.depthScale);\r\n\r\n            if (this.getLight().getTypeID() === Light.LIGHTTYPEID_DIRECTIONALLIGHT) {\r\n                effect.setVector3(\"lightDataSM\", this._cachedDirection);\r\n            } else {\r\n                effect.setVector3(\"lightDataSM\", this._cachedPosition);\r\n            }\r\n\r\n            const camera = this._getCamera();\r\n            if (camera) {\r\n                effect.setFloat2(\"depthValuesSM\", this.getLight().getDepthMinZ(camera), this.getLight().getDepthMinZ(camera) + this.getLight().getDepthMaxZ(camera));\r\n            }\r\n\r\n            if (isTransparent && this.enableSoftTransparentShadow) {\r\n                effect.setFloat(\"softTransparentShadowSM\", effectiveMesh.visibility * material.alpha);\r\n            }\r\n\r\n            if (shadowDepthWrapper) {\r\n                subMesh._setMainDrawWrapperOverride(drawWrapper);\r\n                if (shadowDepthWrapper.standalone) {\r\n                    shadowDepthWrapper.baseMaterial.bindForSubMesh(effectiveMesh.getWorldMatrix(), renderingMesh, subMesh);\r\n                } else {\r\n                    material.bindForSubMesh(effectiveMesh.getWorldMatrix(), renderingMesh, subMesh);\r\n                }\r\n                subMesh._setMainDrawWrapperOverride(null);\r\n            } else {\r\n                // Alpha test\r\n                if (this._opacityTexture) {\r\n                    effect.setTexture(\"diffuseSampler\", this._opacityTexture);\r\n                    effect.setMatrix(\"diffuseMatrix\", this._opacityTexture.getTextureMatrix() || this._defaultTextureMatrix);\r\n                }\r\n\r\n                // Bones\r\n                if (renderingMesh.useBones && renderingMesh.computeBonesUsingShaders && renderingMesh.skeleton) {\r\n                    const skeleton = renderingMesh.skeleton;\r\n\r\n                    if (skeleton.isUsingTextureForMatrices) {\r\n                        const boneTexture = skeleton.getTransformMatrixTexture(renderingMesh);\r\n\r\n                        if (!boneTexture) {\r\n                            return;\r\n                        }\r\n\r\n                        effect.setTexture(\"boneSampler\", boneTexture);\r\n                        effect.setFloat(\"boneTextureWidth\", 4.0 * (skeleton.bones.length + 1));\r\n                    } else {\r\n                        effect.setMatrices(\"mBones\", skeleton.getTransformMatrices(renderingMesh));\r\n                    }\r\n                }\r\n\r\n                // Morph targets\r\n                MaterialHelper.BindMorphTargetParameters(renderingMesh, effect);\r\n\r\n                if (renderingMesh.morphTargetManager && renderingMesh.morphTargetManager.isUsingTextureForTargets) {\r\n                    renderingMesh.morphTargetManager._bind(effect);\r\n                }\r\n\r\n                // Clip planes\r\n                bindClipPlane(effect, material, scene);\r\n            }\r\n\r\n            if (!this._useUBO && !shadowDepthWrapper) {\r\n                this._bindCustomEffectForRenderSubMeshForShadowMap(subMesh, effect, effectiveMesh);\r\n            }\r\n\r\n            MaterialHelper.BindSceneUniformBuffer(effect, this._scene.getSceneUniformBuffer());\r\n            this._scene.getSceneUniformBuffer().bindUniformBuffer();\r\n\r\n            const world = effectiveMesh.getWorldMatrix();\r\n\r\n            // In the non hardware instanced mode, the Mesh ubo update is done by the callback passed to renderingMesh._processRendering (see below)\r\n            if (hardwareInstancedRendering) {\r\n                effectiveMesh.getMeshUniformBuffer().bindToEffect(effect, \"Mesh\");\r\n                effectiveMesh.transferToEffect(world);\r\n            }\r\n\r\n            if (this.forceBackFacesOnly) {\r\n                engine.setState(true, 0, false, true, material.cullBackFaces);\r\n            }\r\n\r\n            // Observables\r\n            this.onBeforeShadowMapRenderMeshObservable.notifyObservers(renderingMesh);\r\n            this.onBeforeShadowMapRenderObservable.notifyObservers(effect);\r\n\r\n            // Draw\r\n            renderingMesh._processRendering(effectiveMesh, subMesh, effect, material.fillMode, batch, hardwareInstancedRendering, (isInstance, worldOverride) => {\r\n                if (effectiveMesh !== renderingMesh && !isInstance) {\r\n                    renderingMesh.getMeshUniformBuffer().bindToEffect(effect, \"Mesh\");\r\n                    renderingMesh.transferToEffect(worldOverride);\r\n                } else {\r\n                    effectiveMesh.getMeshUniformBuffer().bindToEffect(effect, \"Mesh\");\r\n                    effectiveMesh.transferToEffect(isInstance ? worldOverride : world);\r\n                }\r\n            });\r\n\r\n            if (this.forceBackFacesOnly) {\r\n                engine.setState(true, 0, false, false, material.cullBackFaces);\r\n            }\r\n\r\n            // Observables\r\n            this.onAfterShadowMapRenderObservable.notifyObservers(effect);\r\n            this.onAfterShadowMapRenderMeshObservable.notifyObservers(renderingMesh);\r\n        } else {\r\n            // Need to reset refresh rate of the shadowMap\r\n            if (this._shadowMap) {\r\n                this._shadowMap.resetRefreshCounter();\r\n            }\r\n        }\r\n    }\r\n\r\n    protected _applyFilterValues(): void {\r\n        if (!this._shadowMap) {\r\n            return;\r\n        }\r\n\r\n        if (this.filter === ShadowGenerator.FILTER_NONE || this.filter === ShadowGenerator.FILTER_PCSS) {\r\n            this._shadowMap.updateSamplingMode(Texture.NEAREST_SAMPLINGMODE);\r\n        } else {\r\n            this._shadowMap.updateSamplingMode(Texture.BILINEAR_SAMPLINGMODE);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Forces all the attached effect to compile to enable rendering only once ready vs. lazily compiling effects.\r\n     * @param onCompiled Callback triggered at the and of the effects compilation\r\n     * @param options Sets of optional options forcing the compilation with different modes\r\n     */\r\n    public forceCompilation(onCompiled?: (generator: IShadowGenerator) => void, options?: Partial<{ useInstances: boolean }>): void {\r\n        const localOptions = {\r\n            useInstances: false,\r\n            ...options,\r\n        };\r\n\r\n        const shadowMap = this.getShadowMap();\r\n        if (!shadowMap) {\r\n            if (onCompiled) {\r\n                onCompiled(this);\r\n            }\r\n            return;\r\n        }\r\n\r\n        const renderList = shadowMap.renderList;\r\n        if (!renderList) {\r\n            if (onCompiled) {\r\n                onCompiled(this);\r\n            }\r\n            return;\r\n        }\r\n\r\n        const subMeshes: SubMesh[] = [];\r\n        for (const mesh of renderList) {\r\n            subMeshes.push(...mesh.subMeshes);\r\n        }\r\n        if (subMeshes.length === 0) {\r\n            if (onCompiled) {\r\n                onCompiled(this);\r\n            }\r\n            return;\r\n        }\r\n\r\n        let currentIndex = 0;\r\n\r\n        const checkReady = () => {\r\n            if (!this._scene || !this._scene.getEngine()) {\r\n                return;\r\n            }\r\n\r\n            while (\r\n                this.isReady(\r\n                    subMeshes[currentIndex],\r\n                    localOptions.useInstances,\r\n                    subMeshes[currentIndex].getMaterial()?.needAlphaBlendingForMesh(subMeshes[currentIndex].getMesh()) ?? false\r\n                )\r\n            ) {\r\n                currentIndex++;\r\n                if (currentIndex >= subMeshes.length) {\r\n                    if (onCompiled) {\r\n                        onCompiled(this);\r\n                    }\r\n                    return;\r\n                }\r\n            }\r\n            setTimeout(checkReady, 16);\r\n        };\r\n\r\n        checkReady();\r\n    }\r\n\r\n    /**\r\n     * Forces all the attached effect to compile to enable rendering only once ready vs. lazily compiling effects.\r\n     * @param options Sets of optional options forcing the compilation with different modes\r\n     * @returns A promise that resolves when the compilation completes\r\n     */\r\n    public forceCompilationAsync(options?: Partial<{ useInstances: boolean }>): Promise<void> {\r\n        return new Promise((resolve) => {\r\n            this.forceCompilation(() => {\r\n                resolve();\r\n            }, options);\r\n        });\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    protected _isReadyCustomDefines(defines: any, subMesh: SubMesh, useInstances: boolean): void {}\r\n\r\n    private _prepareShadowDefines(subMesh: SubMesh, useInstances: boolean, defines: string[], isTransparent: boolean): string[] {\r\n        defines.push(\"#define SM_LIGHTTYPE_\" + this._light.getClassName().toUpperCase());\r\n\r\n        defines.push(\"#define SM_FLOAT \" + (this._textureType !== Constants.TEXTURETYPE_UNSIGNED_INT ? \"1\" : \"0\"));\r\n\r\n        defines.push(\"#define SM_ESM \" + (this.useExponentialShadowMap || this.useBlurExponentialShadowMap ? \"1\" : \"0\"));\r\n\r\n        defines.push(\"#define SM_DEPTHTEXTURE \" + (this.usePercentageCloserFiltering || this.useContactHardeningShadow ? \"1\" : \"0\"));\r\n\r\n        const mesh = subMesh.getMesh();\r\n\r\n        // Normal bias.\r\n        defines.push(\"#define SM_NORMALBIAS \" + (this.normalBias && mesh.isVerticesDataPresent(VertexBuffer.NormalKind) ? \"1\" : \"0\"));\r\n        defines.push(\"#define SM_DIRECTIONINLIGHTDATA \" + (this.getLight().getTypeID() === Light.LIGHTTYPEID_DIRECTIONALLIGHT ? \"1\" : \"0\"));\r\n\r\n        // Point light\r\n        defines.push(\"#define SM_USEDISTANCE \" + (this._light.needCube() ? \"1\" : \"0\"));\r\n\r\n        // Soft transparent shadows\r\n        defines.push(\"#define SM_SOFTTRANSPARENTSHADOW \" + (this.enableSoftTransparentShadow && isTransparent ? \"1\" : \"0\"));\r\n\r\n        this._isReadyCustomDefines(defines, subMesh, useInstances);\r\n\r\n        return defines;\r\n    }\r\n\r\n    /**\r\n     * Determine whether the shadow generator is ready or not (mainly all effects and related post processes needs to be ready).\r\n     * @param subMesh The submesh we want to render in the shadow map\r\n     * @param useInstances Defines whether will draw in the map using instances\r\n     * @param isTransparent Indicates that isReady is called for a transparent subMesh\r\n     * @returns true if ready otherwise, false\r\n     */\r\n    public isReady(subMesh: SubMesh, useInstances: boolean, isTransparent: boolean): boolean {\r\n        const material = subMesh.getMaterial(),\r\n            shadowDepthWrapper = material?.shadowDepthWrapper;\r\n\r\n        this._opacityTexture = null;\r\n\r\n        if (!material) {\r\n            return false;\r\n        }\r\n\r\n        const defines: string[] = [];\r\n\r\n        this._prepareShadowDefines(subMesh, useInstances, defines, isTransparent);\r\n\r\n        if (shadowDepthWrapper) {\r\n            if (!shadowDepthWrapper.isReadyForSubMesh(subMesh, defines, this, useInstances, this._scene.getEngine().currentRenderPassId)) {\r\n                return false;\r\n            }\r\n        } else {\r\n            const subMeshEffect = subMesh._getDrawWrapper(undefined, true)!;\r\n\r\n            let effect = subMeshEffect.effect!;\r\n            let cachedDefines = subMeshEffect.defines;\r\n\r\n            const attribs = [VertexBuffer.PositionKind];\r\n\r\n            const mesh = subMesh.getMesh();\r\n\r\n            // Normal bias.\r\n            if (this.normalBias && mesh.isVerticesDataPresent(VertexBuffer.NormalKind)) {\r\n                attribs.push(VertexBuffer.NormalKind);\r\n                defines.push(\"#define NORMAL\");\r\n                if (mesh.nonUniformScaling) {\r\n                    defines.push(\"#define NONUNIFORMSCALING\");\r\n                }\r\n            }\r\n\r\n            // Alpha test\r\n            const needAlphaTesting = material.needAlphaTesting();\r\n\r\n            if (needAlphaTesting || material.needAlphaBlending()) {\r\n                if (this.useOpacityTextureForTransparentShadow) {\r\n                    this._opacityTexture = (material as any).opacityTexture;\r\n                } else {\r\n                    this._opacityTexture = material.getAlphaTestTexture();\r\n                }\r\n                if (this._opacityTexture) {\r\n                    if (!this._opacityTexture.isReady()) {\r\n                        return false;\r\n                    }\r\n\r\n                    const alphaCutOff = (material as any).alphaCutOff ?? ShadowGenerator.DEFAULT_ALPHA_CUTOFF;\r\n\r\n                    defines.push(\"#define ALPHATEXTURE\");\r\n                    if (needAlphaTesting) {\r\n                        defines.push(`#define ALPHATESTVALUE ${alphaCutOff}${alphaCutOff % 1 === 0 ? \".\" : \"\"}`);\r\n                    }\r\n                    if (mesh.isVerticesDataPresent(VertexBuffer.UVKind)) {\r\n                        attribs.push(VertexBuffer.UVKind);\r\n                        defines.push(\"#define UV1\");\r\n                    }\r\n                    if (mesh.isVerticesDataPresent(VertexBuffer.UV2Kind)) {\r\n                        if (this._opacityTexture.coordinatesIndex === 1) {\r\n                            attribs.push(VertexBuffer.UV2Kind);\r\n                            defines.push(\"#define UV2\");\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Bones\r\n            const fallbacks = new EffectFallbacks();\r\n            if (mesh.useBones && mesh.computeBonesUsingShaders && mesh.skeleton) {\r\n                attribs.push(VertexBuffer.MatricesIndicesKind);\r\n                attribs.push(VertexBuffer.MatricesWeightsKind);\r\n                if (mesh.numBoneInfluencers > 4) {\r\n                    attribs.push(VertexBuffer.MatricesIndicesExtraKind);\r\n                    attribs.push(VertexBuffer.MatricesWeightsExtraKind);\r\n                }\r\n                const skeleton = mesh.skeleton;\r\n                defines.push(\"#define NUM_BONE_INFLUENCERS \" + mesh.numBoneInfluencers);\r\n                if (mesh.numBoneInfluencers > 0) {\r\n                    fallbacks.addCPUSkinningFallback(0, mesh);\r\n                }\r\n\r\n                if (skeleton.isUsingTextureForMatrices) {\r\n                    defines.push(\"#define BONETEXTURE\");\r\n                } else {\r\n                    defines.push(\"#define BonesPerMesh \" + (skeleton.bones.length + 1));\r\n                }\r\n            } else {\r\n                defines.push(\"#define NUM_BONE_INFLUENCERS 0\");\r\n            }\r\n\r\n            // Morph targets\r\n            const manager = (<Mesh>mesh).morphTargetManager;\r\n            let morphInfluencers = 0;\r\n            if (manager) {\r\n                if (manager.numInfluencers > 0) {\r\n                    defines.push(\"#define MORPHTARGETS\");\r\n                    morphInfluencers = manager.numInfluencers;\r\n                    defines.push(\"#define NUM_MORPH_INFLUENCERS \" + morphInfluencers);\r\n                    if (manager.isUsingTextureForTargets) {\r\n                        defines.push(\"#define MORPHTARGETS_TEXTURE\");\r\n                    }\r\n                    MaterialHelper.PrepareAttributesForMorphTargetsInfluencers(attribs, mesh, morphInfluencers);\r\n                }\r\n            }\r\n\r\n            // ClipPlanes\r\n            prepareStringDefinesForClipPlanes(material, this._scene, defines);\r\n\r\n            // Instances\r\n            if (useInstances) {\r\n                defines.push(\"#define INSTANCES\");\r\n                MaterialHelper.PushAttributesForInstances(attribs);\r\n                if (subMesh.getRenderingMesh().hasThinInstances) {\r\n                    defines.push(\"#define THIN_INSTANCES\");\r\n                }\r\n            }\r\n\r\n            if (this.customShaderOptions) {\r\n                if (this.customShaderOptions.defines) {\r\n                    for (const define of this.customShaderOptions.defines) {\r\n                        if (defines.indexOf(define) === -1) {\r\n                            defines.push(define);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Get correct effect\r\n            const join = defines.join(\"\\n\");\r\n            if (cachedDefines !== join) {\r\n                cachedDefines = join;\r\n\r\n                let shaderName = \"shadowMap\";\r\n                const uniforms = [\r\n                    \"world\",\r\n                    \"mBones\",\r\n                    \"viewProjection\",\r\n                    \"diffuseMatrix\",\r\n                    \"lightDataSM\",\r\n                    \"depthValuesSM\",\r\n                    \"biasAndScaleSM\",\r\n                    \"morphTargetInfluences\",\r\n                    \"boneTextureWidth\",\r\n                    \"softTransparentShadowSM\",\r\n                    \"morphTargetTextureInfo\",\r\n                    \"morphTargetTextureIndices\",\r\n                ];\r\n                const samplers = [\"diffuseSampler\", \"boneSampler\", \"morphTargets\"];\r\n                const uniformBuffers = [\"Scene\", \"Mesh\"];\r\n\r\n                addClipPlaneUniforms(uniforms);\r\n\r\n                // Custom shader?\r\n                if (this.customShaderOptions) {\r\n                    shaderName = this.customShaderOptions.shaderName;\r\n\r\n                    if (this.customShaderOptions.attributes) {\r\n                        for (const attrib of this.customShaderOptions.attributes) {\r\n                            if (attribs.indexOf(attrib) === -1) {\r\n                                attribs.push(attrib);\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (this.customShaderOptions.uniforms) {\r\n                        for (const uniform of this.customShaderOptions.uniforms) {\r\n                            if (uniforms.indexOf(uniform) === -1) {\r\n                                uniforms.push(uniform);\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (this.customShaderOptions.samplers) {\r\n                        for (const sampler of this.customShaderOptions.samplers) {\r\n                            if (samplers.indexOf(sampler) === -1) {\r\n                                samplers.push(sampler);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n                const engine = this._scene.getEngine();\r\n\r\n                effect = engine.createEffect(\r\n                    shaderName,\r\n                    <IEffectCreationOptions>{\r\n                        attributes: attribs,\r\n                        uniformsNames: uniforms,\r\n                        uniformBuffersNames: uniformBuffers,\r\n                        samplers: samplers,\r\n                        defines: join,\r\n                        fallbacks: fallbacks,\r\n                        onCompiled: null,\r\n                        onError: null,\r\n                        indexParameters: { maxSimultaneousMorphTargets: morphInfluencers },\r\n                    },\r\n                    engine\r\n                );\r\n\r\n                subMeshEffect.setEffect(effect, cachedDefines);\r\n            }\r\n\r\n            if (!effect.isReady()) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        if (this.useBlurExponentialShadowMap || this.useBlurCloseExponentialShadowMap) {\r\n            if (!this._blurPostProcesses || !this._blurPostProcesses.length) {\r\n                this._initializeBlurRTTAndPostProcesses();\r\n            }\r\n        }\r\n\r\n        if (this._kernelBlurXPostprocess && !this._kernelBlurXPostprocess.isReady()) {\r\n            return false;\r\n        }\r\n        if (this._kernelBlurYPostprocess && !this._kernelBlurYPostprocess.isReady()) {\r\n            return false;\r\n        }\r\n        if (this._boxBlurPostprocess && !this._boxBlurPostprocess.isReady()) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Prepare all the defines in a material relying on a shadow map at the specified light index.\r\n     * @param defines Defines of the material we want to update\r\n     * @param lightIndex Index of the light in the enabled light list of the material\r\n     */\r\n    public prepareDefines(defines: any, lightIndex: number): void {\r\n        const scene = this._scene;\r\n        const light = this._light;\r\n\r\n        if (!scene.shadowsEnabled || !light.shadowEnabled) {\r\n            return;\r\n        }\r\n\r\n        defines[\"SHADOW\" + lightIndex] = true;\r\n\r\n        if (this.useContactHardeningShadow) {\r\n            defines[\"SHADOWPCSS\" + lightIndex] = true;\r\n            if (this._filteringQuality === ShadowGenerator.QUALITY_LOW) {\r\n                defines[\"SHADOWLOWQUALITY\" + lightIndex] = true;\r\n            } else if (this._filteringQuality === ShadowGenerator.QUALITY_MEDIUM) {\r\n                defines[\"SHADOWMEDIUMQUALITY\" + lightIndex] = true;\r\n            }\r\n            // else default to high.\r\n        } else if (this.usePercentageCloserFiltering) {\r\n            defines[\"SHADOWPCF\" + lightIndex] = true;\r\n            if (this._filteringQuality === ShadowGenerator.QUALITY_LOW) {\r\n                defines[\"SHADOWLOWQUALITY\" + lightIndex] = true;\r\n            } else if (this._filteringQuality === ShadowGenerator.QUALITY_MEDIUM) {\r\n                defines[\"SHADOWMEDIUMQUALITY\" + lightIndex] = true;\r\n            }\r\n            // else default to high.\r\n        } else if (this.usePoissonSampling) {\r\n            defines[\"SHADOWPOISSON\" + lightIndex] = true;\r\n        } else if (this.useExponentialShadowMap || this.useBlurExponentialShadowMap) {\r\n            defines[\"SHADOWESM\" + lightIndex] = true;\r\n        } else if (this.useCloseExponentialShadowMap || this.useBlurCloseExponentialShadowMap) {\r\n            defines[\"SHADOWCLOSEESM\" + lightIndex] = true;\r\n        }\r\n\r\n        if (light.needCube()) {\r\n            defines[\"SHADOWCUBE\" + lightIndex] = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Binds the shadow related information inside of an effect (information like near, far, darkness...\r\n     * defined in the generator but impacting the effect).\r\n     * @param lightIndex Index of the light in the enabled light list of the material owning the effect\r\n     * @param effect The effect we are binding the information for\r\n     */\r\n    public bindShadowLight(lightIndex: string, effect: Effect): void {\r\n        const light = this._light;\r\n        const scene = this._scene;\r\n\r\n        if (!scene.shadowsEnabled || !light.shadowEnabled) {\r\n            return;\r\n        }\r\n\r\n        const camera = this._getCamera();\r\n        if (!camera) {\r\n            return;\r\n        }\r\n\r\n        const shadowMap = this.getShadowMap();\r\n\r\n        if (!shadowMap) {\r\n            return;\r\n        }\r\n\r\n        if (!light.needCube()) {\r\n            effect.setMatrix(\"lightMatrix\" + lightIndex, this.getTransformMatrix());\r\n        }\r\n\r\n        // Only PCF uses depth stencil texture.\r\n        if (this._filter === ShadowGenerator.FILTER_PCF) {\r\n            effect.setDepthStencilTexture(\"shadowSampler\" + lightIndex, this.getShadowMapForRendering());\r\n            light._uniformBuffer.updateFloat4(\"shadowsInfo\", this.getDarkness(), shadowMap.getSize().width, 1 / shadowMap.getSize().width, this.frustumEdgeFalloff, lightIndex);\r\n        } else if (this._filter === ShadowGenerator.FILTER_PCSS) {\r\n            effect.setDepthStencilTexture(\"shadowSampler\" + lightIndex, this.getShadowMapForRendering());\r\n            effect.setTexture(\"depthSampler\" + lightIndex, this.getShadowMapForRendering());\r\n            light._uniformBuffer.updateFloat4(\r\n                \"shadowsInfo\",\r\n                this.getDarkness(),\r\n                1 / shadowMap.getSize().width,\r\n                this._contactHardeningLightSizeUVRatio * shadowMap.getSize().width,\r\n                this.frustumEdgeFalloff,\r\n                lightIndex\r\n            );\r\n        } else {\r\n            effect.setTexture(\"shadowSampler\" + lightIndex, this.getShadowMapForRendering());\r\n            light._uniformBuffer.updateFloat4(\"shadowsInfo\", this.getDarkness(), this.blurScale / shadowMap.getSize().width, this.depthScale, this.frustumEdgeFalloff, lightIndex);\r\n        }\r\n\r\n        light._uniformBuffer.updateFloat2(\r\n            \"depthValues\",\r\n            this.getLight().getDepthMinZ(camera),\r\n            this.getLight().getDepthMinZ(camera) + this.getLight().getDepthMaxZ(camera),\r\n            lightIndex\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Gets the view matrix used to render the shadow map.\r\n     */\r\n    public get viewMatrix() {\r\n        return this._viewMatrix;\r\n    }\r\n\r\n    /**\r\n     * Gets the projection matrix used to render the shadow map.\r\n     */\r\n    public get projectionMatrix() {\r\n        return this._projectionMatrix;\r\n    }\r\n\r\n    /**\r\n     * Gets the transformation matrix used to project the meshes into the map from the light point of view.\r\n     * (eq to shadow projection matrix * light transform matrix)\r\n     * @returns The transform matrix used to create the shadow map\r\n     */\r\n    public getTransformMatrix(): Matrix {\r\n        const scene = this._scene;\r\n        if (this._currentRenderId === scene.getRenderId() && this._currentFaceIndexCache === this._currentFaceIndex) {\r\n            return this._transformMatrix;\r\n        }\r\n\r\n        this._currentRenderId = scene.getRenderId();\r\n        this._currentFaceIndexCache = this._currentFaceIndex;\r\n\r\n        let lightPosition = this._light.position;\r\n        if (this._light.computeTransformedInformation()) {\r\n            lightPosition = this._light.transformedPosition;\r\n        }\r\n\r\n        Vector3.NormalizeToRef(this._light.getShadowDirection(this._currentFaceIndex), this._lightDirection);\r\n        if (Math.abs(Vector3.Dot(this._lightDirection, Vector3.Up())) === 1.0) {\r\n            this._lightDirection.z = 0.0000000000001; // Required to avoid perfectly perpendicular light\r\n        }\r\n\r\n        if (\r\n            this._light.needProjectionMatrixCompute() ||\r\n            !this._cachedPosition ||\r\n            !this._cachedDirection ||\r\n            !lightPosition.equals(this._cachedPosition) ||\r\n            !this._lightDirection.equals(this._cachedDirection)\r\n        ) {\r\n            this._cachedPosition.copyFrom(lightPosition);\r\n            this._cachedDirection.copyFrom(this._lightDirection);\r\n\r\n            Matrix.LookAtLHToRef(lightPosition, lightPosition.add(this._lightDirection), Vector3.Up(), this._viewMatrix);\r\n\r\n            const shadowMap = this.getShadowMap();\r\n\r\n            if (shadowMap) {\r\n                const renderList = shadowMap.renderList;\r\n\r\n                if (renderList) {\r\n                    this._light.setShadowProjectionMatrix(this._projectionMatrix, this._viewMatrix, renderList);\r\n                }\r\n            }\r\n\r\n            this._viewMatrix.multiplyToRef(this._projectionMatrix, this._transformMatrix);\r\n        }\r\n\r\n        return this._transformMatrix;\r\n    }\r\n\r\n    /**\r\n     * Recreates the shadow map dependencies like RTT and post processes. This can be used during the switch between\r\n     * Cube and 2D textures for instance.\r\n     */\r\n    public recreateShadowMap(): void {\r\n        const shadowMap = this._shadowMap;\r\n        if (!shadowMap) {\r\n            return;\r\n        }\r\n\r\n        // Track render list.\r\n        const renderList = shadowMap.renderList;\r\n        // Clean up existing data.\r\n        this._disposeRTTandPostProcesses();\r\n        // Reinitializes.\r\n        this._initializeGenerator();\r\n        // Reaffect the filter to ensure a correct fallback if necessary.\r\n        this.filter = this._filter;\r\n        // Reaffect the filter.\r\n        this._applyFilterValues();\r\n        // Reaffect Render List.\r\n        if (renderList) {\r\n            // Note: don't do this._shadowMap!.renderList = renderList;\r\n            // The renderList hooked array is accessing the old RenderTargetTexture (see RenderTargetTexture._hookArray), which is disposed at this point (by the call to _disposeRTTandPostProcesses)\r\n            if (!this._shadowMap!.renderList) {\r\n                this._shadowMap!.renderList = [];\r\n            }\r\n            for (const mesh of renderList) {\r\n                this._shadowMap!.renderList.push(mesh);\r\n            }\r\n        } else {\r\n            this._shadowMap!.renderList = null;\r\n        }\r\n    }\r\n\r\n    protected _disposeBlurPostProcesses(): void {\r\n        if (this._shadowMap2) {\r\n            this._shadowMap2.dispose();\r\n            this._shadowMap2 = null;\r\n        }\r\n\r\n        if (this._boxBlurPostprocess) {\r\n            this._boxBlurPostprocess.dispose();\r\n            this._boxBlurPostprocess = null;\r\n        }\r\n\r\n        if (this._kernelBlurXPostprocess) {\r\n            this._kernelBlurXPostprocess.dispose();\r\n            this._kernelBlurXPostprocess = null;\r\n        }\r\n\r\n        if (this._kernelBlurYPostprocess) {\r\n            this._kernelBlurYPostprocess.dispose();\r\n            this._kernelBlurYPostprocess = null;\r\n        }\r\n\r\n        this._blurPostProcesses = [];\r\n    }\r\n\r\n    protected _disposeRTTandPostProcesses(): void {\r\n        if (this._shadowMap) {\r\n            this._shadowMap.dispose();\r\n            this._shadowMap = null;\r\n        }\r\n\r\n        this._disposeBlurPostProcesses();\r\n    }\r\n\r\n    protected _disposeSceneUBOs(): void {\r\n        if (this._sceneUBOs) {\r\n            for (const ubo of this._sceneUBOs) {\r\n                ubo.dispose();\r\n            }\r\n            this._sceneUBOs = [];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Disposes the ShadowGenerator.\r\n     * Returns nothing.\r\n     */\r\n    public dispose(): void {\r\n        this._disposeRTTandPostProcesses();\r\n\r\n        this._disposeSceneUBOs();\r\n\r\n        if (this._light) {\r\n            if (this._light._shadowGenerators) {\r\n                const iterator = this._light._shadowGenerators.entries();\r\n                for (let entry = iterator.next(); entry.done !== true; entry = iterator.next()) {\r\n                    const [camera, shadowGenerator] = entry.value;\r\n                    if (shadowGenerator === this) {\r\n                        this._light._shadowGenerators.delete(camera);\r\n                    }\r\n                }\r\n                if (this._light._shadowGenerators.size === 0) {\r\n                    this._light._shadowGenerators = null;\r\n                }\r\n            }\r\n            this._light._markMeshesAsLightDirty();\r\n        }\r\n\r\n        this.onBeforeShadowMapRenderMeshObservable.clear();\r\n        this.onBeforeShadowMapRenderObservable.clear();\r\n        this.onAfterShadowMapRenderMeshObservable.clear();\r\n        this.onAfterShadowMapRenderObservable.clear();\r\n    }\r\n\r\n    /**\r\n     * Serializes the shadow generator setup to a json object.\r\n     * @returns The serialized JSON object\r\n     */\r\n    public serialize(): any {\r\n        const serializationObject: any = {};\r\n        const shadowMap = this.getShadowMap();\r\n\r\n        if (!shadowMap) {\r\n            return serializationObject;\r\n        }\r\n\r\n        serializationObject.className = this.getClassName();\r\n        serializationObject.lightId = this._light.id;\r\n        serializationObject.cameraId = this._camera?.id;\r\n        serializationObject.id = this.id;\r\n        serializationObject.mapSize = shadowMap.getRenderSize();\r\n        serializationObject.forceBackFacesOnly = this.forceBackFacesOnly;\r\n        serializationObject.darkness = this.getDarkness();\r\n        serializationObject.transparencyShadow = this._transparencyShadow;\r\n        serializationObject.frustumEdgeFalloff = this.frustumEdgeFalloff;\r\n        serializationObject.bias = this.bias;\r\n        serializationObject.normalBias = this.normalBias;\r\n        serializationObject.usePercentageCloserFiltering = this.usePercentageCloserFiltering;\r\n        serializationObject.useContactHardeningShadow = this.useContactHardeningShadow;\r\n        serializationObject.contactHardeningLightSizeUVRatio = this.contactHardeningLightSizeUVRatio;\r\n        serializationObject.filteringQuality = this.filteringQuality;\r\n        serializationObject.useExponentialShadowMap = this.useExponentialShadowMap;\r\n        serializationObject.useBlurExponentialShadowMap = this.useBlurExponentialShadowMap;\r\n        serializationObject.useCloseExponentialShadowMap = this.useBlurExponentialShadowMap;\r\n        serializationObject.useBlurCloseExponentialShadowMap = this.useBlurExponentialShadowMap;\r\n        serializationObject.usePoissonSampling = this.usePoissonSampling;\r\n        serializationObject.depthScale = this.depthScale;\r\n        serializationObject.blurBoxOffset = this.blurBoxOffset;\r\n        serializationObject.blurKernel = this.blurKernel;\r\n        serializationObject.blurScale = this.blurScale;\r\n        serializationObject.useKernelBlur = this.useKernelBlur;\r\n\r\n        serializationObject.renderList = [];\r\n        if (shadowMap.renderList) {\r\n            for (let meshIndex = 0; meshIndex < shadowMap.renderList.length; meshIndex++) {\r\n                const mesh = shadowMap.renderList[meshIndex];\r\n\r\n                serializationObject.renderList.push(mesh.id);\r\n            }\r\n        }\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    /**\r\n     * Parses a serialized ShadowGenerator and returns a new ShadowGenerator.\r\n     * @param parsedShadowGenerator The JSON object to parse\r\n     * @param scene The scene to create the shadow map for\r\n     * @param constr A function that builds a shadow generator or undefined to create an instance of the default shadow generator\r\n     * @returns The parsed shadow generator\r\n     */\r\n    public static Parse(parsedShadowGenerator: any, scene: Scene, constr?: (mapSize: number, light: IShadowLight, camera: Nullable<Camera>) => ShadowGenerator): ShadowGenerator {\r\n        const light = <IShadowLight>scene.getLightById(parsedShadowGenerator.lightId);\r\n        const camera: Nullable<Camera> = parsedShadowGenerator.cameraId !== undefined ? scene.getCameraById(parsedShadowGenerator.cameraId) : null;\r\n        const shadowGenerator = constr ? constr(parsedShadowGenerator.mapSize, light, camera) : new ShadowGenerator(parsedShadowGenerator.mapSize, light, undefined, camera);\r\n        const shadowMap = shadowGenerator.getShadowMap();\r\n\r\n        for (let meshIndex = 0; meshIndex < parsedShadowGenerator.renderList.length; meshIndex++) {\r\n            const meshes = scene.getMeshesById(parsedShadowGenerator.renderList[meshIndex]);\r\n            meshes.forEach(function (mesh) {\r\n                if (!shadowMap) {\r\n                    return;\r\n                }\r\n                if (!shadowMap.renderList) {\r\n                    shadowMap.renderList = [];\r\n                }\r\n                shadowMap.renderList.push(mesh);\r\n            });\r\n        }\r\n\r\n        if (parsedShadowGenerator.id !== undefined) {\r\n            shadowGenerator.id = parsedShadowGenerator.id;\r\n        }\r\n\r\n        shadowGenerator.forceBackFacesOnly = !!parsedShadowGenerator.forceBackFacesOnly;\r\n\r\n        if (parsedShadowGenerator.darkness !== undefined) {\r\n            shadowGenerator.setDarkness(parsedShadowGenerator.darkness);\r\n        }\r\n\r\n        if (parsedShadowGenerator.transparencyShadow) {\r\n            shadowGenerator.setTransparencyShadow(true);\r\n        }\r\n\r\n        if (parsedShadowGenerator.frustumEdgeFalloff !== undefined) {\r\n            shadowGenerator.frustumEdgeFalloff = parsedShadowGenerator.frustumEdgeFalloff;\r\n        }\r\n\r\n        if (parsedShadowGenerator.bias !== undefined) {\r\n            shadowGenerator.bias = parsedShadowGenerator.bias;\r\n        }\r\n\r\n        if (parsedShadowGenerator.normalBias !== undefined) {\r\n            shadowGenerator.normalBias = parsedShadowGenerator.normalBias;\r\n        }\r\n\r\n        if (parsedShadowGenerator.usePercentageCloserFiltering) {\r\n            shadowGenerator.usePercentageCloserFiltering = true;\r\n        } else if (parsedShadowGenerator.useContactHardeningShadow) {\r\n            shadowGenerator.useContactHardeningShadow = true;\r\n        } else if (parsedShadowGenerator.usePoissonSampling) {\r\n            shadowGenerator.usePoissonSampling = true;\r\n        } else if (parsedShadowGenerator.useExponentialShadowMap) {\r\n            shadowGenerator.useExponentialShadowMap = true;\r\n        } else if (parsedShadowGenerator.useBlurExponentialShadowMap) {\r\n            shadowGenerator.useBlurExponentialShadowMap = true;\r\n        } else if (parsedShadowGenerator.useCloseExponentialShadowMap) {\r\n            shadowGenerator.useCloseExponentialShadowMap = true;\r\n        } else if (parsedShadowGenerator.useBlurCloseExponentialShadowMap) {\r\n            shadowGenerator.useBlurCloseExponentialShadowMap = true;\r\n        }\r\n        // Backward compat\r\n        else if (parsedShadowGenerator.useVarianceShadowMap) {\r\n            shadowGenerator.useExponentialShadowMap = true;\r\n        } else if (parsedShadowGenerator.useBlurVarianceShadowMap) {\r\n            shadowGenerator.useBlurExponentialShadowMap = true;\r\n        }\r\n\r\n        if (parsedShadowGenerator.contactHardeningLightSizeUVRatio !== undefined) {\r\n            shadowGenerator.contactHardeningLightSizeUVRatio = parsedShadowGenerator.contactHardeningLightSizeUVRatio;\r\n        }\r\n\r\n        if (parsedShadowGenerator.filteringQuality !== undefined) {\r\n            shadowGenerator.filteringQuality = parsedShadowGenerator.filteringQuality;\r\n        }\r\n\r\n        if (parsedShadowGenerator.depthScale) {\r\n            shadowGenerator.depthScale = parsedShadowGenerator.depthScale;\r\n        }\r\n\r\n        if (parsedShadowGenerator.blurScale) {\r\n            shadowGenerator.blurScale = parsedShadowGenerator.blurScale;\r\n        }\r\n\r\n        if (parsedShadowGenerator.blurBoxOffset) {\r\n            shadowGenerator.blurBoxOffset = parsedShadowGenerator.blurBoxOffset;\r\n        }\r\n\r\n        if (parsedShadowGenerator.useKernelBlur) {\r\n            shadowGenerator.useKernelBlur = parsedShadowGenerator.useKernelBlur;\r\n        }\r\n\r\n        if (parsedShadowGenerator.blurKernel) {\r\n            shadowGenerator.blurKernel = parsedShadowGenerator.blurKernel;\r\n        }\r\n\r\n        return shadowGenerator;\r\n    }\r\n}\r\n", "// Do not edit.\nimport { ShaderStore } from \"../Engines/shaderStore\";\nimport \"./ShadersInclude/clipPlaneFragmentDeclaration\";\nimport \"./ShadersInclude/packingFunctions\";\nimport \"./ShadersInclude/clipPlaneFragment\";\n\nconst name = \"depthPixelShader\";\nconst shader = `#ifdef ALPHATEST\nvarying vec2 vUV;uniform sampler2D diffuseSampler;\n#endif\n#include<clipPlaneFragmentDeclaration>\nvarying float vDepthMetric;\n#ifdef PACKED\n#include<packingFunctions>\n#endif\n#ifdef STORE_CAMERASPACE_Z\nvarying vec4 vViewPos;\n#endif\n#define CUSTOM_FRAGMENT_DEFINITIONS\nvoid main(void)\n{\n#include<clipPlaneFragment>\n#ifdef ALPHATEST\nif (texture2D(diffuseSampler,vUV).a<0.4)\ndiscard;\n#endif\n#ifdef STORE_CAMERASPACE_Z\n#ifdef PACKED\ngl_FragColor=pack(vViewPos.z);\n#else\ngl_FragColor=vec4(vViewPos.z,0.0,0.0,1.0);\n#endif\n#else\n#ifdef NONLINEARDEPTH\n#ifdef PACKED\ngl_FragColor=pack(gl_FragCoord.z);\n#else\ngl_FragColor=vec4(gl_FragCoord.z,0.0,0.0,0.0);\n#endif\n#else\n#ifdef PACKED\ngl_FragColor=pack(vDepthMetric);\n#else\ngl_FragColor=vec4(vDepthMetric,0.0,0.0,1.0);\n#endif\n#endif\n#endif\n}`;\n// Sideeffect\nShaderStore.ShadersStore[name] = shader;\n/** @internal */\nexport const depthPixelShader = { name, shader };\n", "// Do not edit.\nimport { ShaderStore } from \"../../Engines/shaderStore\";\n\nconst name = \"pointCloudVertexDeclaration\";\nconst shader = `#ifdef POINTSIZE\nuniform float pointSize;\n#endif\n`;\n// Sideeffect\nShaderStore.IncludesShadersStore[name] = shader;\n/** @internal */\nexport const pointCloudVertexDeclaration = { name, shader };\n", "// Do not edit.\nimport { ShaderStore } from \"../Engines/shaderStore\";\nimport \"./ShadersInclude/bonesDeclaration\";\nimport \"./ShadersInclude/bakedVertexAnimationDeclaration\";\nimport \"./ShadersInclude/morphTargetsVertexGlobalDeclaration\";\nimport \"./ShadersInclude/morphTargetsVertexDeclaration\";\nimport \"./ShadersInclude/clipPlaneVertexDeclaration\";\nimport \"./ShadersInclude/instancesDeclaration\";\nimport \"./ShadersInclude/pointCloudVertexDeclaration\";\nimport \"./ShadersInclude/morphTargetsVertexGlobal\";\nimport \"./ShadersInclude/morphTargetsVertex\";\nimport \"./ShadersInclude/instancesVertex\";\nimport \"./ShadersInclude/bonesVertex\";\nimport \"./ShadersInclude/bakedVertexAnimation\";\nimport \"./ShadersInclude/clipPlaneVertex\";\nimport \"./ShadersInclude/pointCloudVertex\";\n\nconst name = \"depthVertexShader\";\nconst shader = `attribute vec3 position;\n#include<bonesDeclaration>\n#include<bakedVertexAnimationDeclaration>\n#include<morphTargetsVertexGlobalDeclaration>\n#include<morphTargetsVertexDeclaration>[0..maxSimultaneousMorphTargets]\n#include<clipPlaneVertexDeclaration>\n#include<instancesDeclaration>\nuniform mat4 viewProjection;uniform vec2 depthValues;\n#if defined(ALPHATEST) || defined(NEED_UV)\nvarying vec2 vUV;uniform mat4 diffuseMatrix;\n#ifdef UV1\nattribute vec2 uv;\n#endif\n#ifdef UV2\nattribute vec2 uv2;\n#endif\n#endif\n#ifdef STORE_CAMERASPACE_Z\nuniform mat4 view;varying vec4 vViewPos;\n#endif\n#include<pointCloudVertexDeclaration>\nvarying float vDepthMetric;\n#define CUSTOM_VERTEX_DEFINITIONS\nvoid main(void)\n{vec3 positionUpdated=position;\n#ifdef UV1\nvec2 uvUpdated=uv;\n#endif\n#include<morphTargetsVertexGlobal>\n#include<morphTargetsVertex>[0..maxSimultaneousMorphTargets]\n#include<instancesVertex>\n#include<bonesVertex>\n#include<bakedVertexAnimation>\nvec4 worldPos=finalWorld*vec4(positionUpdated,1.0);\n#include<clipPlaneVertex>\ngl_Position=viewProjection*worldPos;\n#ifdef STORE_CAMERASPACE_Z\nvViewPos=view*worldPos;\n#else\n#ifdef USE_REVERSE_DEPTHBUFFER\nvDepthMetric=((-gl_Position.z+depthValues.x)/(depthValues.y));\n#else\nvDepthMetric=((gl_Position.z+depthValues.x)/(depthValues.y));\n#endif\n#endif\n#if defined(ALPHATEST) || defined(BASIC_RENDER)\n#ifdef UV1\nvUV=vec2(diffuseMatrix*vec4(uvUpdated,1.0,0.0));\n#endif\n#ifdef UV2\nvUV=vec2(diffuseMatrix*vec4(uv2,1.0,0.0));\n#endif\n#endif\n#include<pointCloudVertex>\n}\n`;\n// Sideeffect\nShaderStore.ShadersStore[name] = shader;\n/** @internal */\nexport const depthVertexShader = { name, shader };\n", "import type { Nullable } from \"../types\";\r\nimport { Color4 } from \"../Maths/math.color\";\r\nimport type { Mesh } from \"../Meshes/mesh\";\r\nimport type { SubMesh } from \"../Meshes/subMesh\";\r\nimport { VertexBuffer } from \"../Buffers/buffer\";\r\nimport type { SmartArray } from \"../Misc/smartArray\";\r\nimport type { Scene } from \"../scene\";\r\nimport { Texture } from \"../Materials/Textures/texture\";\r\nimport { RenderTargetTexture } from \"../Materials/Textures/renderTargetTexture\";\r\nimport { MaterialHelper } from \"../Materials/materialHelper\";\r\nimport { Camera } from \"../Cameras/camera\";\r\nimport { Constants } from \"../Engines/constants\";\r\n\r\nimport \"../Shaders/depth.fragment\";\r\nimport \"../Shaders/depth.vertex\";\r\nimport { _WarnImport } from \"../Misc/devTools\";\r\nimport { addClipPlaneUniforms, bindClipPlane, prepareStringDefinesForClipPlanes } from \"../Materials/clipPlaneMaterialHelper\";\r\n\r\nimport type { Material } from \"../Materials/material\";\r\nimport type { AbstractMesh } from \"../Meshes/abstractMesh\";\r\n\r\n/**\r\n * This represents a depth renderer in Babylon.\r\n * A depth renderer will render to it's depth map every frame which can be displayed or used in post processing\r\n */\r\nexport class DepthRenderer {\r\n    private _scene: Scene;\r\n    private _depthMap: RenderTargetTexture;\r\n    private readonly _storeNonLinearDepth: boolean;\r\n    private readonly _storeCameraSpaceZ: boolean;\r\n\r\n    /** Color used to clear the depth texture. Default: (1,0,0,1) */\r\n    public clearColor: Color4;\r\n\r\n    /** Get if the depth renderer is using packed depth or not */\r\n    public readonly isPacked: boolean;\r\n\r\n    private _camera: Nullable<Camera>;\r\n\r\n    /** Enable or disable the depth renderer. When disabled, the depth texture is not updated */\r\n    public enabled = true;\r\n\r\n    /** Force writing the transparent objects into the depth map */\r\n    public forceDepthWriteTransparentMeshes = false;\r\n\r\n    /**\r\n     * Specifies that the depth renderer will only be used within\r\n     * the camera it is created for.\r\n     * This can help forcing its rendering during the camera processing.\r\n     */\r\n    public useOnlyInActiveCamera: boolean = false;\r\n\r\n    /** If true, reverse the culling of materials before writing to the depth texture.\r\n     * So, basically, when \"true\", back facing instead of front facing faces are rasterized into the texture\r\n     */\r\n    public reverseCulling = false;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public static _SceneComponentInitialization: (scene: Scene) => void = (_) => {\r\n        throw _WarnImport(\"DepthRendererSceneComponent\");\r\n    };\r\n\r\n    /**\r\n     * Sets a specific material to be used to render a mesh/a list of meshes by the depth renderer\r\n     * @param mesh mesh or array of meshes\r\n     * @param material material to use by the depth render when rendering the mesh(es). If undefined is passed, the specific material created by the depth renderer will be used.\r\n     */\r\n    public setMaterialForRendering(mesh: AbstractMesh | AbstractMesh[], material?: Material): void {\r\n        this._depthMap.setMaterialForRendering(mesh, material);\r\n    }\r\n\r\n    /**\r\n     * Instantiates a depth renderer\r\n     * @param scene The scene the renderer belongs to\r\n     * @param type The texture type of the depth map (default: Engine.TEXTURETYPE_FLOAT)\r\n     * @param camera The camera to be used to render the depth map (default: scene's active camera)\r\n     * @param storeNonLinearDepth Defines whether the depth is stored linearly like in Babylon Shadows or directly like glFragCoord.z\r\n     * @param samplingMode The sampling mode to be used with the render target (Linear, Nearest...) (default: TRILINEAR_SAMPLINGMODE)\r\n     * @param storeCameraSpaceZ Defines whether the depth stored is the Z coordinate in camera space. If true, storeNonLinearDepth has no effect. (Default: false)\r\n     * @param name Name of the render target (default: DepthRenderer)\r\n     */\r\n    constructor(\r\n        scene: Scene,\r\n        type: number = Constants.TEXTURETYPE_FLOAT,\r\n        camera: Nullable<Camera> = null,\r\n        storeNonLinearDepth = false,\r\n        samplingMode = Texture.TRILINEAR_SAMPLINGMODE,\r\n        storeCameraSpaceZ = false,\r\n        name?: string\r\n    ) {\r\n        this._scene = scene;\r\n        this._storeNonLinearDepth = storeNonLinearDepth;\r\n        this._storeCameraSpaceZ = storeCameraSpaceZ;\r\n        this.isPacked = type === Constants.TEXTURETYPE_UNSIGNED_BYTE;\r\n        if (this.isPacked) {\r\n            this.clearColor = new Color4(1.0, 1.0, 1.0, 1.0);\r\n        } else {\r\n            this.clearColor = new Color4(storeCameraSpaceZ ? 1e8 : 1.0, 0.0, 0.0, 1.0);\r\n        }\r\n\r\n        DepthRenderer._SceneComponentInitialization(this._scene);\r\n\r\n        const engine = scene.getEngine();\r\n\r\n        this._camera = camera;\r\n\r\n        if (samplingMode !== Texture.NEAREST_SAMPLINGMODE) {\r\n            if (type === Constants.TEXTURETYPE_FLOAT && !engine._caps.textureFloatLinearFiltering) {\r\n                samplingMode = Texture.NEAREST_SAMPLINGMODE;\r\n            }\r\n            if (type === Constants.TEXTURETYPE_HALF_FLOAT && !engine._caps.textureHalfFloatLinearFiltering) {\r\n                samplingMode = Texture.NEAREST_SAMPLINGMODE;\r\n            }\r\n        }\r\n\r\n        // Render target\r\n        const format = this.isPacked || !engine._features.supportExtendedTextureFormats ? Constants.TEXTUREFORMAT_RGBA : Constants.TEXTUREFORMAT_R;\r\n        this._depthMap = new RenderTargetTexture(\r\n            name ?? \"DepthRenderer\",\r\n            { width: engine.getRenderWidth(), height: engine.getRenderHeight() },\r\n            this._scene,\r\n            false,\r\n            true,\r\n            type,\r\n            false,\r\n            samplingMode,\r\n            undefined,\r\n            undefined,\r\n            undefined,\r\n            format\r\n        );\r\n        this._depthMap.wrapU = Texture.CLAMP_ADDRESSMODE;\r\n        this._depthMap.wrapV = Texture.CLAMP_ADDRESSMODE;\r\n        this._depthMap.refreshRate = 1;\r\n        this._depthMap.renderParticles = false;\r\n        this._depthMap.renderList = null;\r\n        this._depthMap.noPrePassRenderer = true;\r\n\r\n        // Camera to get depth map from to support multiple concurrent cameras\r\n        this._depthMap.activeCamera = this._camera;\r\n        this._depthMap.ignoreCameraViewport = true;\r\n        this._depthMap.useCameraPostProcesses = false;\r\n\r\n        // set default depth value to 1.0 (far away)\r\n        this._depthMap.onClearObservable.add((engine) => {\r\n            engine.clear(this.clearColor, true, true, true);\r\n        });\r\n\r\n        this._depthMap.onBeforeBindObservable.add(() => {\r\n            engine._debugPushGroup?.(\"depth renderer\", 1);\r\n        });\r\n\r\n        this._depthMap.onAfterUnbindObservable.add(() => {\r\n            engine._debugPopGroup?.(1);\r\n        });\r\n\r\n        this._depthMap.customIsReadyFunction = (mesh: AbstractMesh, refreshRate: number, preWarm?: boolean) => {\r\n            if ((preWarm || refreshRate === 0) && mesh.subMeshes) {\r\n                for (let i = 0; i < mesh.subMeshes.length; ++i) {\r\n                    const subMesh = mesh.subMeshes[i];\r\n                    const renderingMesh = subMesh.getRenderingMesh();\r\n\r\n                    const batch = renderingMesh._getInstancesRenderList(subMesh._id, !!subMesh.getReplacementMesh());\r\n                    const hardwareInstancedRendering =\r\n                        engine.getCaps().instancedArrays &&\r\n                        ((batch.visibleInstances[subMesh._id] !== null && batch.visibleInstances[subMesh._id] !== undefined) || renderingMesh.hasThinInstances);\r\n\r\n                    if (!this.isReady(subMesh, hardwareInstancedRendering)) {\r\n                        return false;\r\n                    }\r\n                }\r\n            }\r\n\r\n            return true;\r\n        };\r\n\r\n        // Custom render function\r\n        const renderSubMesh = (subMesh: SubMesh): void => {\r\n            const renderingMesh = subMesh.getRenderingMesh();\r\n            const effectiveMesh = subMesh.getEffectiveMesh();\r\n            const scene = this._scene;\r\n            const engine = scene.getEngine();\r\n            const material = subMesh.getMaterial();\r\n\r\n            effectiveMesh._internalAbstractMeshDataInfo._isActiveIntermediate = false;\r\n\r\n            if (!material || effectiveMesh.infiniteDistance || material.disableDepthWrite || subMesh.verticesCount === 0 || subMesh._renderId === scene.getRenderId()) {\r\n                return;\r\n            }\r\n\r\n            // Culling\r\n            const detNeg = effectiveMesh._getWorldMatrixDeterminant() < 0;\r\n            let sideOrientation = renderingMesh.overrideMaterialSideOrientation ?? material.sideOrientation;\r\n            if (detNeg) {\r\n                sideOrientation =\r\n                    sideOrientation === Constants.MATERIAL_ClockWiseSideOrientation\r\n                        ? Constants.MATERIAL_CounterClockWiseSideOrientation\r\n                        : Constants.MATERIAL_ClockWiseSideOrientation;\r\n            }\r\n            const reverseSideOrientation = sideOrientation === Constants.MATERIAL_ClockWiseSideOrientation;\r\n\r\n            engine.setState(material.backFaceCulling, 0, false, reverseSideOrientation, this.reverseCulling ? !material.cullBackFaces : material.cullBackFaces);\r\n\r\n            // Managing instances\r\n            const batch = renderingMesh._getInstancesRenderList(subMesh._id, !!subMesh.getReplacementMesh());\r\n\r\n            if (batch.mustReturn) {\r\n                return;\r\n            }\r\n\r\n            const hardwareInstancedRendering =\r\n                engine.getCaps().instancedArrays &&\r\n                ((batch.visibleInstances[subMesh._id] !== null && batch.visibleInstances[subMesh._id] !== undefined) || renderingMesh.hasThinInstances);\r\n\r\n            const camera = this._camera || scene.activeCamera;\r\n            if (this.isReady(subMesh, hardwareInstancedRendering) && camera) {\r\n                subMesh._renderId = scene.getRenderId();\r\n\r\n                const renderingMaterial = effectiveMesh._internalAbstractMeshDataInfo._materialForRenderPass?.[engine.currentRenderPassId];\r\n\r\n                let drawWrapper = subMesh._getDrawWrapper();\r\n                if (!drawWrapper && renderingMaterial) {\r\n                    drawWrapper = renderingMaterial._getDrawWrapper();\r\n                }\r\n                const cameraIsOrtho = camera.mode === Camera.ORTHOGRAPHIC_CAMERA;\r\n\r\n                if (!drawWrapper) {\r\n                    return;\r\n                }\r\n\r\n                const effect = drawWrapper.effect!;\r\n\r\n                engine.enableEffect(drawWrapper);\r\n\r\n                if (!hardwareInstancedRendering) {\r\n                    renderingMesh._bind(subMesh, effect, material.fillMode);\r\n                }\r\n\r\n                if (!renderingMaterial) {\r\n                    effect.setMatrix(\"viewProjection\", scene.getTransformMatrix());\r\n                    effect.setMatrix(\"world\", effectiveMesh.getWorldMatrix());\r\n                    if (this._storeCameraSpaceZ) {\r\n                        effect.setMatrix(\"view\", scene.getViewMatrix());\r\n                    }\r\n                } else {\r\n                    renderingMaterial.bindForSubMesh(effectiveMesh.getWorldMatrix(), effectiveMesh as Mesh, subMesh);\r\n                }\r\n\r\n                let minZ: number, maxZ: number;\r\n\r\n                if (cameraIsOrtho) {\r\n                    minZ = !engine.useReverseDepthBuffer && engine.isNDCHalfZRange ? 0 : 1;\r\n                    maxZ = engine.useReverseDepthBuffer && engine.isNDCHalfZRange ? 0 : 1;\r\n                } else {\r\n                    minZ = engine.useReverseDepthBuffer && engine.isNDCHalfZRange ? camera.minZ : engine.isNDCHalfZRange ? 0 : camera.minZ;\r\n                    maxZ = engine.useReverseDepthBuffer && engine.isNDCHalfZRange ? 0 : camera.maxZ;\r\n                }\r\n\r\n                effect.setFloat2(\"depthValues\", minZ, minZ + maxZ);\r\n\r\n                if (!renderingMaterial) {\r\n                    // Alpha test\r\n                    if (material.needAlphaTesting()) {\r\n                        const alphaTexture = material.getAlphaTestTexture();\r\n\r\n                        if (alphaTexture) {\r\n                            effect.setTexture(\"diffuseSampler\", alphaTexture);\r\n                            effect.setMatrix(\"diffuseMatrix\", alphaTexture.getTextureMatrix());\r\n                        }\r\n                    }\r\n\r\n                    // Bones\r\n                    if (renderingMesh.useBones && renderingMesh.computeBonesUsingShaders && renderingMesh.skeleton) {\r\n                        const skeleton = renderingMesh.skeleton;\r\n\r\n                        if (skeleton.isUsingTextureForMatrices) {\r\n                            const boneTexture = skeleton.getTransformMatrixTexture(renderingMesh);\r\n                            if (!boneTexture) {\r\n                                return;\r\n                            }\r\n\r\n                            effect.setTexture(\"boneSampler\", boneTexture);\r\n                            effect.setFloat(\"boneTextureWidth\", 4.0 * (skeleton.bones.length + 1));\r\n                        } else {\r\n                            effect.setMatrices(\"mBones\", skeleton.getTransformMatrices(renderingMesh));\r\n                        }\r\n                    }\r\n\r\n                    // Clip planes\r\n                    bindClipPlane(effect, material, scene);\r\n\r\n                    // Morph targets\r\n                    MaterialHelper.BindMorphTargetParameters(renderingMesh, effect);\r\n                    if (renderingMesh.morphTargetManager && renderingMesh.morphTargetManager.isUsingTextureForTargets) {\r\n                        renderingMesh.morphTargetManager._bind(effect);\r\n                    }\r\n\r\n                    // Points cloud rendering\r\n                    if (material.pointsCloud) {\r\n                        effect.setFloat(\"pointSize\", material.pointSize);\r\n                    }\r\n                }\r\n\r\n                // Draw\r\n                renderingMesh._processRendering(effectiveMesh, subMesh, effect, material.fillMode, batch, hardwareInstancedRendering, (isInstance, world) =>\r\n                    effect.setMatrix(\"world\", world)\r\n                );\r\n            }\r\n        };\r\n\r\n        this._depthMap.customRenderFunction = (\r\n            opaqueSubMeshes: SmartArray<SubMesh>,\r\n            alphaTestSubMeshes: SmartArray<SubMesh>,\r\n            transparentSubMeshes: SmartArray<SubMesh>,\r\n            depthOnlySubMeshes: SmartArray<SubMesh>\r\n        ): void => {\r\n            let index;\r\n\r\n            if (depthOnlySubMeshes.length) {\r\n                for (index = 0; index < depthOnlySubMeshes.length; index++) {\r\n                    renderSubMesh(depthOnlySubMeshes.data[index]);\r\n                }\r\n            }\r\n\r\n            for (index = 0; index < opaqueSubMeshes.length; index++) {\r\n                renderSubMesh(opaqueSubMeshes.data[index]);\r\n            }\r\n\r\n            for (index = 0; index < alphaTestSubMeshes.length; index++) {\r\n                renderSubMesh(alphaTestSubMeshes.data[index]);\r\n            }\r\n\r\n            if (this.forceDepthWriteTransparentMeshes) {\r\n                for (index = 0; index < transparentSubMeshes.length; index++) {\r\n                    renderSubMesh(transparentSubMeshes.data[index]);\r\n                }\r\n            } else {\r\n                for (index = 0; index < transparentSubMeshes.length; index++) {\r\n                    transparentSubMeshes.data[index].getEffectiveMesh()._internalAbstractMeshDataInfo._isActiveIntermediate = false;\r\n                }\r\n            }\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Creates the depth rendering effect and checks if the effect is ready.\r\n     * @param subMesh The submesh to be used to render the depth map of\r\n     * @param useInstances If multiple world instances should be used\r\n     * @returns if the depth renderer is ready to render the depth map\r\n     */\r\n    public isReady(subMesh: SubMesh, useInstances: boolean): boolean {\r\n        const engine = this._scene.getEngine();\r\n        const mesh = subMesh.getMesh();\r\n        const scene = mesh.getScene();\r\n\r\n        const renderingMaterial = mesh._internalAbstractMeshDataInfo._materialForRenderPass?.[engine.currentRenderPassId];\r\n\r\n        if (renderingMaterial) {\r\n            return renderingMaterial.isReadyForSubMesh(mesh, subMesh, useInstances);\r\n        }\r\n\r\n        const material = subMesh.getMaterial();\r\n        if (!material || material.disableDepthWrite) {\r\n            return false;\r\n        }\r\n\r\n        const defines = [];\r\n\r\n        const attribs = [VertexBuffer.PositionKind];\r\n\r\n        // Alpha test\r\n        if (material && material.needAlphaTesting() && material.getAlphaTestTexture()) {\r\n            defines.push(\"#define ALPHATEST\");\r\n            if (mesh.isVerticesDataPresent(VertexBuffer.UVKind)) {\r\n                attribs.push(VertexBuffer.UVKind);\r\n                defines.push(\"#define UV1\");\r\n            }\r\n            if (mesh.isVerticesDataPresent(VertexBuffer.UV2Kind)) {\r\n                attribs.push(VertexBuffer.UV2Kind);\r\n                defines.push(\"#define UV2\");\r\n            }\r\n        }\r\n\r\n        // Bones\r\n        if (mesh.useBones && mesh.computeBonesUsingShaders) {\r\n            attribs.push(VertexBuffer.MatricesIndicesKind);\r\n            attribs.push(VertexBuffer.MatricesWeightsKind);\r\n            if (mesh.numBoneInfluencers > 4) {\r\n                attribs.push(VertexBuffer.MatricesIndicesExtraKind);\r\n                attribs.push(VertexBuffer.MatricesWeightsExtraKind);\r\n            }\r\n            defines.push(\"#define NUM_BONE_INFLUENCERS \" + mesh.numBoneInfluencers);\r\n            defines.push(\"#define BonesPerMesh \" + (mesh.skeleton ? mesh.skeleton.bones.length + 1 : 0));\r\n\r\n            const skeleton = subMesh.getRenderingMesh().skeleton;\r\n\r\n            if (skeleton?.isUsingTextureForMatrices) {\r\n                defines.push(\"#define BONETEXTURE\");\r\n            }\r\n        } else {\r\n            defines.push(\"#define NUM_BONE_INFLUENCERS 0\");\r\n        }\r\n\r\n        // Morph targets\r\n        const morphTargetManager = (mesh as Mesh).morphTargetManager;\r\n        let numMorphInfluencers = 0;\r\n        if (morphTargetManager) {\r\n            if (morphTargetManager.numInfluencers > 0) {\r\n                numMorphInfluencers = morphTargetManager.numInfluencers;\r\n\r\n                defines.push(\"#define MORPHTARGETS\");\r\n                defines.push(\"#define NUM_MORPH_INFLUENCERS \" + numMorphInfluencers);\r\n\r\n                if (morphTargetManager.isUsingTextureForTargets) {\r\n                    defines.push(\"#define MORPHTARGETS_TEXTURE\");\r\n                }\r\n\r\n                MaterialHelper.PrepareAttributesForMorphTargetsInfluencers(attribs, mesh, numMorphInfluencers);\r\n            }\r\n        }\r\n\r\n        // Points cloud rendering\r\n        if (material.pointsCloud) {\r\n            defines.push(\"#define POINTSIZE\");\r\n        }\r\n\r\n        // Instances\r\n        if (useInstances) {\r\n            defines.push(\"#define INSTANCES\");\r\n            MaterialHelper.PushAttributesForInstances(attribs);\r\n            if (subMesh.getRenderingMesh().hasThinInstances) {\r\n                defines.push(\"#define THIN_INSTANCES\");\r\n            }\r\n        }\r\n\r\n        // None linear depth\r\n        if (this._storeNonLinearDepth) {\r\n            defines.push(\"#define NONLINEARDEPTH\");\r\n        }\r\n\r\n        // Store camera space Z coordinate instead of NDC Z\r\n        if (this._storeCameraSpaceZ) {\r\n            defines.push(\"#define STORE_CAMERASPACE_Z\");\r\n        }\r\n\r\n        // Float Mode\r\n        if (this.isPacked) {\r\n            defines.push(\"#define PACKED\");\r\n        }\r\n\r\n        // Clip planes\r\n        prepareStringDefinesForClipPlanes(material, scene, defines);\r\n\r\n        // Get correct effect\r\n        const drawWrapper = subMesh._getDrawWrapper(undefined, true)!;\r\n        const cachedDefines = drawWrapper.defines;\r\n        const join = defines.join(\"\\n\");\r\n        if (cachedDefines !== join) {\r\n            const uniforms = [\r\n                \"world\",\r\n                \"mBones\",\r\n                \"boneTextureWidth\",\r\n                \"pointSize\",\r\n                \"viewProjection\",\r\n                \"view\",\r\n                \"diffuseMatrix\",\r\n                \"depthValues\",\r\n                \"morphTargetInfluences\",\r\n                \"morphTargetTextureInfo\",\r\n                \"morphTargetTextureIndices\",\r\n            ];\r\n            addClipPlaneUniforms(uniforms);\r\n\r\n            drawWrapper.setEffect(\r\n                engine.createEffect(\"depth\", attribs, uniforms, [\"diffuseSampler\", \"morphTargets\", \"boneSampler\"], join, undefined, undefined, undefined, {\r\n                    maxSimultaneousMorphTargets: numMorphInfluencers,\r\n                }),\r\n                join\r\n            );\r\n        }\r\n\r\n        return drawWrapper.effect!.isReady();\r\n    }\r\n\r\n    /**\r\n     * Gets the texture which the depth map will be written to.\r\n     * @returns The depth map texture\r\n     */\r\n    public getDepthMap(): RenderTargetTexture {\r\n        return this._depthMap;\r\n    }\r\n\r\n    /**\r\n     * Disposes of the depth renderer.\r\n     */\r\n    public dispose(): void {\r\n        const keysToDelete = [];\r\n        for (const key in this._scene._depthRenderer) {\r\n            const depthRenderer = this._scene._depthRenderer[key];\r\n            if (depthRenderer === this) {\r\n                keysToDelete.push(key);\r\n            }\r\n        }\r\n\r\n        if (keysToDelete.length > 0) {\r\n            this._depthMap.dispose();\r\n\r\n            for (const key of keysToDelete) {\r\n                delete this._scene._depthRenderer[key];\r\n            }\r\n        }\r\n    }\r\n}\r\n", "// Do not edit.\nimport { ShaderStore } from \"../Engines/shaderStore\";\n\nconst name = \"minmaxReduxPixelShader\";\nconst shader = `varying vec2 vUV;uniform sampler2D textureSampler;\n#if defined(INITIAL)\nuniform sampler2D sourceTexture;uniform vec2 texSize;void main(void)\n{ivec2 coord=ivec2(vUV*(texSize-1.0));float f1=texelFetch(sourceTexture,coord,0).r;float f2=texelFetch(sourceTexture,coord+ivec2(1,0),0).r;float f3=texelFetch(sourceTexture,coord+ivec2(1,1),0).r;float f4=texelFetch(sourceTexture,coord+ivec2(0,1),0).r;float minz=min(min(min(f1,f2),f3),f4);\n#ifdef DEPTH_REDUX\nfloat maxz=max(max(max(sign(1.0-f1)*f1,sign(1.0-f2)*f2),sign(1.0-f3)*f3),sign(1.0-f4)*f4);\n#else\nfloat maxz=max(max(max(f1,f2),f3),f4);\n#endif\nglFragColor=vec4(minz,maxz,0.,0.);}\n#elif defined(MAIN)\nuniform vec2 texSize;void main(void)\n{ivec2 coord=ivec2(vUV*(texSize-1.0));vec2 f1=texelFetch(textureSampler,coord,0).rg;vec2 f2=texelFetch(textureSampler,coord+ivec2(1,0),0).rg;vec2 f3=texelFetch(textureSampler,coord+ivec2(1,1),0).rg;vec2 f4=texelFetch(textureSampler,coord+ivec2(0,1),0).rg;float minz=min(min(min(f1.x,f2.x),f3.x),f4.x);float maxz=max(max(max(f1.y,f2.y),f3.y),f4.y);glFragColor=vec4(minz,maxz,0.,0.);}\n#elif defined(ONEBEFORELAST)\nuniform ivec2 texSize;void main(void)\n{ivec2 coord=ivec2(vUV*vec2(texSize-1));vec2 f1=texelFetch(textureSampler,coord % texSize,0).rg;vec2 f2=texelFetch(textureSampler,(coord+ivec2(1,0)) % texSize,0).rg;vec2 f3=texelFetch(textureSampler,(coord+ivec2(1,1)) % texSize,0).rg;vec2 f4=texelFetch(textureSampler,(coord+ivec2(0,1)) % texSize,0).rg;float minz=min(f1.x,f2.x);float maxz=max(f1.y,f2.y);glFragColor=vec4(minz,maxz,0.,0.);}\n#elif defined(LAST)\nvoid main(void)\n{glFragColor=vec4(0.);if (true) { \ndiscard;}}\n#endif\n`;\n// Sideeffect\nShaderStore.ShadersStore[name] = shader;\n/** @internal */\nexport const minmaxReduxPixelShader = { name, shader };\n", "import type { Nullable } from \"../types\";\r\nimport type { RenderTargetTexture } from \"../Materials/Textures/renderTargetTexture\";\r\nimport type { Camera } from \"../Cameras/camera\";\r\nimport { Constants } from \"../Engines/constants\";\r\nimport type { Observer } from \"./observable\";\r\nimport { Observable } from \"./observable\";\r\nimport type { Effect } from \"../Materials/effect\";\r\nimport { PostProcess } from \"../PostProcesses/postProcess\";\r\nimport { PostProcessManager } from \"../PostProcesses/postProcessManager\";\r\n\r\nimport type { ThinEngine } from \"../Engines/thinEngine\";\r\n\r\nimport \"../Shaders/minmaxRedux.fragment\";\r\n\r\n/**\r\n * This class computes a min/max reduction from a texture: it means it computes the minimum\r\n * and maximum values from all values of the texture.\r\n * It is performed on the GPU for better performances, thanks to a succession of post processes.\r\n * The source values are read from the red channel of the texture.\r\n */\r\nexport class MinMaxReducer {\r\n    /**\r\n     * Observable triggered when the computation has been performed\r\n     */\r\n    public onAfterReductionPerformed = new Observable<{ min: number; max: number }>();\r\n\r\n    protected _camera: Camera;\r\n    protected _sourceTexture: Nullable<RenderTargetTexture>;\r\n    protected _reductionSteps: Nullable<Array<PostProcess>>;\r\n    protected _postProcessManager: PostProcessManager;\r\n    protected _onAfterUnbindObserver: Nullable<Observer<RenderTargetTexture>>;\r\n    protected _forceFullscreenViewport = true;\r\n    protected _onContextRestoredObserver: Nullable<Observer<ThinEngine>>;\r\n\r\n    /**\r\n     * Creates a min/max reducer\r\n     * @param camera The camera to use for the post processes\r\n     */\r\n    constructor(camera: Camera) {\r\n        this._camera = camera;\r\n        this._postProcessManager = new PostProcessManager(camera.getScene());\r\n\r\n        this._onContextRestoredObserver = camera.getEngine().onContextRestoredObservable.add(() => {\r\n            this._postProcessManager._rebuild();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Gets the texture used to read the values from.\r\n     */\r\n    public get sourceTexture(): Nullable<RenderTargetTexture> {\r\n        return this._sourceTexture;\r\n    }\r\n\r\n    /**\r\n     * Sets the source texture to read the values from.\r\n     * One must indicate if the texture is a depth texture or not through the depthRedux parameter\r\n     * because in such textures '1' value must not be taken into account to compute the maximum\r\n     * as this value is used to clear the texture.\r\n     * Note that the computation is not activated by calling this function, you must call activate() for that!\r\n     * @param sourceTexture The texture to read the values from. The values should be in the red channel.\r\n     * @param depthRedux Indicates if the texture is a depth texture or not\r\n     * @param type The type of the textures created for the reduction (defaults to TEXTURETYPE_HALF_FLOAT)\r\n     * @param forceFullscreenViewport Forces the post processes used for the reduction to be applied without taking into account viewport (defaults to true)\r\n     */\r\n    public setSourceTexture(sourceTexture: RenderTargetTexture, depthRedux: boolean, type: number = Constants.TEXTURETYPE_HALF_FLOAT, forceFullscreenViewport = true): void {\r\n        if (sourceTexture === this._sourceTexture) {\r\n            return;\r\n        }\r\n\r\n        this.dispose(false);\r\n\r\n        this._sourceTexture = sourceTexture;\r\n        this._reductionSteps = [];\r\n        this._forceFullscreenViewport = forceFullscreenViewport;\r\n\r\n        const scene = this._camera.getScene();\r\n\r\n        // create the first step\r\n        const reductionInitial = new PostProcess(\r\n            \"Initial reduction phase\",\r\n            \"minmaxRedux\", // shader\r\n            [\"texSize\"],\r\n            [\"sourceTexture\"], // textures\r\n            1.0, // options\r\n            null, // camera\r\n            Constants.TEXTURE_NEAREST_NEAREST, // sampling\r\n            scene.getEngine(), // engine\r\n            false, // reusable\r\n            \"#define INITIAL\" + (depthRedux ? \"\\n#define DEPTH_REDUX\" : \"\"), // defines\r\n            type,\r\n            undefined,\r\n            undefined,\r\n            undefined,\r\n            Constants.TEXTUREFORMAT_RG\r\n        );\r\n\r\n        reductionInitial.autoClear = false;\r\n        reductionInitial.forceFullscreenViewport = forceFullscreenViewport;\r\n\r\n        let w = this._sourceTexture.getRenderWidth(),\r\n            h = this._sourceTexture.getRenderHeight();\r\n\r\n        reductionInitial.onApply = ((w: number, h: number) => {\r\n            return (effect: Effect) => {\r\n                effect.setTexture(\"sourceTexture\", this._sourceTexture);\r\n                effect.setFloat2(\"texSize\", w, h);\r\n            };\r\n        })(w, h);\r\n\r\n        this._reductionSteps.push(reductionInitial);\r\n\r\n        let index = 1;\r\n\r\n        // create the additional steps\r\n        while (w > 1 || h > 1) {\r\n            w = Math.max(Math.round(w / 2), 1);\r\n            h = Math.max(Math.round(h / 2), 1);\r\n\r\n            const reduction = new PostProcess(\r\n                \"Reduction phase \" + index,\r\n                \"minmaxRedux\", // shader\r\n                [\"texSize\"],\r\n                null,\r\n                { width: w, height: h }, // options\r\n                null, // camera\r\n                Constants.TEXTURE_NEAREST_NEAREST, // sampling\r\n                scene.getEngine(), // engine\r\n                false, // reusable\r\n                \"#define \" + (w == 1 && h == 1 ? \"LAST\" : w == 1 || h == 1 ? \"ONEBEFORELAST\" : \"MAIN\"), // defines\r\n                type,\r\n                undefined,\r\n                undefined,\r\n                undefined,\r\n                Constants.TEXTUREFORMAT_RG\r\n            );\r\n\r\n            reduction.autoClear = false;\r\n            reduction.forceFullscreenViewport = forceFullscreenViewport;\r\n\r\n            reduction.onApply = ((w: number, h: number) => {\r\n                return (effect: Effect) => {\r\n                    if (w == 1 || h == 1) {\r\n                        effect.setInt2(\"texSize\", w, h);\r\n                    } else {\r\n                        effect.setFloat2(\"texSize\", w, h);\r\n                    }\r\n                };\r\n            })(w, h);\r\n\r\n            this._reductionSteps.push(reduction);\r\n\r\n            index++;\r\n\r\n            if (w == 1 && h == 1) {\r\n                const func = (w: number, h: number, reduction: PostProcess) => {\r\n                    const buffer = new Float32Array(4 * w * h),\r\n                        minmax = { min: 0, max: 0 };\r\n                    return () => {\r\n                        scene.getEngine()._readTexturePixels(reduction.inputTexture.texture!, w, h, -1, 0, buffer, false);\r\n                        minmax.min = buffer[0];\r\n                        minmax.max = buffer[1];\r\n                        this.onAfterReductionPerformed.notifyObservers(minmax);\r\n                    };\r\n                };\r\n                reduction.onAfterRenderObservable.add(func(w, h, reduction));\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Defines the refresh rate of the computation.\r\n     * Use 0 to compute just once, 1 to compute on every frame, 2 to compute every two frames and so on...\r\n     */\r\n    public get refreshRate(): number {\r\n        return this._sourceTexture ? this._sourceTexture.refreshRate : -1;\r\n    }\r\n\r\n    public set refreshRate(value: number) {\r\n        if (this._sourceTexture) {\r\n            this._sourceTexture.refreshRate = value;\r\n        }\r\n    }\r\n\r\n    protected _activated = false;\r\n\r\n    /**\r\n     * Gets the activation status of the reducer\r\n     */\r\n    public get activated(): boolean {\r\n        return this._activated;\r\n    }\r\n\r\n    /**\r\n     * Activates the reduction computation.\r\n     * When activated, the observers registered in onAfterReductionPerformed are\r\n     * called after the computation is performed\r\n     */\r\n    public activate(): void {\r\n        if (this._onAfterUnbindObserver || !this._sourceTexture) {\r\n            return;\r\n        }\r\n\r\n        this._onAfterUnbindObserver = this._sourceTexture.onAfterUnbindObservable.add(() => {\r\n            const engine = this._camera.getScene().getEngine();\r\n            engine._debugPushGroup?.(`min max reduction`, 1);\r\n            this._reductionSteps![0].activate(this._camera);\r\n            this._postProcessManager.directRender(this._reductionSteps!, this._reductionSteps![0].inputTexture, this._forceFullscreenViewport);\r\n            engine.unBindFramebuffer(this._reductionSteps![0].inputTexture, false);\r\n            engine._debugPopGroup?.(1);\r\n        });\r\n\r\n        this._activated = true;\r\n    }\r\n\r\n    /**\r\n     * Deactivates the reduction computation.\r\n     */\r\n    public deactivate(): void {\r\n        if (!this._onAfterUnbindObserver || !this._sourceTexture) {\r\n            return;\r\n        }\r\n\r\n        this._sourceTexture.onAfterUnbindObservable.remove(this._onAfterUnbindObserver);\r\n        this._onAfterUnbindObserver = null;\r\n        this._activated = false;\r\n    }\r\n\r\n    /**\r\n     * Disposes the min/max reducer\r\n     * @param disposeAll true to dispose all the resources. You should always call this function with true as the parameter (or without any parameter as it is the default one). This flag is meant to be used internally.\r\n     */\r\n    public dispose(disposeAll = true): void {\r\n        if (disposeAll) {\r\n            this.onAfterReductionPerformed.clear();\r\n\r\n            if (this._onContextRestoredObserver) {\r\n                this._camera.getEngine().onContextRestoredObservable.remove(this._onContextRestoredObserver);\r\n                this._onContextRestoredObserver = null;\r\n            }\r\n        }\r\n\r\n        this.deactivate();\r\n\r\n        if (this._reductionSteps) {\r\n            for (let i = 0; i < this._reductionSteps.length; ++i) {\r\n                this._reductionSteps[i].dispose();\r\n            }\r\n            this._reductionSteps = null;\r\n        }\r\n\r\n        if (this._postProcessManager && disposeAll) {\r\n            this._postProcessManager.dispose();\r\n        }\r\n\r\n        this._sourceTexture = null;\r\n    }\r\n}\r\n", "import type { Nullable } from \"../types\";\r\nimport type { RenderTargetTexture } from \"../Materials/Textures/renderTargetTexture\";\r\nimport type { Camera } from \"../Cameras/camera\";\r\nimport { Constants } from \"../Engines/constants\";\r\nimport { DepthRenderer } from \"../Rendering/depthRenderer\";\r\n\r\nimport { MinMaxReducer } from \"./minMaxReducer\";\r\n\r\n/**\r\n * This class is a small wrapper around the MinMaxReducer class to compute the min/max values of a depth texture\r\n */\r\nexport class DepthReducer extends MinMaxReducer {\r\n    private _depthRenderer: Nullable<DepthRenderer>;\r\n    private _depthRendererId: string;\r\n\r\n    /**\r\n     * Gets the depth renderer used for the computation.\r\n     * Note that the result is null if you provide your own renderer when calling setDepthRenderer.\r\n     */\r\n    public get depthRenderer(): Nullable<DepthRenderer> {\r\n        return this._depthRenderer;\r\n    }\r\n\r\n    /**\r\n     * Creates a depth reducer\r\n     * @param camera The camera used to render the depth texture\r\n     */\r\n    constructor(camera: Camera) {\r\n        super(camera);\r\n    }\r\n\r\n    /**\r\n     * Sets the depth renderer to use to generate the depth map\r\n     * @param depthRenderer The depth renderer to use. If not provided, a new one will be created automatically\r\n     * @param type The texture type of the depth map (default: TEXTURETYPE_HALF_FLOAT)\r\n     * @param forceFullscreenViewport Forces the post processes used for the reduction to be applied without taking into account viewport (defaults to true)\r\n     */\r\n    public setDepthRenderer(depthRenderer: Nullable<DepthRenderer> = null, type: number = Constants.TEXTURETYPE_HALF_FLOAT, forceFullscreenViewport = true): void {\r\n        const scene = this._camera.getScene();\r\n\r\n        if (this._depthRenderer) {\r\n            delete scene._depthRenderer[this._depthRendererId];\r\n\r\n            this._depthRenderer.dispose();\r\n            this._depthRenderer = null;\r\n        }\r\n\r\n        if (depthRenderer === null) {\r\n            if (!scene._depthRenderer) {\r\n                scene._depthRenderer = {};\r\n            }\r\n\r\n            depthRenderer = this._depthRenderer = new DepthRenderer(scene, type, this._camera, false, Constants.TEXTURE_NEAREST_SAMPLINGMODE);\r\n            depthRenderer.enabled = false;\r\n\r\n            this._depthRendererId = \"minmax\" + this._camera.id;\r\n            scene._depthRenderer[this._depthRendererId] = depthRenderer;\r\n        }\r\n\r\n        super.setSourceTexture(depthRenderer.getDepthMap(), true, type, forceFullscreenViewport);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public setSourceTexture(sourceTexture: RenderTargetTexture, depthRedux: boolean, type: number = Constants.TEXTURETYPE_HALF_FLOAT, forceFullscreenViewport = true): void {\r\n        super.setSourceTexture(sourceTexture, depthRedux, type, forceFullscreenViewport);\r\n    }\r\n\r\n    /**\r\n     * Activates the reduction computation.\r\n     * When activated, the observers registered in onAfterReductionPerformed are\r\n     * called after the computation is performed\r\n     */\r\n    public activate(): void {\r\n        if (this._depthRenderer) {\r\n            this._depthRenderer.enabled = true;\r\n        }\r\n\r\n        super.activate();\r\n    }\r\n\r\n    /**\r\n     * Deactivates the reduction computation.\r\n     */\r\n    public deactivate(): void {\r\n        super.deactivate();\r\n\r\n        if (this._depthRenderer) {\r\n            this._depthRenderer.enabled = false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Disposes the depth reducer\r\n     * @param disposeAll true to dispose all the resources. You should always call this function with true as the parameter (or without any parameter as it is the default one). This flag is meant to be used internally.\r\n     */\r\n    public dispose(disposeAll = true): void {\r\n        super.dispose(disposeAll);\r\n\r\n        if (this._depthRenderer && disposeAll) {\r\n            const scene = this._depthRenderer.getDepthMap().getScene();\r\n            if (scene) {\r\n                delete scene._depthRenderer[this._depthRendererId];\r\n            }\r\n\r\n            this._depthRenderer.dispose();\r\n            this._depthRenderer = null;\r\n        }\r\n    }\r\n}\r\n", "import type { Nullable } from \"../../types\";\r\nimport type { Scene } from \"../../scene\";\r\nimport { Matrix, Vector3 } from \"../../Maths/math.vector\";\r\nimport type { SubMesh } from \"../../Meshes/subMesh\";\r\n\r\nimport type { IShadowLight } from \"../../Lights/shadowLight\";\r\nimport type { Effect } from \"../../Materials/effect\";\r\nimport { RenderTargetTexture } from \"../../Materials/Textures/renderTargetTexture\";\r\n\r\nimport { Constants } from \"../../Engines/constants\";\r\n\r\nimport \"../../Shaders/shadowMap.fragment\";\r\nimport \"../../Shaders/shadowMap.vertex\";\r\nimport \"../../Shaders/depthBoxBlur.fragment\";\r\nimport type { Observer } from \"../../Misc/observable\";\r\nimport { _WarnImport } from \"../../Misc/devTools\";\r\nimport { ShadowGenerator } from \"./shadowGenerator\";\r\nimport type { DirectionalLight } from \"../directionalLight\";\r\n\r\nimport { BoundingInfo } from \"../../Culling/boundingInfo\";\r\nimport type { DepthRenderer } from \"../../Rendering/depthRenderer\";\r\nimport { DepthReducer } from \"../../Misc/depthReducer\";\r\n\r\nimport { Logger } from \"../../Misc/logger\";\r\nimport { EngineStore } from \"../../Engines/engineStore\";\r\nimport type { Camera } from \"../../Cameras/camera\";\r\n\r\ninterface ICascade {\r\n    prevBreakDistance: number;\r\n    breakDistance: number;\r\n}\r\n\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nconst UpDir = Vector3.Up();\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nconst ZeroVec = Vector3.Zero();\r\n\r\nconst tmpv1 = new Vector3(),\r\n    tmpv2 = new Vector3(),\r\n    tmpMatrix = new Matrix();\r\n\r\n/**\r\n * A CSM implementation allowing casting shadows on large scenes.\r\n * Documentation : https://doc.babylonjs.com/babylon101/cascadedShadows\r\n * Based on: https://github.com/TheRealMJP/Shadows and https://johanmedestrom.wordpress.com/2016/03/18/opengl-cascaded-shadow-maps/\r\n */\r\nexport class CascadedShadowGenerator extends ShadowGenerator {\r\n    private static readonly _FrustumCornersNDCSpace = [\r\n        new Vector3(-1.0, +1.0, -1.0),\r\n        new Vector3(+1.0, +1.0, -1.0),\r\n        new Vector3(+1.0, -1.0, -1.0),\r\n        new Vector3(-1.0, -1.0, -1.0),\r\n        new Vector3(-1.0, +1.0, +1.0),\r\n        new Vector3(+1.0, +1.0, +1.0),\r\n        new Vector3(+1.0, -1.0, +1.0),\r\n        new Vector3(-1.0, -1.0, +1.0),\r\n    ];\r\n\r\n    /**\r\n     * Name of the CSM class\r\n     */\r\n    public static CLASSNAME = \"CascadedShadowGenerator\";\r\n\r\n    /**\r\n     * Defines the default number of cascades used by the CSM.\r\n     */\r\n    public static readonly DEFAULT_CASCADES_COUNT = 4;\r\n    /**\r\n     * Defines the minimum number of cascades used by the CSM.\r\n     */\r\n    public static MIN_CASCADES_COUNT = 2;\r\n    /**\r\n     * Defines the maximum number of cascades used by the CSM.\r\n     */\r\n    public static MAX_CASCADES_COUNT = 4;\r\n\r\n    protected _validateFilter(filter: number): number {\r\n        if (filter === ShadowGenerator.FILTER_NONE || filter === ShadowGenerator.FILTER_PCF || filter === ShadowGenerator.FILTER_PCSS) {\r\n            return filter;\r\n        }\r\n\r\n        console.error('Unsupported filter \"' + filter + '\"!');\r\n\r\n        return ShadowGenerator.FILTER_NONE;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the actual darkness of the soft shadows while using PCSS filtering (value between 0. and 1.)\r\n     */\r\n    public penumbraDarkness: number;\r\n\r\n    private _numCascades: number;\r\n\r\n    /**\r\n     * Gets or set the number of cascades used by the CSM.\r\n     */\r\n    public get numCascades(): number {\r\n        return this._numCascades;\r\n    }\r\n\r\n    public set numCascades(value: number) {\r\n        value = Math.min(Math.max(value, CascadedShadowGenerator.MIN_CASCADES_COUNT), CascadedShadowGenerator.MAX_CASCADES_COUNT);\r\n        if (value === this._numCascades) {\r\n            return;\r\n        }\r\n\r\n        this._numCascades = value;\r\n        this.recreateShadowMap();\r\n        this._recreateSceneUBOs();\r\n    }\r\n\r\n    /**\r\n     * Sets this to true if you want that the edges of the shadows don't \"swimm\" / \"shimmer\" when rotating the camera.\r\n     * The trade off is that you lose some precision in the shadow rendering when enabling this setting.\r\n     */\r\n    public stabilizeCascades: boolean;\r\n\r\n    private _freezeShadowCastersBoundingInfo: boolean;\r\n    private _freezeShadowCastersBoundingInfoObservable: Nullable<Observer<Scene>>;\r\n\r\n    /**\r\n     * Enables or disables the shadow casters bounding info computation.\r\n     * If your shadow casters don't move, you can disable this feature.\r\n     * If it is enabled, the bounding box computation is done every frame.\r\n     */\r\n    public get freezeShadowCastersBoundingInfo(): boolean {\r\n        return this._freezeShadowCastersBoundingInfo;\r\n    }\r\n\r\n    public set freezeShadowCastersBoundingInfo(freeze: boolean) {\r\n        if (this._freezeShadowCastersBoundingInfoObservable && freeze) {\r\n            this._scene.onBeforeRenderObservable.remove(this._freezeShadowCastersBoundingInfoObservable);\r\n            this._freezeShadowCastersBoundingInfoObservable = null;\r\n        }\r\n\r\n        if (!this._freezeShadowCastersBoundingInfoObservable && !freeze) {\r\n            this._freezeShadowCastersBoundingInfoObservable = this._scene.onBeforeRenderObservable.add(() => this._computeShadowCastersBoundingInfo());\r\n        }\r\n\r\n        this._freezeShadowCastersBoundingInfo = freeze;\r\n\r\n        if (freeze) {\r\n            this._computeShadowCastersBoundingInfo();\r\n        }\r\n    }\r\n\r\n    private _scbiMin: Vector3;\r\n    private _scbiMax: Vector3;\r\n\r\n    protected _computeShadowCastersBoundingInfo(): void {\r\n        this._scbiMin.copyFromFloats(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);\r\n        this._scbiMax.copyFromFloats(-Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE);\r\n\r\n        if (this._shadowMap && this._shadowMap.renderList) {\r\n            const renderList = this._shadowMap.renderList;\r\n            for (let meshIndex = 0; meshIndex < renderList.length; meshIndex++) {\r\n                const mesh = renderList[meshIndex];\r\n\r\n                if (!mesh) {\r\n                    continue;\r\n                }\r\n\r\n                const boundingInfo = mesh.getBoundingInfo(),\r\n                    boundingBox = boundingInfo.boundingBox;\r\n\r\n                this._scbiMin.minimizeInPlace(boundingBox.minimumWorld);\r\n                this._scbiMax.maximizeInPlace(boundingBox.maximumWorld);\r\n            }\r\n\r\n            const meshes = this._scene.meshes;\r\n            for (let meshIndex = 0; meshIndex < meshes.length; meshIndex++) {\r\n                const mesh = meshes[meshIndex];\r\n\r\n                if (!mesh || !mesh.isVisible || !mesh.isEnabled || !mesh.receiveShadows) {\r\n                    continue;\r\n                }\r\n\r\n                const boundingInfo = mesh.getBoundingInfo(),\r\n                    boundingBox = boundingInfo.boundingBox;\r\n\r\n                this._scbiMin.minimizeInPlace(boundingBox.minimumWorld);\r\n                this._scbiMax.maximizeInPlace(boundingBox.maximumWorld);\r\n            }\r\n        }\r\n\r\n        this._shadowCastersBoundingInfo.reConstruct(this._scbiMin, this._scbiMax);\r\n    }\r\n\r\n    protected _shadowCastersBoundingInfo: BoundingInfo;\r\n\r\n    /**\r\n     * Gets or sets the shadow casters bounding info.\r\n     * If you provide your own shadow casters bounding info, first enable freezeShadowCastersBoundingInfo\r\n     * so that the system won't overwrite the bounds you provide\r\n     */\r\n    public get shadowCastersBoundingInfo(): BoundingInfo {\r\n        return this._shadowCastersBoundingInfo;\r\n    }\r\n\r\n    public set shadowCastersBoundingInfo(boundingInfo: BoundingInfo) {\r\n        this._shadowCastersBoundingInfo = boundingInfo;\r\n    }\r\n\r\n    protected _breaksAreDirty: boolean;\r\n\r\n    protected _minDistance: number;\r\n    protected _maxDistance: number;\r\n\r\n    /**\r\n     * Sets the minimal and maximal distances to use when computing the cascade breaks.\r\n     *\r\n     * The values of min / max are typically the depth zmin and zmax values of your scene, for a given frame.\r\n     * If you don't know these values, simply leave them to their defaults and don't call this function.\r\n     * @param min minimal distance for the breaks (default to 0.)\r\n     * @param max maximal distance for the breaks (default to 1.)\r\n     */\r\n    public setMinMaxDistance(min: number, max: number): void {\r\n        if (this._minDistance === min && this._maxDistance === max) {\r\n            return;\r\n        }\r\n\r\n        if (min > max) {\r\n            min = 0;\r\n            max = 1;\r\n        }\r\n\r\n        if (min < 0) {\r\n            min = 0;\r\n        }\r\n\r\n        if (max > 1) {\r\n            max = 1;\r\n        }\r\n\r\n        this._minDistance = min;\r\n        this._maxDistance = max;\r\n        this._breaksAreDirty = true;\r\n    }\r\n\r\n    /** Gets the minimal distance used in the cascade break computation */\r\n    public get minDistance(): number {\r\n        return this._minDistance;\r\n    }\r\n\r\n    /** Gets the maximal distance used in the cascade break computation */\r\n    public get maxDistance(): number {\r\n        return this._maxDistance;\r\n    }\r\n\r\n    /**\r\n     * Gets the class name of that object\r\n     * @returns \"CascadedShadowGenerator\"\r\n     */\r\n    public getClassName(): string {\r\n        return CascadedShadowGenerator.CLASSNAME;\r\n    }\r\n\r\n    private _cascadeMinExtents: Array<Vector3>;\r\n    private _cascadeMaxExtents: Array<Vector3>;\r\n\r\n    /**\r\n     * Gets a cascade minimum extents\r\n     * @param cascadeIndex index of the cascade\r\n     * @returns the minimum cascade extents\r\n     */\r\n    public getCascadeMinExtents(cascadeIndex: number): Nullable<Vector3> {\r\n        return cascadeIndex >= 0 && cascadeIndex < this._numCascades ? this._cascadeMinExtents[cascadeIndex] : null;\r\n    }\r\n\r\n    /**\r\n     * Gets a cascade maximum extents\r\n     * @param cascadeIndex index of the cascade\r\n     * @returns the maximum cascade extents\r\n     */\r\n    public getCascadeMaxExtents(cascadeIndex: number): Nullable<Vector3> {\r\n        return cascadeIndex >= 0 && cascadeIndex < this._numCascades ? this._cascadeMaxExtents[cascadeIndex] : null;\r\n    }\r\n\r\n    private _cascades: Array<ICascade>;\r\n    private _currentLayer: number;\r\n    private _viewSpaceFrustumsZ: Array<number>;\r\n    private _viewMatrices: Array<Matrix>;\r\n    private _projectionMatrices: Array<Matrix>;\r\n    private _transformMatrices: Array<Matrix>;\r\n    private _transformMatricesAsArray: Float32Array;\r\n    private _frustumLengths: Array<number>;\r\n    private _lightSizeUVCorrection: Array<number>;\r\n    private _depthCorrection: Array<number>;\r\n    private _frustumCornersWorldSpace: Array<Array<Vector3>>;\r\n    private _frustumCenter: Array<Vector3>;\r\n    private _shadowCameraPos: Array<Vector3>;\r\n\r\n    private _shadowMaxZ: number;\r\n    /**\r\n     * Gets the shadow max z distance. It's the limit beyond which shadows are not displayed.\r\n     * It defaults to camera.maxZ\r\n     */\r\n    public get shadowMaxZ(): number {\r\n        if (!this._getCamera()) {\r\n            return 0;\r\n        }\r\n        return this._shadowMaxZ;\r\n    }\r\n    /**\r\n     * Sets the shadow max z distance.\r\n     */\r\n    public set shadowMaxZ(value: number) {\r\n        const camera = this._getCamera();\r\n        if (!camera) {\r\n            this._shadowMaxZ = value;\r\n            return;\r\n        }\r\n        if (this._shadowMaxZ === value || value < camera.minZ || (value > camera.maxZ && camera.maxZ !== 0)) {\r\n            return;\r\n        }\r\n        this._shadowMaxZ = value;\r\n        this._light._markMeshesAsLightDirty();\r\n        this._breaksAreDirty = true;\r\n    }\r\n\r\n    protected _debug: boolean;\r\n\r\n    /**\r\n     * Gets or sets the debug flag.\r\n     * When enabled, the cascades are materialized by different colors on the screen.\r\n     */\r\n    public get debug(): boolean {\r\n        return this._debug;\r\n    }\r\n\r\n    public set debug(dbg: boolean) {\r\n        this._debug = dbg;\r\n        this._light._markMeshesAsLightDirty();\r\n    }\r\n\r\n    private _depthClamp: boolean;\r\n\r\n    /**\r\n     * Gets or sets the depth clamping value.\r\n     *\r\n     * When enabled, it improves the shadow quality because the near z plane of the light frustum don't need to be adjusted\r\n     * to account for the shadow casters far away.\r\n     *\r\n     * Note that this property is incompatible with PCSS filtering, so it won't be used in that case.\r\n     */\r\n    public get depthClamp(): boolean {\r\n        return this._depthClamp;\r\n    }\r\n\r\n    public set depthClamp(value: boolean) {\r\n        this._depthClamp = value;\r\n    }\r\n\r\n    private _cascadeBlendPercentage: number;\r\n\r\n    /**\r\n     * Gets or sets the percentage of blending between two cascades (value between 0. and 1.).\r\n     * It defaults to 0.1 (10% blending).\r\n     */\r\n    public get cascadeBlendPercentage(): number {\r\n        return this._cascadeBlendPercentage;\r\n    }\r\n\r\n    public set cascadeBlendPercentage(value: number) {\r\n        this._cascadeBlendPercentage = value;\r\n        this._light._markMeshesAsLightDirty();\r\n    }\r\n\r\n    private _lambda: number;\r\n\r\n    /**\r\n     * Gets or set the lambda parameter.\r\n     * This parameter is used to split the camera frustum and create the cascades.\r\n     * It's a value between 0. and 1.: If 0, the split is a uniform split of the frustum, if 1 it is a logarithmic split.\r\n     * For all values in-between, it's a linear combination of the uniform and logarithm split algorithm.\r\n     */\r\n    public get lambda(): number {\r\n        return this._lambda;\r\n    }\r\n\r\n    public set lambda(value: number) {\r\n        const lambda = Math.min(Math.max(value, 0), 1);\r\n        if (this._lambda == lambda) {\r\n            return;\r\n        }\r\n        this._lambda = lambda;\r\n        this._breaksAreDirty = true;\r\n    }\r\n\r\n    /**\r\n     * Gets the view matrix corresponding to a given cascade\r\n     * @param cascadeNum cascade to retrieve the view matrix from\r\n     * @returns the cascade view matrix\r\n     */\r\n    public getCascadeViewMatrix(cascadeNum: number): Nullable<Matrix> {\r\n        return cascadeNum >= 0 && cascadeNum < this._numCascades ? this._viewMatrices[cascadeNum] : null;\r\n    }\r\n\r\n    /**\r\n     * Gets the projection matrix corresponding to a given cascade\r\n     * @param cascadeNum cascade to retrieve the projection matrix from\r\n     * @returns the cascade projection matrix\r\n     */\r\n    public getCascadeProjectionMatrix(cascadeNum: number): Nullable<Matrix> {\r\n        return cascadeNum >= 0 && cascadeNum < this._numCascades ? this._projectionMatrices[cascadeNum] : null;\r\n    }\r\n\r\n    /**\r\n     * Gets the transformation matrix corresponding to a given cascade\r\n     * @param cascadeNum cascade to retrieve the transformation matrix from\r\n     * @returns the cascade transformation matrix\r\n     */\r\n    public getCascadeTransformMatrix(cascadeNum: number): Nullable<Matrix> {\r\n        return cascadeNum >= 0 && cascadeNum < this._numCascades ? this._transformMatrices[cascadeNum] : null;\r\n    }\r\n\r\n    private _depthRenderer: Nullable<DepthRenderer>;\r\n    /**\r\n     * Sets the depth renderer to use when autoCalcDepthBounds is enabled.\r\n     *\r\n     * Note that if no depth renderer is set, a new one will be automatically created internally when necessary.\r\n     *\r\n     * You should call this function if you already have a depth renderer enabled in your scene, to avoid\r\n     * doing multiple depth rendering each frame. If you provide your own depth renderer, make sure it stores linear depth!\r\n     * @param depthRenderer The depth renderer to use when autoCalcDepthBounds is enabled. If you pass null or don't call this function at all, a depth renderer will be automatically created\r\n     */\r\n    public setDepthRenderer(depthRenderer: Nullable<DepthRenderer>): void {\r\n        this._depthRenderer = depthRenderer;\r\n\r\n        if (this._depthReducer) {\r\n            this._depthReducer.setDepthRenderer(this._depthRenderer);\r\n        }\r\n    }\r\n\r\n    private _depthReducer: Nullable<DepthReducer>;\r\n    private _autoCalcDepthBounds: boolean;\r\n\r\n    /**\r\n     * Gets or sets the autoCalcDepthBounds property.\r\n     *\r\n     * When enabled, a depth rendering pass is first performed (with an internally created depth renderer or with the one\r\n     * you provide by calling setDepthRenderer). Then, a min/max reducing is applied on the depth map to compute the\r\n     * minimal and maximal depth of the map and those values are used as inputs for the setMinMaxDistance() function.\r\n     * It can greatly enhance the shadow quality, at the expense of more GPU works.\r\n     * When using this option, you should increase the value of the lambda parameter, and even set it to 1 for best results.\r\n     */\r\n    public get autoCalcDepthBounds(): boolean {\r\n        return this._autoCalcDepthBounds;\r\n    }\r\n\r\n    public set autoCalcDepthBounds(value: boolean) {\r\n        const camera = this._getCamera();\r\n\r\n        if (!camera) {\r\n            return;\r\n        }\r\n\r\n        this._autoCalcDepthBounds = value;\r\n\r\n        if (!value) {\r\n            if (this._depthReducer) {\r\n                this._depthReducer.deactivate();\r\n            }\r\n            this.setMinMaxDistance(0, 1);\r\n            return;\r\n        }\r\n\r\n        if (!this._depthReducer) {\r\n            this._depthReducer = new DepthReducer(camera);\r\n            this._depthReducer.onAfterReductionPerformed.add((minmax: { min: number; max: number }) => {\r\n                let min = minmax.min,\r\n                    max = minmax.max;\r\n                if (min >= max) {\r\n                    min = 0;\r\n                    max = 1;\r\n                }\r\n                if (min != this._minDistance || max != this._maxDistance) {\r\n                    this.setMinMaxDistance(min, max);\r\n                }\r\n            });\r\n            this._depthReducer.setDepthRenderer(this._depthRenderer);\r\n        }\r\n\r\n        this._depthReducer.activate();\r\n    }\r\n\r\n    /**\r\n     * Defines the refresh rate of the min/max computation used when autoCalcDepthBounds is set to true\r\n     * Use 0 to compute just once, 1 to compute on every frame, 2 to compute every two frames and so on...\r\n     * Note that if you provided your own depth renderer through a call to setDepthRenderer, you are responsible\r\n     * for setting the refresh rate on the renderer yourself!\r\n     */\r\n    public get autoCalcDepthBoundsRefreshRate(): number {\r\n        return this._depthReducer?.depthRenderer?.getDepthMap().refreshRate ?? -1;\r\n    }\r\n\r\n    public set autoCalcDepthBoundsRefreshRate(value: number) {\r\n        if (this._depthReducer?.depthRenderer) {\r\n            this._depthReducer.depthRenderer.getDepthMap().refreshRate = value;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Create the cascade breaks according to the lambda, shadowMaxZ and min/max distance properties, as well as the camera near and far planes.\r\n     * This function is automatically called when updating lambda, shadowMaxZ and min/max distances, however you should call it yourself if\r\n     * you change the camera near/far planes!\r\n     */\r\n    public splitFrustum(): void {\r\n        this._breaksAreDirty = true;\r\n    }\r\n\r\n    private _splitFrustum(): void {\r\n        const camera = this._getCamera();\r\n        if (!camera) {\r\n            return;\r\n        }\r\n\r\n        const near = camera.minZ,\r\n            far = camera.maxZ || this._shadowMaxZ, // account for infinite far plane (ie. maxZ = 0)\r\n            cameraRange = far - near,\r\n            minDistance = this._minDistance,\r\n            maxDistance = this._shadowMaxZ < far && this._shadowMaxZ >= near ? Math.min((this._shadowMaxZ - near) / (far - near), this._maxDistance) : this._maxDistance;\r\n\r\n        const minZ = near + minDistance * cameraRange,\r\n            maxZ = near + maxDistance * cameraRange;\r\n\r\n        const range = maxZ - minZ,\r\n            ratio = maxZ / minZ;\r\n\r\n        for (let cascadeIndex = 0; cascadeIndex < this._cascades.length; ++cascadeIndex) {\r\n            const p = (cascadeIndex + 1) / this._numCascades,\r\n                log = minZ * ratio ** p,\r\n                uniform = minZ + range * p;\r\n\r\n            const d = this._lambda * (log - uniform) + uniform;\r\n\r\n            this._cascades[cascadeIndex].prevBreakDistance = cascadeIndex === 0 ? minDistance : this._cascades[cascadeIndex - 1].breakDistance;\r\n            this._cascades[cascadeIndex].breakDistance = (d - near) / cameraRange;\r\n\r\n            this._viewSpaceFrustumsZ[cascadeIndex] = d;\r\n            this._frustumLengths[cascadeIndex] = (this._cascades[cascadeIndex].breakDistance - this._cascades[cascadeIndex].prevBreakDistance) * cameraRange;\r\n        }\r\n\r\n        this._breaksAreDirty = false;\r\n    }\r\n\r\n    private _computeMatrices(): void {\r\n        const scene = this._scene;\r\n\r\n        const camera = this._getCamera();\r\n        if (!camera) {\r\n            return;\r\n        }\r\n\r\n        Vector3.NormalizeToRef(this._light.getShadowDirection(0), this._lightDirection);\r\n        if (Math.abs(Vector3.Dot(this._lightDirection, Vector3.Up())) === 1.0) {\r\n            this._lightDirection.z = 0.0000000000001; // Required to avoid perfectly perpendicular light\r\n        }\r\n\r\n        this._cachedDirection.copyFrom(this._lightDirection);\r\n\r\n        const useReverseDepthBuffer = scene.getEngine().useReverseDepthBuffer;\r\n\r\n        for (let cascadeIndex = 0; cascadeIndex < this._numCascades; ++cascadeIndex) {\r\n            this._computeFrustumInWorldSpace(cascadeIndex);\r\n            this._computeCascadeFrustum(cascadeIndex);\r\n\r\n            this._cascadeMaxExtents[cascadeIndex].subtractToRef(this._cascadeMinExtents[cascadeIndex], tmpv1); // tmpv1 = cascadeExtents\r\n\r\n            // Get position of the shadow camera\r\n            this._frustumCenter[cascadeIndex].addToRef(this._lightDirection.scale(this._cascadeMinExtents[cascadeIndex].z), this._shadowCameraPos[cascadeIndex]);\r\n\r\n            // Come up with a new orthographic camera for the shadow caster\r\n            Matrix.LookAtLHToRef(this._shadowCameraPos[cascadeIndex], this._frustumCenter[cascadeIndex], UpDir, this._viewMatrices[cascadeIndex]);\r\n\r\n            let minZ = 0,\r\n                maxZ = tmpv1.z;\r\n\r\n            // Try to tighten minZ and maxZ based on the bounding box of the shadow casters\r\n            const boundingInfo = this._shadowCastersBoundingInfo;\r\n\r\n            boundingInfo.update(this._viewMatrices[cascadeIndex]);\r\n\r\n            maxZ = Math.min(maxZ, boundingInfo.boundingBox.maximumWorld.z);\r\n\r\n            if (!this._depthClamp || this.filter === ShadowGenerator.FILTER_PCSS) {\r\n                // If we don't use depth clamping, we must set minZ so that all shadow casters are in the light frustum\r\n                minZ = Math.min(minZ, boundingInfo.boundingBox.minimumWorld.z);\r\n            } else {\r\n                // If using depth clamping, we can adjust minZ to reduce the [minZ, maxZ] range (and get some additional precision in the shadow map)\r\n                minZ = Math.max(minZ, boundingInfo.boundingBox.minimumWorld.z);\r\n            }\r\n\r\n            Matrix.OrthoOffCenterLHToRef(\r\n                this._cascadeMinExtents[cascadeIndex].x,\r\n                this._cascadeMaxExtents[cascadeIndex].x,\r\n                this._cascadeMinExtents[cascadeIndex].y,\r\n                this._cascadeMaxExtents[cascadeIndex].y,\r\n                useReverseDepthBuffer ? maxZ : minZ,\r\n                useReverseDepthBuffer ? minZ : maxZ,\r\n                this._projectionMatrices[cascadeIndex],\r\n                scene.getEngine().isNDCHalfZRange\r\n            );\r\n\r\n            this._cascadeMinExtents[cascadeIndex].z = minZ;\r\n            this._cascadeMaxExtents[cascadeIndex].z = maxZ;\r\n\r\n            this._viewMatrices[cascadeIndex].multiplyToRef(this._projectionMatrices[cascadeIndex], this._transformMatrices[cascadeIndex]);\r\n\r\n            // Create the rounding matrix, by projecting the world-space origin and determining\r\n            // the fractional offset in texel space\r\n            Vector3.TransformCoordinatesToRef(ZeroVec, this._transformMatrices[cascadeIndex], tmpv1); // tmpv1 = shadowOrigin\r\n            tmpv1.scaleInPlace(this._mapSize / 2);\r\n\r\n            tmpv2.copyFromFloats(Math.round(tmpv1.x), Math.round(tmpv1.y), Math.round(tmpv1.z)); // tmpv2 = roundedOrigin\r\n            tmpv2.subtractInPlace(tmpv1).scaleInPlace(2 / this._mapSize); // tmpv2 = roundOffset\r\n\r\n            Matrix.TranslationToRef(tmpv2.x, tmpv2.y, 0.0, tmpMatrix);\r\n\r\n            this._projectionMatrices[cascadeIndex].multiplyToRef(tmpMatrix, this._projectionMatrices[cascadeIndex]);\r\n            this._viewMatrices[cascadeIndex].multiplyToRef(this._projectionMatrices[cascadeIndex], this._transformMatrices[cascadeIndex]);\r\n\r\n            this._transformMatrices[cascadeIndex].copyToArray(this._transformMatricesAsArray, cascadeIndex * 16);\r\n        }\r\n    }\r\n\r\n    // Get the 8 points of the view frustum in world space\r\n    private _computeFrustumInWorldSpace(cascadeIndex: number): void {\r\n        const camera = this._getCamera();\r\n        if (!camera) {\r\n            return;\r\n        }\r\n\r\n        const prevSplitDist = this._cascades[cascadeIndex].prevBreakDistance,\r\n            splitDist = this._cascades[cascadeIndex].breakDistance;\r\n\r\n        const isNDCHalfZRange = this._scene.getEngine().isNDCHalfZRange;\r\n\r\n        camera.getViewMatrix(); // make sure the transformation matrix we get when calling 'getTransformationMatrix()' is calculated with an up to date view matrix\r\n\r\n        const cameraInfiniteFarPlane = camera.maxZ === 0;\r\n        const saveCameraMaxZ = camera.maxZ;\r\n\r\n        if (cameraInfiniteFarPlane) {\r\n            camera.maxZ = this._shadowMaxZ;\r\n            camera.getProjectionMatrix(true);\r\n        }\r\n\r\n        const invViewProj = Matrix.Invert(camera.getTransformationMatrix());\r\n\r\n        if (cameraInfiniteFarPlane) {\r\n            camera.maxZ = saveCameraMaxZ;\r\n            camera.getProjectionMatrix(true);\r\n        }\r\n\r\n        const cornerIndexOffset = this._scene.getEngine().useReverseDepthBuffer ? 4 : 0;\r\n        for (let cornerIndex = 0; cornerIndex < CascadedShadowGenerator._FrustumCornersNDCSpace.length; ++cornerIndex) {\r\n            tmpv1.copyFrom(CascadedShadowGenerator._FrustumCornersNDCSpace[(cornerIndex + cornerIndexOffset) % CascadedShadowGenerator._FrustumCornersNDCSpace.length]);\r\n            if (isNDCHalfZRange && tmpv1.z === -1) {\r\n                tmpv1.z = 0;\r\n            }\r\n            Vector3.TransformCoordinatesToRef(tmpv1, invViewProj, this._frustumCornersWorldSpace[cascadeIndex][cornerIndex]);\r\n        }\r\n\r\n        // Get the corners of the current cascade slice of the view frustum\r\n        for (let cornerIndex = 0; cornerIndex < CascadedShadowGenerator._FrustumCornersNDCSpace.length / 2; ++cornerIndex) {\r\n            tmpv1.copyFrom(this._frustumCornersWorldSpace[cascadeIndex][cornerIndex + 4]).subtractInPlace(this._frustumCornersWorldSpace[cascadeIndex][cornerIndex]);\r\n            tmpv2.copyFrom(tmpv1).scaleInPlace(prevSplitDist); // near corner ray\r\n            tmpv1.scaleInPlace(splitDist); // far corner ray\r\n\r\n            tmpv1.addInPlace(this._frustumCornersWorldSpace[cascadeIndex][cornerIndex]);\r\n\r\n            this._frustumCornersWorldSpace[cascadeIndex][cornerIndex + 4].copyFrom(tmpv1);\r\n            this._frustumCornersWorldSpace[cascadeIndex][cornerIndex].addInPlace(tmpv2);\r\n        }\r\n    }\r\n\r\n    private _computeCascadeFrustum(cascadeIndex: number): void {\r\n        this._cascadeMinExtents[cascadeIndex].copyFromFloats(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);\r\n        this._cascadeMaxExtents[cascadeIndex].copyFromFloats(-Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE);\r\n        this._frustumCenter[cascadeIndex].copyFromFloats(0, 0, 0);\r\n\r\n        const camera = this._getCamera();\r\n\r\n        if (!camera) {\r\n            return;\r\n        }\r\n\r\n        // Calculate the centroid of the view frustum slice\r\n        for (let cornerIndex = 0; cornerIndex < this._frustumCornersWorldSpace[cascadeIndex].length; ++cornerIndex) {\r\n            this._frustumCenter[cascadeIndex].addInPlace(this._frustumCornersWorldSpace[cascadeIndex][cornerIndex]);\r\n        }\r\n\r\n        this._frustumCenter[cascadeIndex].scaleInPlace(1 / this._frustumCornersWorldSpace[cascadeIndex].length);\r\n\r\n        if (this.stabilizeCascades) {\r\n            // Calculate the radius of a bounding sphere surrounding the frustum corners\r\n            let sphereRadius = 0;\r\n            for (let cornerIndex = 0; cornerIndex < this._frustumCornersWorldSpace[cascadeIndex].length; ++cornerIndex) {\r\n                const dist = this._frustumCornersWorldSpace[cascadeIndex][cornerIndex].subtractToRef(this._frustumCenter[cascadeIndex], tmpv1).length();\r\n                sphereRadius = Math.max(sphereRadius, dist);\r\n            }\r\n\r\n            sphereRadius = Math.ceil(sphereRadius * 16) / 16;\r\n\r\n            this._cascadeMaxExtents[cascadeIndex].copyFromFloats(sphereRadius, sphereRadius, sphereRadius);\r\n            this._cascadeMinExtents[cascadeIndex].copyFromFloats(-sphereRadius, -sphereRadius, -sphereRadius);\r\n        } else {\r\n            // Create a temporary view matrix for the light\r\n            const lightCameraPos = this._frustumCenter[cascadeIndex];\r\n\r\n            this._frustumCenter[cascadeIndex].addToRef(this._lightDirection, tmpv1); // tmpv1 = look at\r\n\r\n            Matrix.LookAtLHToRef(lightCameraPos, tmpv1, UpDir, tmpMatrix); // matrix = lightView\r\n\r\n            // Calculate an AABB around the frustum corners\r\n            for (let cornerIndex = 0; cornerIndex < this._frustumCornersWorldSpace[cascadeIndex].length; ++cornerIndex) {\r\n                Vector3.TransformCoordinatesToRef(this._frustumCornersWorldSpace[cascadeIndex][cornerIndex], tmpMatrix, tmpv1);\r\n\r\n                this._cascadeMinExtents[cascadeIndex].minimizeInPlace(tmpv1);\r\n                this._cascadeMaxExtents[cascadeIndex].maximizeInPlace(tmpv1);\r\n            }\r\n        }\r\n    }\r\n\r\n    protected _recreateSceneUBOs(): void {\r\n        this._disposeSceneUBOs();\r\n        if (this._sceneUBOs) {\r\n            for (let i = 0; i < this._numCascades; ++i) {\r\n                this._sceneUBOs.push(this._scene.createSceneUniformBuffer(`Scene for CSM Shadow Generator (light \"${this._light.name}\" cascade #${i})`));\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     *  Support test.\r\n     */\r\n    public static get IsSupported(): boolean {\r\n        const engine = EngineStore.LastCreatedEngine;\r\n        if (!engine) {\r\n            return false;\r\n        }\r\n        return engine._features.supportCSM;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public static _SceneComponentInitialization: (scene: Scene) => void = (_) => {\r\n        throw _WarnImport(\"ShadowGeneratorSceneComponent\");\r\n    };\r\n\r\n    /**\r\n     * Creates a Cascaded Shadow Generator object.\r\n     * A ShadowGenerator is the required tool to use the shadows.\r\n     * Each directional light casting shadows needs to use its own ShadowGenerator.\r\n     * Documentation : https://doc.babylonjs.com/babylon101/cascadedShadows\r\n     * @param mapSize The size of the texture what stores the shadows. Example : 1024.\r\n     * @param light The directional light object generating the shadows.\r\n     * @param usefulFloatFirst By default the generator will try to use half float textures but if you need precision (for self shadowing for instance), you can use this option to enforce full float texture.\r\n     * @param camera Camera associated with this shadow generator (default: null). If null, takes the scene active camera at the time we need to access it\r\n     * @param useRedTextureType Forces the generator to use a Red instead of a RGBA type for the shadow map texture format (default: true)\r\n     */\r\n    constructor(mapSize: number, light: DirectionalLight, usefulFloatFirst?: boolean, camera?: Nullable<Camera>, useRedTextureType = true) {\r\n        if (!CascadedShadowGenerator.IsSupported) {\r\n            Logger.Error(\"CascadedShadowMap is not supported by the current engine.\");\r\n            return;\r\n        }\r\n\r\n        super(mapSize, light, usefulFloatFirst, camera, useRedTextureType);\r\n\r\n        this.usePercentageCloserFiltering = true;\r\n    }\r\n\r\n    protected _initializeGenerator(): void {\r\n        this.penumbraDarkness = this.penumbraDarkness ?? 1.0;\r\n        this._numCascades = this._numCascades ?? CascadedShadowGenerator.DEFAULT_CASCADES_COUNT;\r\n        this.stabilizeCascades = this.stabilizeCascades ?? false;\r\n        this._freezeShadowCastersBoundingInfoObservable = this._freezeShadowCastersBoundingInfoObservable ?? null;\r\n        this.freezeShadowCastersBoundingInfo = this.freezeShadowCastersBoundingInfo ?? false;\r\n        this._scbiMin = this._scbiMin ?? new Vector3(0, 0, 0);\r\n        this._scbiMax = this._scbiMax ?? new Vector3(0, 0, 0);\r\n        this._shadowCastersBoundingInfo = this._shadowCastersBoundingInfo ?? new BoundingInfo(new Vector3(0, 0, 0), new Vector3(0, 0, 0));\r\n        this._breaksAreDirty = this._breaksAreDirty ?? true;\r\n        this._minDistance = this._minDistance ?? 0;\r\n        this._maxDistance = this._maxDistance ?? 1;\r\n        this._currentLayer = this._currentLayer ?? 0;\r\n        this._shadowMaxZ = this._shadowMaxZ ?? this._getCamera()?.maxZ ?? 10000;\r\n        this._debug = this._debug ?? false;\r\n        this._depthClamp = this._depthClamp ?? true;\r\n        this._cascadeBlendPercentage = this._cascadeBlendPercentage ?? 0.1;\r\n        this._lambda = this._lambda ?? 0.5;\r\n        this._autoCalcDepthBounds = this._autoCalcDepthBounds ?? false;\r\n\r\n        this._recreateSceneUBOs();\r\n\r\n        super._initializeGenerator();\r\n    }\r\n\r\n    protected _createTargetRenderTexture(): void {\r\n        const engine = this._scene.getEngine();\r\n        const size = { width: this._mapSize, height: this._mapSize, layers: this.numCascades };\r\n        this._shadowMap = new RenderTargetTexture(\r\n            this._light.name + \"_CSMShadowMap\",\r\n            size,\r\n            this._scene,\r\n            false,\r\n            true,\r\n            this._textureType,\r\n            false,\r\n            undefined,\r\n            false,\r\n            false,\r\n            undefined,\r\n            this._useRedTextureType ? Constants.TEXTUREFORMAT_RED : Constants.TEXTUREFORMAT_RGBA\r\n        );\r\n        this._shadowMap.createDepthStencilTexture(engine.useReverseDepthBuffer ? Constants.GREATER : Constants.LESS, true);\r\n        this._shadowMap.noPrePassRenderer = true;\r\n    }\r\n\r\n    protected _initializeShadowMap(): void {\r\n        super._initializeShadowMap();\r\n\r\n        if (this._shadowMap === null) {\r\n            return;\r\n        }\r\n\r\n        this._transformMatricesAsArray = new Float32Array(this._numCascades * 16);\r\n        this._viewSpaceFrustumsZ = new Array(this._numCascades);\r\n        this._frustumLengths = new Array(this._numCascades);\r\n        this._lightSizeUVCorrection = new Array(this._numCascades * 2);\r\n        this._depthCorrection = new Array(this._numCascades);\r\n\r\n        this._cascades = [];\r\n        this._viewMatrices = [];\r\n        this._projectionMatrices = [];\r\n        this._transformMatrices = [];\r\n        this._cascadeMinExtents = [];\r\n        this._cascadeMaxExtents = [];\r\n        this._frustumCenter = [];\r\n        this._shadowCameraPos = [];\r\n        this._frustumCornersWorldSpace = [];\r\n\r\n        for (let cascadeIndex = 0; cascadeIndex < this._numCascades; ++cascadeIndex) {\r\n            this._cascades[cascadeIndex] = {\r\n                prevBreakDistance: 0,\r\n                breakDistance: 0,\r\n            };\r\n\r\n            this._viewMatrices[cascadeIndex] = Matrix.Zero();\r\n            this._projectionMatrices[cascadeIndex] = Matrix.Zero();\r\n            this._transformMatrices[cascadeIndex] = Matrix.Zero();\r\n            this._cascadeMinExtents[cascadeIndex] = new Vector3();\r\n            this._cascadeMaxExtents[cascadeIndex] = new Vector3();\r\n            this._frustumCenter[cascadeIndex] = new Vector3();\r\n            this._shadowCameraPos[cascadeIndex] = new Vector3();\r\n            this._frustumCornersWorldSpace[cascadeIndex] = new Array(CascadedShadowGenerator._FrustumCornersNDCSpace.length);\r\n\r\n            for (let i = 0; i < CascadedShadowGenerator._FrustumCornersNDCSpace.length; ++i) {\r\n                this._frustumCornersWorldSpace[cascadeIndex][i] = new Vector3();\r\n            }\r\n        }\r\n\r\n        const engine = this._scene.getEngine();\r\n\r\n        this._shadowMap.onBeforeBindObservable.clear();\r\n        this._shadowMap.onBeforeRenderObservable.clear();\r\n\r\n        this._shadowMap.onBeforeRenderObservable.add((layer: number) => {\r\n            if (this._sceneUBOs) {\r\n                this._scene.setSceneUniformBuffer(this._sceneUBOs[layer]);\r\n            }\r\n            this._currentLayer = layer;\r\n            if (this._filter === ShadowGenerator.FILTER_PCF) {\r\n                engine.setColorWrite(false);\r\n            }\r\n            this._scene.setTransformMatrix(this.getCascadeViewMatrix(layer)!, this.getCascadeProjectionMatrix(layer)!);\r\n            if (this._useUBO) {\r\n                this._scene.getSceneUniformBuffer().unbindEffect();\r\n                this._scene.finalizeSceneUbo();\r\n            }\r\n        });\r\n\r\n        this._shadowMap.onBeforeBindObservable.add(() => {\r\n            this._currentSceneUBO = this._scene.getSceneUniformBuffer();\r\n            engine._debugPushGroup?.(`cascaded shadow map generation for pass id ${engine.currentRenderPassId}`, 1);\r\n            if (this._breaksAreDirty) {\r\n                this._splitFrustum();\r\n            }\r\n            this._computeMatrices();\r\n        });\r\n\r\n        this._splitFrustum();\r\n    }\r\n\r\n    protected _bindCustomEffectForRenderSubMeshForShadowMap(subMesh: SubMesh, effect: Effect): void {\r\n        effect.setMatrix(\"viewProjection\", this.getCascadeTransformMatrix(this._currentLayer)!);\r\n    }\r\n\r\n    protected _isReadyCustomDefines(defines: any): void {\r\n        defines.push(\"#define SM_DEPTHCLAMP \" + (this._depthClamp && this._filter !== ShadowGenerator.FILTER_PCSS ? \"1\" : \"0\"));\r\n    }\r\n\r\n    /**\r\n     * Prepare all the defines in a material relying on a shadow map at the specified light index.\r\n     * @param defines Defines of the material we want to update\r\n     * @param lightIndex Index of the light in the enabled light list of the material\r\n     */\r\n    public prepareDefines(defines: any, lightIndex: number): void {\r\n        super.prepareDefines(defines, lightIndex);\r\n\r\n        const scene = this._scene;\r\n        const light = this._light;\r\n\r\n        if (!scene.shadowsEnabled || !light.shadowEnabled) {\r\n            return;\r\n        }\r\n\r\n        defines[\"SHADOWCSM\" + lightIndex] = true;\r\n        defines[\"SHADOWCSMDEBUG\" + lightIndex] = this.debug;\r\n        defines[\"SHADOWCSMNUM_CASCADES\" + lightIndex] = this.numCascades;\r\n        defines[\"SHADOWCSM_RIGHTHANDED\" + lightIndex] = scene.useRightHandedSystem;\r\n\r\n        const camera = this._getCamera();\r\n\r\n        if (camera && this._shadowMaxZ <= (camera.maxZ || this._shadowMaxZ)) {\r\n            defines[\"SHADOWCSMUSESHADOWMAXZ\" + lightIndex] = true;\r\n        }\r\n\r\n        if (this.cascadeBlendPercentage === 0) {\r\n            defines[\"SHADOWCSMNOBLEND\" + lightIndex] = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Binds the shadow related information inside of an effect (information like near, far, darkness...\r\n     * defined in the generator but impacting the effect).\r\n     * @param lightIndex Index of the light in the enabled light list of the material owning the effect\r\n     * @param effect The effect we are binfing the information for\r\n     */\r\n    public bindShadowLight(lightIndex: string, effect: Effect): void {\r\n        const light = this._light;\r\n        const scene = this._scene;\r\n\r\n        if (!scene.shadowsEnabled || !light.shadowEnabled) {\r\n            return;\r\n        }\r\n\r\n        const camera = this._getCamera();\r\n        if (!camera) {\r\n            return;\r\n        }\r\n\r\n        const shadowMap = this.getShadowMap();\r\n        if (!shadowMap) {\r\n            return;\r\n        }\r\n\r\n        const width = shadowMap.getSize().width;\r\n\r\n        effect.setMatrices(\"lightMatrix\" + lightIndex, this._transformMatricesAsArray);\r\n        effect.setArray(\"viewFrustumZ\" + lightIndex, this._viewSpaceFrustumsZ);\r\n        effect.setFloat(\"cascadeBlendFactor\" + lightIndex, this.cascadeBlendPercentage === 0 ? 10000 : 1 / this.cascadeBlendPercentage);\r\n        effect.setArray(\"frustumLengths\" + lightIndex, this._frustumLengths);\r\n\r\n        // Only PCF uses depth stencil texture.\r\n        if (this._filter === ShadowGenerator.FILTER_PCF) {\r\n            effect.setDepthStencilTexture(\"shadowSampler\" + lightIndex, shadowMap);\r\n            light._uniformBuffer.updateFloat4(\"shadowsInfo\", this.getDarkness(), width, 1 / width, this.frustumEdgeFalloff, lightIndex);\r\n        } else if (this._filter === ShadowGenerator.FILTER_PCSS) {\r\n            for (let cascadeIndex = 0; cascadeIndex < this._numCascades; ++cascadeIndex) {\r\n                this._lightSizeUVCorrection[cascadeIndex * 2 + 0] =\r\n                    cascadeIndex === 0\r\n                        ? 1\r\n                        : (this._cascadeMaxExtents[0].x - this._cascadeMinExtents[0].x) / (this._cascadeMaxExtents[cascadeIndex].x - this._cascadeMinExtents[cascadeIndex].x); // x correction\r\n                this._lightSizeUVCorrection[cascadeIndex * 2 + 1] =\r\n                    cascadeIndex === 0\r\n                        ? 1\r\n                        : (this._cascadeMaxExtents[0].y - this._cascadeMinExtents[0].y) / (this._cascadeMaxExtents[cascadeIndex].y - this._cascadeMinExtents[cascadeIndex].y); // y correction\r\n                this._depthCorrection[cascadeIndex] =\r\n                    cascadeIndex === 0\r\n                        ? 1\r\n                        : (this._cascadeMaxExtents[cascadeIndex].z - this._cascadeMinExtents[cascadeIndex].z) / (this._cascadeMaxExtents[0].z - this._cascadeMinExtents[0].z);\r\n            }\r\n            effect.setDepthStencilTexture(\"shadowSampler\" + lightIndex, shadowMap);\r\n            effect.setTexture(\"depthSampler\" + lightIndex, shadowMap);\r\n            effect.setArray2(\"lightSizeUVCorrection\" + lightIndex, this._lightSizeUVCorrection);\r\n            effect.setArray(\"depthCorrection\" + lightIndex, this._depthCorrection);\r\n            effect.setFloat(\"penumbraDarkness\" + lightIndex, this.penumbraDarkness);\r\n            light._uniformBuffer.updateFloat4(\"shadowsInfo\", this.getDarkness(), 1 / width, this._contactHardeningLightSizeUVRatio * width, this.frustumEdgeFalloff, lightIndex);\r\n        } else {\r\n            effect.setTexture(\"shadowSampler\" + lightIndex, shadowMap);\r\n            light._uniformBuffer.updateFloat4(\"shadowsInfo\", this.getDarkness(), width, 1 / width, this.frustumEdgeFalloff, lightIndex);\r\n        }\r\n\r\n        light._uniformBuffer.updateFloat2(\r\n            \"depthValues\",\r\n            this.getLight().getDepthMinZ(camera),\r\n            this.getLight().getDepthMinZ(camera) + this.getLight().getDepthMaxZ(camera),\r\n            lightIndex\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Gets the transformation matrix of the first cascade used to project the meshes into the map from the light point of view.\r\n     * (eq to view projection * shadow projection matrices)\r\n     * @returns The transform matrix used to create the shadow map\r\n     */\r\n    public getTransformMatrix(): Matrix {\r\n        return this.getCascadeTransformMatrix(0)!;\r\n    }\r\n\r\n    /**\r\n     * Disposes the ShadowGenerator.\r\n     * Returns nothing.\r\n     */\r\n    public dispose(): void {\r\n        super.dispose();\r\n\r\n        if (this._freezeShadowCastersBoundingInfoObservable) {\r\n            this._scene.onBeforeRenderObservable.remove(this._freezeShadowCastersBoundingInfoObservable);\r\n            this._freezeShadowCastersBoundingInfoObservable = null;\r\n        }\r\n\r\n        if (this._depthReducer) {\r\n            this._depthReducer.dispose();\r\n            this._depthReducer = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Serializes the shadow generator setup to a json object.\r\n     * @returns The serialized JSON object\r\n     */\r\n    public serialize(): any {\r\n        const serializationObject: any = super.serialize();\r\n        const shadowMap = this.getShadowMap();\r\n\r\n        if (!shadowMap) {\r\n            return serializationObject;\r\n        }\r\n\r\n        serializationObject.numCascades = this._numCascades;\r\n        serializationObject.debug = this._debug;\r\n        serializationObject.stabilizeCascades = this.stabilizeCascades;\r\n        serializationObject.lambda = this._lambda;\r\n        serializationObject.cascadeBlendPercentage = this.cascadeBlendPercentage;\r\n        serializationObject.depthClamp = this._depthClamp;\r\n        serializationObject.autoCalcDepthBounds = this.autoCalcDepthBounds;\r\n        serializationObject.shadowMaxZ = this._shadowMaxZ;\r\n        serializationObject.penumbraDarkness = this.penumbraDarkness;\r\n\r\n        serializationObject.freezeShadowCastersBoundingInfo = this._freezeShadowCastersBoundingInfo;\r\n        serializationObject.minDistance = this.minDistance;\r\n        serializationObject.maxDistance = this.maxDistance;\r\n\r\n        serializationObject.renderList = [];\r\n        if (shadowMap.renderList) {\r\n            for (let meshIndex = 0; meshIndex < shadowMap.renderList.length; meshIndex++) {\r\n                const mesh = shadowMap.renderList[meshIndex];\r\n\r\n                serializationObject.renderList.push(mesh.id);\r\n            }\r\n        }\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    /**\r\n     * Parses a serialized ShadowGenerator and returns a new ShadowGenerator.\r\n     * @param parsedShadowGenerator The JSON object to parse\r\n     * @param scene The scene to create the shadow map for\r\n     * @returns The parsed shadow generator\r\n     */\r\n    public static Parse(parsedShadowGenerator: any, scene: Scene): ShadowGenerator {\r\n        const shadowGenerator = ShadowGenerator.Parse(\r\n            parsedShadowGenerator,\r\n            scene,\r\n            (mapSize: number, light: IShadowLight, camera: Nullable<Camera>) => new CascadedShadowGenerator(mapSize, <DirectionalLight>light, undefined, camera)\r\n        ) as CascadedShadowGenerator;\r\n\r\n        if (parsedShadowGenerator.numCascades !== undefined) {\r\n            shadowGenerator.numCascades = parsedShadowGenerator.numCascades;\r\n        }\r\n\r\n        if (parsedShadowGenerator.debug !== undefined) {\r\n            shadowGenerator.debug = parsedShadowGenerator.debug;\r\n        }\r\n\r\n        if (parsedShadowGenerator.stabilizeCascades !== undefined) {\r\n            shadowGenerator.stabilizeCascades = parsedShadowGenerator.stabilizeCascades;\r\n        }\r\n\r\n        if (parsedShadowGenerator.lambda !== undefined) {\r\n            shadowGenerator.lambda = parsedShadowGenerator.lambda;\r\n        }\r\n\r\n        if (parsedShadowGenerator.cascadeBlendPercentage !== undefined) {\r\n            shadowGenerator.cascadeBlendPercentage = parsedShadowGenerator.cascadeBlendPercentage;\r\n        }\r\n\r\n        if (parsedShadowGenerator.depthClamp !== undefined) {\r\n            shadowGenerator.depthClamp = parsedShadowGenerator.depthClamp;\r\n        }\r\n\r\n        if (parsedShadowGenerator.autoCalcDepthBounds !== undefined) {\r\n            shadowGenerator.autoCalcDepthBounds = parsedShadowGenerator.autoCalcDepthBounds;\r\n        }\r\n\r\n        if (parsedShadowGenerator.shadowMaxZ !== undefined) {\r\n            shadowGenerator.shadowMaxZ = parsedShadowGenerator.shadowMaxZ;\r\n        }\r\n\r\n        if (parsedShadowGenerator.penumbraDarkness !== undefined) {\r\n            shadowGenerator.penumbraDarkness = parsedShadowGenerator.penumbraDarkness;\r\n        }\r\n\r\n        if (parsedShadowGenerator.freezeShadowCastersBoundingInfo !== undefined) {\r\n            shadowGenerator.freezeShadowCastersBoundingInfo = parsedShadowGenerator.freezeShadowCastersBoundingInfo;\r\n        }\r\n\r\n        if (parsedShadowGenerator.minDistance !== undefined && parsedShadowGenerator.maxDistance !== undefined) {\r\n            shadowGenerator.setMinMaxDistance(parsedShadowGenerator.minDistance, parsedShadowGenerator.maxDistance);\r\n        }\r\n\r\n        return shadowGenerator;\r\n    }\r\n}\r\n", "import type { SmartArrayNoDuplicate } from \"../../Misc/smartArray\";\r\nimport type { Scene } from \"../../scene\";\r\nimport type { RenderTargetTexture } from \"../../Materials/Textures/renderTargetTexture\";\r\nimport { ShadowGenerator } from \"./shadowGenerator\";\r\nimport { CascadedShadowGenerator } from \"./cascadedShadowGenerator\";\r\nimport type { ISceneSerializableComponent } from \"../../sceneComponent\";\r\nimport { SceneComponentConstants } from \"../../sceneComponent\";\r\nimport { AbstractScene } from \"../../abstractScene\";\r\n// Adds the parser to the scene parsers.\r\nAbstractScene.AddParser(SceneComponentConstants.NAME_SHADOWGENERATOR, (parsedData: any, scene: Scene) => {\r\n    // Shadows\r\n    if (parsedData.shadowGenerators !== undefined && parsedData.shadowGenerators !== null) {\r\n        for (let index = 0, cache = parsedData.shadowGenerators.length; index < cache; index++) {\r\n            const parsedShadowGenerator = parsedData.shadowGenerators[index];\r\n            if (parsedShadowGenerator.className === CascadedShadowGenerator.CLASSNAME) {\r\n                CascadedShadowGenerator.Parse(parsedShadowGenerator, scene);\r\n            } else {\r\n                ShadowGenerator.Parse(parsedShadowGenerator, scene);\r\n            }\r\n            // SG would be available on their associated lights\r\n        }\r\n    }\r\n});\r\n\r\n/**\r\n * Defines the shadow generator component responsible to manage any shadow generators\r\n * in a given scene.\r\n */\r\nexport class ShadowGeneratorSceneComponent implements ISceneSerializableComponent {\r\n    /**\r\n     * The component name helpful to identify the component in the list of scene components.\r\n     */\r\n    public readonly name = SceneComponentConstants.NAME_SHADOWGENERATOR;\r\n\r\n    /**\r\n     * The scene the component belongs to.\r\n     */\r\n    public scene: Scene;\r\n\r\n    /**\r\n     * Creates a new instance of the component for the given scene\r\n     * @param scene Defines the scene to register the component in\r\n     */\r\n    constructor(scene: Scene) {\r\n        this.scene = scene;\r\n    }\r\n\r\n    /**\r\n     * Registers the component in a given scene\r\n     */\r\n    public register(): void {\r\n        this.scene._gatherRenderTargetsStage.registerStep(SceneComponentConstants.STEP_GATHERRENDERTARGETS_SHADOWGENERATOR, this, this._gatherRenderTargets);\r\n    }\r\n\r\n    /**\r\n     * Rebuilds the elements related to this component in case of\r\n     * context lost for instance.\r\n     */\r\n    public rebuild(): void {\r\n        // Nothing To Do Here.\r\n    }\r\n\r\n    /**\r\n     * Serializes the component data to the specified json object\r\n     * @param serializationObject The object to serialize to\r\n     */\r\n    public serialize(serializationObject: any): void {\r\n        // Shadows\r\n        serializationObject.shadowGenerators = [];\r\n        const lights = this.scene.lights;\r\n        for (const light of lights) {\r\n            const shadowGenerators = light.getShadowGenerators();\r\n            if (shadowGenerators) {\r\n                const iterator = shadowGenerators.values();\r\n                for (let key = iterator.next(); key.done !== true; key = iterator.next()) {\r\n                    const shadowGenerator = key.value;\r\n                    serializationObject.shadowGenerators.push(shadowGenerator.serialize());\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Adds all the elements from the container to the scene\r\n     * @param container the container holding the elements\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public addFromContainer(container: AbstractScene): void {\r\n        // Nothing To Do Here. (directly attached to a light)\r\n    }\r\n\r\n    /**\r\n     * Removes all the elements in the container from the scene\r\n     * @param container contains the elements to remove\r\n     * @param dispose if the removed element should be disposed (default: false)\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public removeFromContainer(container: AbstractScene, dispose?: boolean): void {\r\n        // Nothing To Do Here. (directly attached to a light)\r\n    }\r\n\r\n    /**\r\n     * Rebuilds the elements related to this component in case of\r\n     * context lost for instance.\r\n     */\r\n    public dispose(): void {\r\n        // Nothing To Do Here.\r\n    }\r\n\r\n    private _gatherRenderTargets(renderTargets: SmartArrayNoDuplicate<RenderTargetTexture>): void {\r\n        // Shadows\r\n        const scene = this.scene;\r\n        if (this.scene.shadowsEnabled) {\r\n            for (let lightIndex = 0; lightIndex < scene.lights.length; lightIndex++) {\r\n                const light = scene.lights[lightIndex];\r\n                const shadowGenerators = light.getShadowGenerators();\r\n\r\n                if (light.isEnabled() && light.shadowEnabled && shadowGenerators) {\r\n                    const iterator = shadowGenerators.values();\r\n                    for (let key = iterator.next(); key.done !== true; key = iterator.next()) {\r\n                        const shadowGenerator = key.value;\r\n                        const shadowMap = <RenderTargetTexture>shadowGenerator.getShadowMap();\r\n                        if (scene.textures.indexOf(shadowMap) !== -1) {\r\n                            renderTargets.push(shadowMap);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nShadowGenerator._SceneComponentInitialization = (scene: Scene) => {\r\n    let component = scene._getComponent(SceneComponentConstants.NAME_SHADOWGENERATOR);\r\n    if (!component) {\r\n        component = new ShadowGeneratorSceneComponent(scene);\r\n        scene._addComponent(component);\r\n    }\r\n};\r\n", "import { serialize } from \"../Misc/decorators\";\r\nimport type { Camera } from \"../Cameras/camera\";\r\nimport type { Scene } from \"../scene\";\r\nimport { Matrix, Vector3 } from \"../Maths/math.vector\";\r\nimport { Node } from \"../node\";\r\nimport type { AbstractMesh } from \"../Meshes/abstractMesh\";\r\nimport { Light } from \"./light\";\r\nimport { ShadowLight } from \"./shadowLight\";\r\nimport type { Effect } from \"../Materials/effect\";\r\nNode.AddNodeConstructor(\"Light_Type_1\", (name, scene) => {\r\n    return () => new DirectionalLight(name, Vector3.Zero(), scene);\r\n});\r\n\r\n/**\r\n * A directional light is defined by a direction (what a surprise!).\r\n * The light is emitted from everywhere in the specified direction, and has an infinite range.\r\n * An example of a directional light is when a distance planet is lit by the apparently parallel lines of light from its sun. Light in a downward direction will light the top of an object.\r\n * Documentation: https://doc.babylonjs.com/features/featuresDeepDive/lights/lights_introduction\r\n */\r\nexport class DirectionalLight extends ShadowLight {\r\n    private _shadowFrustumSize = 0;\r\n    /**\r\n     * Fix frustum size for the shadow generation. This is disabled if the value is 0.\r\n     */\r\n    @serialize()\r\n    public get shadowFrustumSize(): number {\r\n        return this._shadowFrustumSize;\r\n    }\r\n    /**\r\n     * Specifies a fix frustum size for the shadow generation.\r\n     */\r\n    public set shadowFrustumSize(value: number) {\r\n        this._shadowFrustumSize = value;\r\n        this.forceProjectionMatrixCompute();\r\n    }\r\n\r\n    private _shadowOrthoScale = 0.1;\r\n    /**\r\n     * Gets the shadow projection scale against the optimal computed one.\r\n     * 0.1 by default which means that the projection window is increase by 10% from the optimal size.\r\n     * This does not impact in fixed frustum size (shadowFrustumSize being set)\r\n     */\r\n    @serialize()\r\n    public get shadowOrthoScale(): number {\r\n        return this._shadowOrthoScale;\r\n    }\r\n    /**\r\n     * Sets the shadow projection scale against the optimal computed one.\r\n     * 0.1 by default which means that the projection window is increase by 10% from the optimal size.\r\n     * This does not impact in fixed frustum size (shadowFrustumSize being set)\r\n     */\r\n    public set shadowOrthoScale(value: number) {\r\n        this._shadowOrthoScale = value;\r\n        this.forceProjectionMatrixCompute();\r\n    }\r\n\r\n    /**\r\n     * Automatically compute the projection matrix to best fit (including all the casters)\r\n     * on each frame.\r\n     */\r\n    @serialize()\r\n    public autoUpdateExtends = true;\r\n\r\n    /**\r\n     * Automatically compute the shadowMinZ and shadowMaxZ for the projection matrix to best fit (including all the casters)\r\n     * on each frame. autoUpdateExtends must be set to true for this to work\r\n     */\r\n    @serialize()\r\n    public autoCalcShadowZBounds = false;\r\n\r\n    // Cache\r\n    @serialize(\"orthoLeft\")\r\n    private _orthoLeft = Number.MAX_VALUE;\r\n    @serialize(\"orthoRight\")\r\n    private _orthoRight = Number.MIN_VALUE;\r\n    @serialize(\"orthoTop\")\r\n    private _orthoTop = Number.MIN_VALUE;\r\n    @serialize(\"orthoBottom\")\r\n    private _orthoBottom = Number.MAX_VALUE;\r\n\r\n    /**\r\n     * Gets or sets the orthoLeft property used to build the light frustum\r\n     */\r\n    public get orthoLeft(): number {\r\n        return this._orthoLeft;\r\n    }\r\n\r\n    public set orthoLeft(left: number) {\r\n        this._orthoLeft = left;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the orthoRight property used to build the light frustum\r\n     */\r\n    public get orthoRight(): number {\r\n        return this._orthoRight;\r\n    }\r\n\r\n    public set orthoRight(right: number) {\r\n        this._orthoRight = right;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the orthoTop property used to build the light frustum\r\n     */\r\n    public get orthoTop(): number {\r\n        return this._orthoTop;\r\n    }\r\n\r\n    public set orthoTop(top: number) {\r\n        this._orthoTop = top;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the orthoBottom property used to build the light frustum\r\n     */\r\n    public get orthoBottom(): number {\r\n        return this._orthoBottom;\r\n    }\r\n\r\n    public set orthoBottom(bottom: number) {\r\n        this._orthoBottom = bottom;\r\n    }\r\n\r\n    /**\r\n     * Creates a DirectionalLight object in the scene, oriented towards the passed direction (Vector3).\r\n     * The directional light is emitted from everywhere in the given direction.\r\n     * It can cast shadows.\r\n     * Documentation : https://doc.babylonjs.com/features/featuresDeepDive/lights/lights_introduction\r\n     * @param name The friendly name of the light\r\n     * @param direction The direction of the light\r\n     * @param scene The scene the light belongs to\r\n     */\r\n    constructor(name: string, direction: Vector3, scene?: Scene) {\r\n        super(name, scene);\r\n        this.position = direction.scale(-1.0);\r\n        this.direction = direction;\r\n    }\r\n\r\n    /**\r\n     * Returns the string \"DirectionalLight\".\r\n     * @returns The class name\r\n     */\r\n    public getClassName(): string {\r\n        return \"DirectionalLight\";\r\n    }\r\n\r\n    /**\r\n     * Returns the integer 1.\r\n     * @returns The light Type id as a constant defines in Light.LIGHTTYPEID_x\r\n     */\r\n    public getTypeID(): number {\r\n        return Light.LIGHTTYPEID_DIRECTIONALLIGHT;\r\n    }\r\n\r\n    /**\r\n     * Sets the passed matrix \"matrix\" as projection matrix for the shadows cast by the light according to the passed view matrix.\r\n     * Returns the DirectionalLight Shadow projection matrix.\r\n     * @param matrix\r\n     * @param viewMatrix\r\n     * @param renderList\r\n     */\r\n    protected _setDefaultShadowProjectionMatrix(matrix: Matrix, viewMatrix: Matrix, renderList: Array<AbstractMesh>): void {\r\n        if (this.shadowFrustumSize > 0) {\r\n            this._setDefaultFixedFrustumShadowProjectionMatrix(matrix);\r\n        } else {\r\n            this._setDefaultAutoExtendShadowProjectionMatrix(matrix, viewMatrix, renderList);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets the passed matrix \"matrix\" as fixed frustum projection matrix for the shadows cast by the light according to the passed view matrix.\r\n     * Returns the DirectionalLight Shadow projection matrix.\r\n     * @param matrix\r\n     */\r\n    protected _setDefaultFixedFrustumShadowProjectionMatrix(matrix: Matrix): void {\r\n        const activeCamera = this.getScene().activeCamera;\r\n\r\n        if (!activeCamera) {\r\n            return;\r\n        }\r\n\r\n        Matrix.OrthoLHToRef(\r\n            this.shadowFrustumSize,\r\n            this.shadowFrustumSize,\r\n            this.shadowMinZ !== undefined ? this.shadowMinZ : activeCamera.minZ,\r\n            this.shadowMaxZ !== undefined ? this.shadowMaxZ : activeCamera.maxZ,\r\n            matrix,\r\n            this.getScene().getEngine().isNDCHalfZRange\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Sets the passed matrix \"matrix\" as auto extend projection matrix for the shadows cast by the light according to the passed view matrix.\r\n     * Returns the DirectionalLight Shadow projection matrix.\r\n     * @param matrix\r\n     * @param viewMatrix\r\n     * @param renderList\r\n     */\r\n    protected _setDefaultAutoExtendShadowProjectionMatrix(matrix: Matrix, viewMatrix: Matrix, renderList: Array<AbstractMesh>): void {\r\n        const activeCamera = this.getScene().activeCamera;\r\n\r\n        if (!activeCamera) {\r\n            return;\r\n        }\r\n\r\n        // Check extends\r\n        if (this.autoUpdateExtends || this._orthoLeft === Number.MAX_VALUE) {\r\n            const tempVector3 = Vector3.Zero();\r\n\r\n            this._orthoLeft = Number.MAX_VALUE;\r\n            this._orthoRight = -Number.MAX_VALUE;\r\n            this._orthoTop = -Number.MAX_VALUE;\r\n            this._orthoBottom = Number.MAX_VALUE;\r\n\r\n            let shadowMinZ = Number.MAX_VALUE;\r\n            let shadowMaxZ = -Number.MAX_VALUE;\r\n\r\n            for (let meshIndex = 0; meshIndex < renderList.length; meshIndex++) {\r\n                const mesh = renderList[meshIndex];\r\n\r\n                if (!mesh) {\r\n                    continue;\r\n                }\r\n\r\n                const boundingInfo = mesh.getBoundingInfo();\r\n                const boundingBox = boundingInfo.boundingBox;\r\n\r\n                for (let index = 0; index < boundingBox.vectorsWorld.length; index++) {\r\n                    Vector3.TransformCoordinatesToRef(boundingBox.vectorsWorld[index], viewMatrix, tempVector3);\r\n\r\n                    if (tempVector3.x < this._orthoLeft) {\r\n                        this._orthoLeft = tempVector3.x;\r\n                    }\r\n                    if (tempVector3.y < this._orthoBottom) {\r\n                        this._orthoBottom = tempVector3.y;\r\n                    }\r\n\r\n                    if (tempVector3.x > this._orthoRight) {\r\n                        this._orthoRight = tempVector3.x;\r\n                    }\r\n                    if (tempVector3.y > this._orthoTop) {\r\n                        this._orthoTop = tempVector3.y;\r\n                    }\r\n                    if (this.autoCalcShadowZBounds) {\r\n                        if (tempVector3.z < shadowMinZ) {\r\n                            shadowMinZ = tempVector3.z;\r\n                        }\r\n                        if (tempVector3.z > shadowMaxZ) {\r\n                            shadowMaxZ = tempVector3.z;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (this.autoCalcShadowZBounds) {\r\n                this._shadowMinZ = shadowMinZ;\r\n                this._shadowMaxZ = shadowMaxZ;\r\n            }\r\n        }\r\n\r\n        const xOffset = this._orthoRight - this._orthoLeft;\r\n        const yOffset = this._orthoTop - this._orthoBottom;\r\n\r\n        const minZ = this.shadowMinZ !== undefined ? this.shadowMinZ : activeCamera.minZ;\r\n        const maxZ = this.shadowMaxZ !== undefined ? this.shadowMaxZ : activeCamera.maxZ;\r\n\r\n        const useReverseDepthBuffer = this.getScene().getEngine().useReverseDepthBuffer;\r\n\r\n        Matrix.OrthoOffCenterLHToRef(\r\n            this._orthoLeft - xOffset * this.shadowOrthoScale,\r\n            this._orthoRight + xOffset * this.shadowOrthoScale,\r\n            this._orthoBottom - yOffset * this.shadowOrthoScale,\r\n            this._orthoTop + yOffset * this.shadowOrthoScale,\r\n            useReverseDepthBuffer ? maxZ : minZ,\r\n            useReverseDepthBuffer ? minZ : maxZ,\r\n            matrix,\r\n            this.getScene().getEngine().isNDCHalfZRange\r\n        );\r\n    }\r\n\r\n    protected _buildUniformLayout(): void {\r\n        this._uniformBuffer.addUniform(\"vLightData\", 4);\r\n        this._uniformBuffer.addUniform(\"vLightDiffuse\", 4);\r\n        this._uniformBuffer.addUniform(\"vLightSpecular\", 4);\r\n        this._uniformBuffer.addUniform(\"shadowsInfo\", 3);\r\n        this._uniformBuffer.addUniform(\"depthValues\", 2);\r\n        this._uniformBuffer.create();\r\n    }\r\n\r\n    /**\r\n     * Sets the passed Effect object with the DirectionalLight transformed position (or position if not parented) and the passed name.\r\n     * @param effect The effect to update\r\n     * @param lightIndex The index of the light in the effect to update\r\n     * @returns The directional light\r\n     */\r\n    public transferToEffect(effect: Effect, lightIndex: string): DirectionalLight {\r\n        if (this.computeTransformedInformation()) {\r\n            this._uniformBuffer.updateFloat4(\"vLightData\", this.transformedDirection.x, this.transformedDirection.y, this.transformedDirection.z, 1, lightIndex);\r\n            return this;\r\n        }\r\n        this._uniformBuffer.updateFloat4(\"vLightData\", this.direction.x, this.direction.y, this.direction.z, 1, lightIndex);\r\n        return this;\r\n    }\r\n\r\n    public transferToNodeMaterialEffect(effect: Effect, lightDataUniformName: string): Light {\r\n        if (this.computeTransformedInformation()) {\r\n            effect.setFloat3(lightDataUniformName, this.transformedDirection.x, this.transformedDirection.y, this.transformedDirection.z);\r\n            return this;\r\n        }\r\n\r\n        effect.setFloat3(lightDataUniformName, this.direction.x, this.direction.y, this.direction.z);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets the minZ used for shadow according to both the scene and the light.\r\n     *\r\n     * Values are fixed on directional lights as it relies on an ortho projection hence the need to convert being\r\n     * -1 and 1 to 0 and 1 doing (depth + min) / (min + max) -> (depth + 1) / (1 + 1) -> (depth * 0.5) + 0.5.\r\n     * (when not using reverse depth buffer / NDC half Z range)\r\n     * @param activeCamera The camera we are returning the min for\r\n     * @returns the depth min z\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public getDepthMinZ(activeCamera: Camera): number {\r\n        const engine = this._scene.getEngine();\r\n        return !engine.useReverseDepthBuffer && engine.isNDCHalfZRange ? 0 : 1;\r\n    }\r\n\r\n    /**\r\n     * Gets the maxZ used for shadow according to both the scene and the light.\r\n     *\r\n     * Values are fixed on directional lights as it relies on an ortho projection hence the need to convert being\r\n     * -1 and 1 to 0 and 1 doing (depth + min) / (min + max) -> (depth + 1) / (1 + 1) -> (depth * 0.5) + 0.5.\r\n     * (when not using reverse depth buffer / NDC half Z range)\r\n     * @param activeCamera The camera we are returning the max for\r\n     * @returns the depth max z\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public getDepthMaxZ(activeCamera: Camera): number {\r\n        const engine = this._scene.getEngine();\r\n        return engine.useReverseDepthBuffer && engine.isNDCHalfZRange ? 0 : 1;\r\n    }\r\n\r\n    /**\r\n     * Prepares the list of defines specific to the light type.\r\n     * @param defines the list of defines\r\n     * @param lightIndex defines the index of the light for the effect\r\n     */\r\n    public prepareLightSpecificDefines(defines: any, lightIndex: number): void {\r\n        defines[\"DIRLIGHT\" + lightIndex] = true;\r\n    }\r\n}\r\n", "import { serializeAsColor3, serializeAsVector3 } from \"../Misc/decorators\";\r\nimport type { Nullable } from \"../types\";\r\nimport type { Scene } from \"../scene\";\r\nimport { Matrix, Vector3 } from \"../Maths/math.vector\";\r\nimport { Color3 } from \"../Maths/math.color\";\r\nimport { Node } from \"../node\";\r\nimport type { Effect } from \"../Materials/effect\";\r\nimport { Light } from \"./light\";\r\nimport type { IShadowGenerator } from \"./Shadows/shadowGenerator\";\r\n\r\nNode.AddNodeConstructor(\"Light_Type_3\", (name, scene) => {\r\n    return () => new HemisphericLight(name, Vector3.Zero(), scene);\r\n});\r\n\r\n/**\r\n * The HemisphericLight simulates the ambient environment light,\r\n * so the passed direction is the light reflection direction, not the incoming direction.\r\n */\r\nexport class HemisphericLight extends Light {\r\n    /**\r\n     * The groundColor is the light in the opposite direction to the one specified during creation.\r\n     * You can think of the diffuse and specular light as coming from the centre of the object in the given direction and the groundColor light in the opposite direction.\r\n     */\r\n    @serializeAsColor3()\r\n    public groundColor = new Color3(0.0, 0.0, 0.0);\r\n\r\n    /**\r\n     * The light reflection direction, not the incoming direction.\r\n     */\r\n    @serializeAsVector3()\r\n    public direction: Vector3;\r\n\r\n    /**\r\n     * Creates a HemisphericLight object in the scene according to the passed direction (Vector3).\r\n     * The HemisphericLight simulates the ambient environment light, so the passed direction is the light reflection direction, not the incoming direction.\r\n     * The HemisphericLight can't cast shadows.\r\n     * Documentation : https://doc.babylonjs.com/features/featuresDeepDive/lights/lights_introduction\r\n     * @param name The friendly name of the light\r\n     * @param direction The direction of the light reflection\r\n     * @param scene The scene the light belongs to\r\n     */\r\n    constructor(name: string, direction: Vector3, scene?: Scene) {\r\n        super(name, scene);\r\n        this.direction = direction || Vector3.Up();\r\n    }\r\n\r\n    protected _buildUniformLayout(): void {\r\n        this._uniformBuffer.addUniform(\"vLightData\", 4);\r\n        this._uniformBuffer.addUniform(\"vLightDiffuse\", 4);\r\n        this._uniformBuffer.addUniform(\"vLightSpecular\", 4);\r\n        this._uniformBuffer.addUniform(\"vLightGround\", 3);\r\n        this._uniformBuffer.addUniform(\"shadowsInfo\", 3);\r\n        this._uniformBuffer.addUniform(\"depthValues\", 2);\r\n        this._uniformBuffer.create();\r\n    }\r\n\r\n    /**\r\n     * Returns the string \"HemisphericLight\".\r\n     * @returns The class name\r\n     */\r\n    public getClassName(): string {\r\n        return \"HemisphericLight\";\r\n    }\r\n\r\n    /**\r\n     * Sets the HemisphericLight direction towards the passed target (Vector3).\r\n     * Returns the updated direction.\r\n     * @param target The target the direction should point to\r\n     * @returns The computed direction\r\n     */\r\n    public setDirectionToTarget(target: Vector3): Vector3 {\r\n        this.direction = Vector3.Normalize(target.subtract(Vector3.Zero()));\r\n        return this.direction;\r\n    }\r\n\r\n    /**\r\n     * Returns the shadow generator associated to the light.\r\n     * @returns Always null for hemispheric lights because it does not support shadows.\r\n     */\r\n    public getShadowGenerator(): Nullable<IShadowGenerator> {\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Sets the passed Effect object with the HemisphericLight normalized direction and color and the passed name (string).\r\n     * @param _effect The effect to update\r\n     * @param lightIndex The index of the light in the effect to update\r\n     * @returns The hemispheric light\r\n     */\r\n    public transferToEffect(_effect: Effect, lightIndex: string): HemisphericLight {\r\n        const normalizeDirection = Vector3.Normalize(this.direction);\r\n        this._uniformBuffer.updateFloat4(\"vLightData\", normalizeDirection.x, normalizeDirection.y, normalizeDirection.z, 0.0, lightIndex);\r\n        this._uniformBuffer.updateColor3(\"vLightGround\", this.groundColor.scale(this.intensity), lightIndex);\r\n        return this;\r\n    }\r\n\r\n    public transferToNodeMaterialEffect(effect: Effect, lightDataUniformName: string) {\r\n        const normalizeDirection = Vector3.Normalize(this.direction);\r\n        effect.setFloat3(lightDataUniformName, normalizeDirection.x, normalizeDirection.y, normalizeDirection.z);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Computes the world matrix of the node\r\n     * @returns the world matrix\r\n     */\r\n    public computeWorldMatrix(): Matrix {\r\n        if (!this._worldMatrix) {\r\n            this._worldMatrix = Matrix.Identity();\r\n        }\r\n        return this._worldMatrix;\r\n    }\r\n\r\n    /**\r\n     * Returns the integer 3.\r\n     * @returns The light Type id as a constant defines in Light.LIGHTTYPEID_x\r\n     */\r\n    public getTypeID(): number {\r\n        return Light.LIGHTTYPEID_HEMISPHERICLIGHT;\r\n    }\r\n\r\n    /**\r\n     * Prepares the list of defines specific to the light type.\r\n     * @param defines the list of defines\r\n     * @param lightIndex defines the index of the light for the effect\r\n     */\r\n    public prepareLightSpecificDefines(defines: any, lightIndex: number): void {\r\n        defines[\"HEMILIGHT\" + lightIndex] = true;\r\n    }\r\n}\r\n", "import { serialize } from \"../Misc/decorators\";\r\nimport type { Scene } from \"../scene\";\r\nimport { Matrix, Vector3 } from \"../Maths/math.vector\";\r\nimport { Node } from \"../node\";\r\nimport type { AbstractMesh } from \"../Meshes/abstractMesh\";\r\nimport { Light } from \"./light\";\r\nimport { ShadowLight } from \"./shadowLight\";\r\nimport type { Effect } from \"../Materials/effect\";\r\n\r\nNode.AddNodeConstructor(\"Light_Type_0\", (name, scene) => {\r\n    return () => new PointLight(name, Vector3.Zero(), scene);\r\n});\r\n\r\n/**\r\n * A point light is a light defined by an unique point in world space.\r\n * The light is emitted in every direction from this point.\r\n * A good example of a point light is a standard light bulb.\r\n * Documentation: https://doc.babylonjs.com/features/featuresDeepDive/lights/lights_introduction\r\n */\r\nexport class PointLight extends ShadowLight {\r\n    private _shadowAngle = Math.PI / 2;\r\n    /**\r\n     * Getter: In case of direction provided, the shadow will not use a cube texture but simulate a spot shadow as a fallback\r\n     * This specifies what angle the shadow will use to be created.\r\n     *\r\n     * It default to 90 degrees to work nicely with the cube texture generation for point lights shadow maps.\r\n     */\r\n    @serialize()\r\n    public get shadowAngle(): number {\r\n        return this._shadowAngle;\r\n    }\r\n    /**\r\n     * Setter: In case of direction provided, the shadow will not use a cube texture but simulate a spot shadow as a fallback\r\n     * This specifies what angle the shadow will use to be created.\r\n     *\r\n     * It default to 90 degrees to work nicely with the cube texture generation for point lights shadow maps.\r\n     */\r\n    public set shadowAngle(value: number) {\r\n        this._shadowAngle = value;\r\n        this.forceProjectionMatrixCompute();\r\n    }\r\n\r\n    /**\r\n     * Gets the direction if it has been set.\r\n     * In case of direction provided, the shadow will not use a cube texture but simulate a spot shadow as a fallback\r\n     */\r\n    public get direction(): Vector3 {\r\n        return this._direction;\r\n    }\r\n\r\n    /**\r\n     * In case of direction provided, the shadow will not use a cube texture but simulate a spot shadow as a fallback\r\n     */\r\n    public set direction(value: Vector3) {\r\n        const previousNeedCube = this.needCube();\r\n        this._direction = value;\r\n        if (this.needCube() !== previousNeedCube && this._shadowGenerators) {\r\n            const iterator = this._shadowGenerators.values();\r\n            for (let key = iterator.next(); key.done !== true; key = iterator.next()) {\r\n                const shadowGenerator = key.value;\r\n                shadowGenerator.recreateShadowMap();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a PointLight object from the passed name and position (Vector3) and adds it in the scene.\r\n     * A PointLight emits the light in every direction.\r\n     * It can cast shadows.\r\n     * If the scene camera is already defined and you want to set your PointLight at the camera position, just set it :\r\n     * ```javascript\r\n     * var pointLight = new PointLight(\"pl\", camera.position, scene);\r\n     * ```\r\n     * Documentation : https://doc.babylonjs.com/features/featuresDeepDive/lights/lights_introduction\r\n     * @param name The light friendly name\r\n     * @param position The position of the point light in the scene\r\n     * @param scene The scene the lights belongs to\r\n     */\r\n    constructor(name: string, position: Vector3, scene?: Scene) {\r\n        super(name, scene);\r\n        this.position = position;\r\n    }\r\n\r\n    /**\r\n     * Returns the string \"PointLight\"\r\n     * @returns the class name\r\n     */\r\n    public getClassName(): string {\r\n        return \"PointLight\";\r\n    }\r\n\r\n    /**\r\n     * Returns the integer 0.\r\n     * @returns The light Type id as a constant defines in Light.LIGHTTYPEID_x\r\n     */\r\n    public getTypeID(): number {\r\n        return Light.LIGHTTYPEID_POINTLIGHT;\r\n    }\r\n\r\n    /**\r\n     * Specifies whether or not the shadowmap should be a cube texture.\r\n     * @returns true if the shadowmap needs to be a cube texture.\r\n     */\r\n    public needCube(): boolean {\r\n        return !this.direction;\r\n    }\r\n\r\n    /**\r\n     * Returns a new Vector3 aligned with the PointLight cube system according to the passed cube face index (integer).\r\n     * @param faceIndex The index of the face we are computed the direction to generate shadow\r\n     * @returns The set direction in 2d mode otherwise the direction to the cubemap face if needCube() is true\r\n     */\r\n    public getShadowDirection(faceIndex?: number): Vector3 {\r\n        if (this.direction) {\r\n            return super.getShadowDirection(faceIndex);\r\n        } else {\r\n            switch (faceIndex) {\r\n                case 0:\r\n                    return new Vector3(1.0, 0.0, 0.0);\r\n                case 1:\r\n                    return new Vector3(-1.0, 0.0, 0.0);\r\n                case 2:\r\n                    return new Vector3(0.0, -1.0, 0.0);\r\n                case 3:\r\n                    return new Vector3(0.0, 1.0, 0.0);\r\n                case 4:\r\n                    return new Vector3(0.0, 0.0, 1.0);\r\n                case 5:\r\n                    return new Vector3(0.0, 0.0, -1.0);\r\n            }\r\n        }\r\n\r\n        return Vector3.Zero();\r\n    }\r\n\r\n    /**\r\n     * Sets the passed matrix \"matrix\" as a left-handed perspective projection matrix with the following settings :\r\n     * - fov = PI / 2\r\n     * - aspect ratio : 1.0\r\n     * - z-near and far equal to the active camera minZ and maxZ.\r\n     * Returns the PointLight.\r\n     * @param matrix\r\n     * @param viewMatrix\r\n     * @param renderList\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    protected _setDefaultShadowProjectionMatrix(matrix: Matrix, viewMatrix: Matrix, renderList: Array<AbstractMesh>): void {\r\n        const activeCamera = this.getScene().activeCamera;\r\n\r\n        if (!activeCamera) {\r\n            return;\r\n        }\r\n\r\n        const minZ = this.shadowMinZ !== undefined ? this.shadowMinZ : activeCamera.minZ;\r\n        const maxZ = this.shadowMaxZ !== undefined ? this.shadowMaxZ : activeCamera.maxZ;\r\n\r\n        const useReverseDepthBuffer = this.getScene().getEngine().useReverseDepthBuffer;\r\n\r\n        Matrix.PerspectiveFovLHToRef(\r\n            this.shadowAngle,\r\n            1.0,\r\n            useReverseDepthBuffer ? maxZ : minZ,\r\n            useReverseDepthBuffer ? minZ : maxZ,\r\n            matrix,\r\n            true,\r\n            this._scene.getEngine().isNDCHalfZRange,\r\n            undefined,\r\n            useReverseDepthBuffer\r\n        );\r\n    }\r\n\r\n    protected _buildUniformLayout(): void {\r\n        this._uniformBuffer.addUniform(\"vLightData\", 4);\r\n        this._uniformBuffer.addUniform(\"vLightDiffuse\", 4);\r\n        this._uniformBuffer.addUniform(\"vLightSpecular\", 4);\r\n        this._uniformBuffer.addUniform(\"vLightFalloff\", 4);\r\n        this._uniformBuffer.addUniform(\"shadowsInfo\", 3);\r\n        this._uniformBuffer.addUniform(\"depthValues\", 2);\r\n        this._uniformBuffer.create();\r\n    }\r\n\r\n    /**\r\n     * Sets the passed Effect \"effect\" with the PointLight transformed position (or position, if none) and passed name (string).\r\n     * @param effect The effect to update\r\n     * @param lightIndex The index of the light in the effect to update\r\n     * @returns The point light\r\n     */\r\n    public transferToEffect(effect: Effect, lightIndex: string): PointLight {\r\n        if (this.computeTransformedInformation()) {\r\n            this._uniformBuffer.updateFloat4(\"vLightData\", this.transformedPosition.x, this.transformedPosition.y, this.transformedPosition.z, 0.0, lightIndex);\r\n        } else {\r\n            this._uniformBuffer.updateFloat4(\"vLightData\", this.position.x, this.position.y, this.position.z, 0, lightIndex);\r\n        }\r\n\r\n        this._uniformBuffer.updateFloat4(\"vLightFalloff\", this.range, this._inverseSquaredRange, 0, 0, lightIndex);\r\n        return this;\r\n    }\r\n\r\n    public transferToNodeMaterialEffect(effect: Effect, lightDataUniformName: string) {\r\n        if (this.computeTransformedInformation()) {\r\n            effect.setFloat3(lightDataUniformName, this.transformedPosition.x, this.transformedPosition.y, this.transformedPosition.z);\r\n        } else {\r\n            effect.setFloat3(lightDataUniformName, this.position.x, this.position.y, this.position.z);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Prepares the list of defines specific to the light type.\r\n     * @param defines the list of defines\r\n     * @param lightIndex defines the index of the light for the effect\r\n     */\r\n    public prepareLightSpecificDefines(defines: any, lightIndex: number): void {\r\n        defines[\"POINTLIGHT\" + lightIndex] = true;\r\n    }\r\n}\r\n", "import { serialize, serializeAsTexture } from \"../Misc/decorators\";\r\nimport type { Nullable } from \"../types\";\r\nimport type { Scene } from \"../scene\";\r\nimport { Matrix, Vector3 } from \"../Maths/math.vector\";\r\nimport { Node } from \"../node\";\r\nimport type { AbstractMesh } from \"../Meshes/abstractMesh\";\r\nimport type { Effect } from \"../Materials/effect\";\r\nimport type { BaseTexture } from \"../Materials/Textures/baseTexture\";\r\nimport { Light } from \"./light\";\r\nimport { ShadowLight } from \"./shadowLight\";\r\nimport { Texture } from \"../Materials/Textures/texture\";\r\nimport type { ProceduralTexture } from \"../Materials/Textures/Procedurals/proceduralTexture\";\r\nimport type { Camera } from \"../Cameras/camera\";\r\n\r\nNode.AddNodeConstructor(\"Light_Type_2\", (name, scene) => {\r\n    return () => new SpotLight(name, Vector3.Zero(), Vector3.Zero(), 0, 0, scene);\r\n});\r\n\r\n/**\r\n * A spot light is defined by a position, a direction, an angle, and an exponent.\r\n * These values define a cone of light starting from the position, emitting toward the direction.\r\n * The angle, in radians, defines the size (field of illumination) of the spotlight's conical beam,\r\n * and the exponent defines the speed of the decay of the light with distance (reach).\r\n * Documentation: https://doc.babylonjs.com/features/featuresDeepDive/lights/lights_introduction\r\n */\r\nexport class SpotLight extends ShadowLight {\r\n    /*\r\n        upVector , rightVector and direction will form the coordinate system for this spot light.\r\n        These three vectors will be used as projection matrix when doing texture projection.\r\n\r\n        Also we have the following rules always holds:\r\n        direction cross up   = right\r\n        right cross direction = up\r\n        up cross right       = forward\r\n\r\n        light_near and light_far will control the range of the texture projection. If a plane is\r\n        out of the range in spot light space, there is no texture projection.\r\n    */\r\n\r\n    private _angle: number;\r\n    private _innerAngle: number = 0;\r\n    private _cosHalfAngle: number;\r\n\r\n    private _lightAngleScale: number;\r\n    private _lightAngleOffset: number;\r\n\r\n    /**\r\n     * Gets the cone angle of the spot light in Radians.\r\n     */\r\n    @serialize()\r\n    public get angle(): number {\r\n        return this._angle;\r\n    }\r\n    /**\r\n     * Sets the cone angle of the spot light in Radians.\r\n     */\r\n    public set angle(value: number) {\r\n        this._angle = value;\r\n        this._cosHalfAngle = Math.cos(value * 0.5);\r\n        this._projectionTextureProjectionLightDirty = true;\r\n        this.forceProjectionMatrixCompute();\r\n        this._computeAngleValues();\r\n    }\r\n\r\n    /**\r\n     * Only used in gltf falloff mode, this defines the angle where\r\n     * the directional falloff will start before cutting at angle which could be seen\r\n     * as outer angle.\r\n     */\r\n    @serialize()\r\n    public get innerAngle(): number {\r\n        return this._innerAngle;\r\n    }\r\n    /**\r\n     * Only used in gltf falloff mode, this defines the angle where\r\n     * the directional falloff will start before cutting at angle which could be seen\r\n     * as outer angle.\r\n     */\r\n    public set innerAngle(value: number) {\r\n        this._innerAngle = value;\r\n        this._computeAngleValues();\r\n    }\r\n\r\n    private _shadowAngleScale: number;\r\n    /**\r\n     * Allows scaling the angle of the light for shadow generation only.\r\n     */\r\n    @serialize()\r\n    public get shadowAngleScale(): number {\r\n        return this._shadowAngleScale;\r\n    }\r\n    /**\r\n     * Allows scaling the angle of the light for shadow generation only.\r\n     */\r\n    public set shadowAngleScale(value: number) {\r\n        this._shadowAngleScale = value;\r\n        this.forceProjectionMatrixCompute();\r\n    }\r\n\r\n    /**\r\n     * The light decay speed with the distance from the emission spot.\r\n     */\r\n    @serialize()\r\n    public exponent: number;\r\n\r\n    private _projectionTextureMatrix = Matrix.Zero();\r\n    /**\r\n     * Allows reading the projection texture\r\n     */\r\n    public get projectionTextureMatrix(): Matrix {\r\n        return this._projectionTextureMatrix;\r\n    }\r\n\r\n    protected _projectionTextureLightNear: number = 1e-6;\r\n    /**\r\n     * Gets the near clip of the Spotlight for texture projection.\r\n     */\r\n    @serialize()\r\n    public get projectionTextureLightNear(): number {\r\n        return this._projectionTextureLightNear;\r\n    }\r\n    /**\r\n     * Sets the near clip of the Spotlight for texture projection.\r\n     */\r\n    public set projectionTextureLightNear(value: number) {\r\n        this._projectionTextureLightNear = value;\r\n        this._projectionTextureProjectionLightDirty = true;\r\n    }\r\n\r\n    protected _projectionTextureLightFar: number = 1000.0;\r\n    /**\r\n     * Gets the far clip of the Spotlight for texture projection.\r\n     */\r\n    @serialize()\r\n    public get projectionTextureLightFar(): number {\r\n        return this._projectionTextureLightFar;\r\n    }\r\n    /**\r\n     * Sets the far clip of the Spotlight for texture projection.\r\n     */\r\n    public set projectionTextureLightFar(value: number) {\r\n        this._projectionTextureLightFar = value;\r\n        this._projectionTextureProjectionLightDirty = true;\r\n    }\r\n\r\n    protected _projectionTextureUpDirection: Vector3 = Vector3.Up();\r\n    /**\r\n     * Gets the Up vector of the Spotlight for texture projection.\r\n     */\r\n    @serialize()\r\n    public get projectionTextureUpDirection(): Vector3 {\r\n        return this._projectionTextureUpDirection;\r\n    }\r\n    /**\r\n     * Sets the Up vector of the Spotlight for texture projection.\r\n     */\r\n    public set projectionTextureUpDirection(value: Vector3) {\r\n        this._projectionTextureUpDirection = value;\r\n        this._projectionTextureProjectionLightDirty = true;\r\n    }\r\n\r\n    @serializeAsTexture(\"projectedLightTexture\")\r\n    private _projectionTexture: Nullable<BaseTexture>;\r\n\r\n    /**\r\n     * Gets the projection texture of the light.\r\n     */\r\n    public get projectionTexture(): Nullable<BaseTexture> {\r\n        return this._projectionTexture;\r\n    }\r\n    /**\r\n     * Sets the projection texture of the light.\r\n     */\r\n    public set projectionTexture(value: Nullable<BaseTexture>) {\r\n        if (this._projectionTexture === value) {\r\n            return;\r\n        }\r\n        this._projectionTexture = value;\r\n        this._projectionTextureDirty = true;\r\n        if (this._projectionTexture && !this._projectionTexture.isReady()) {\r\n            if (SpotLight._IsProceduralTexture(this._projectionTexture)) {\r\n                this._projectionTexture.getEffect().executeWhenCompiled(() => {\r\n                    this._markMeshesAsLightDirty();\r\n                });\r\n            } else if (SpotLight._IsTexture(this._projectionTexture)) {\r\n                this._projectionTexture.onLoadObservable.addOnce(() => {\r\n                    this._markMeshesAsLightDirty();\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    private static _IsProceduralTexture(texture: BaseTexture): texture is ProceduralTexture {\r\n        return (texture as ProceduralTexture).onGeneratedObservable !== undefined;\r\n    }\r\n\r\n    private static _IsTexture(texture: BaseTexture): texture is Texture {\r\n        return (texture as Texture).onLoadObservable !== undefined;\r\n    }\r\n\r\n    private _projectionTextureViewLightDirty = true;\r\n    private _projectionTextureProjectionLightDirty = true;\r\n    private _projectionTextureDirty = true;\r\n    private _projectionTextureViewTargetVector = Vector3.Zero();\r\n    private _projectionTextureViewLightMatrix = Matrix.Zero();\r\n\r\n    private _projectionTextureProjectionLightMatrix = Matrix.Zero();\r\n    /**\r\n     * Gets or sets the light projection matrix as used by the projection texture\r\n     */\r\n    public get projectionTextureProjectionLightMatrix(): Matrix {\r\n        return this._projectionTextureProjectionLightMatrix;\r\n    }\r\n\r\n    public set projectionTextureProjectionLightMatrix(projection: Matrix) {\r\n        this._projectionTextureProjectionLightMatrix = projection;\r\n        this._projectionTextureProjectionLightDirty = false;\r\n        this._projectionTextureDirty = true;\r\n    }\r\n\r\n    private _projectionTextureScalingMatrix = Matrix.FromValues(0.5, 0.0, 0.0, 0.0, 0.0, 0.5, 0.0, 0.0, 0.0, 0.0, 0.5, 0.0, 0.5, 0.5, 0.5, 1.0);\r\n\r\n    /**\r\n     * Creates a SpotLight object in the scene. A spot light is a simply light oriented cone.\r\n     * It can cast shadows.\r\n     * Documentation : https://doc.babylonjs.com/features/featuresDeepDive/lights/lights_introduction\r\n     * @param name The light friendly name\r\n     * @param position The position of the spot light in the scene\r\n     * @param direction The direction of the light in the scene\r\n     * @param angle The cone angle of the light in Radians\r\n     * @param exponent The light decay speed with the distance from the emission spot\r\n     * @param scene The scene the lights belongs to\r\n     */\r\n    constructor(name: string, position: Vector3, direction: Vector3, angle: number, exponent: number, scene?: Scene) {\r\n        super(name, scene);\r\n\r\n        this.position = position;\r\n        this.direction = direction;\r\n        this.angle = angle;\r\n        this.exponent = exponent;\r\n    }\r\n\r\n    /**\r\n     * Returns the string \"SpotLight\".\r\n     * @returns the class name\r\n     */\r\n    public getClassName(): string {\r\n        return \"SpotLight\";\r\n    }\r\n\r\n    /**\r\n     * Returns the integer 2.\r\n     * @returns The light Type id as a constant defines in Light.LIGHTTYPEID_x\r\n     */\r\n    public getTypeID(): number {\r\n        return Light.LIGHTTYPEID_SPOTLIGHT;\r\n    }\r\n\r\n    /**\r\n     * Overrides the direction setter to recompute the projection texture view light Matrix.\r\n     * @param value\r\n     */\r\n    protected _setDirection(value: Vector3) {\r\n        super._setDirection(value);\r\n        this._projectionTextureViewLightDirty = true;\r\n    }\r\n\r\n    /**\r\n     * Overrides the position setter to recompute the projection texture view light Matrix.\r\n     * @param value\r\n     */\r\n    protected _setPosition(value: Vector3) {\r\n        super._setPosition(value);\r\n        this._projectionTextureViewLightDirty = true;\r\n    }\r\n\r\n    /**\r\n     * Sets the passed matrix \"matrix\" as perspective projection matrix for the shadows and the passed view matrix with the fov equal to the SpotLight angle and and aspect ratio of 1.0.\r\n     * Returns the SpotLight.\r\n     * @param matrix\r\n     * @param viewMatrix\r\n     * @param renderList\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    protected _setDefaultShadowProjectionMatrix(matrix: Matrix, viewMatrix: Matrix, renderList: Array<AbstractMesh>): void {\r\n        const activeCamera = this.getScene().activeCamera;\r\n\r\n        if (!activeCamera) {\r\n            return;\r\n        }\r\n\r\n        this._shadowAngleScale = this._shadowAngleScale || 1;\r\n        const angle = this._shadowAngleScale * this._angle;\r\n\r\n        const minZ = this.shadowMinZ !== undefined ? this.shadowMinZ : activeCamera.minZ;\r\n        const maxZ = this.shadowMaxZ !== undefined ? this.shadowMaxZ : activeCamera.maxZ;\r\n\r\n        const useReverseDepthBuffer = this.getScene().getEngine().useReverseDepthBuffer;\r\n\r\n        Matrix.PerspectiveFovLHToRef(\r\n            angle,\r\n            1.0,\r\n            useReverseDepthBuffer ? maxZ : minZ,\r\n            useReverseDepthBuffer ? minZ : maxZ,\r\n            matrix,\r\n            true,\r\n            this._scene.getEngine().isNDCHalfZRange,\r\n            undefined,\r\n            useReverseDepthBuffer\r\n        );\r\n    }\r\n\r\n    protected _computeProjectionTextureViewLightMatrix(): void {\r\n        this._projectionTextureViewLightDirty = false;\r\n        this._projectionTextureDirty = true;\r\n\r\n        this.getAbsolutePosition().addToRef(this.direction, this._projectionTextureViewTargetVector);\r\n        Matrix.LookAtLHToRef(this.getAbsolutePosition(), this._projectionTextureViewTargetVector, this._projectionTextureUpDirection, this._projectionTextureViewLightMatrix);\r\n    }\r\n\r\n    protected _computeProjectionTextureProjectionLightMatrix(): void {\r\n        this._projectionTextureProjectionLightDirty = false;\r\n        this._projectionTextureDirty = true;\r\n\r\n        const lightFar = this.projectionTextureLightFar;\r\n        const lightNear = this.projectionTextureLightNear;\r\n\r\n        const P = lightFar / (lightFar - lightNear);\r\n        const Q = -P * lightNear;\r\n        const S = 1.0 / Math.tan(this._angle / 2.0);\r\n        const A = 1.0;\r\n\r\n        Matrix.FromValuesToRef(S / A, 0.0, 0.0, 0.0, 0.0, S, 0.0, 0.0, 0.0, 0.0, P, 1.0, 0.0, 0.0, Q, 0.0, this._projectionTextureProjectionLightMatrix);\r\n    }\r\n\r\n    /**\r\n     * Main function for light texture projection matrix computing.\r\n     */\r\n    protected _computeProjectionTextureMatrix(): void {\r\n        this._projectionTextureDirty = false;\r\n\r\n        this._projectionTextureViewLightMatrix.multiplyToRef(this._projectionTextureProjectionLightMatrix, this._projectionTextureMatrix);\r\n        if (this._projectionTexture instanceof Texture) {\r\n            const u = this._projectionTexture.uScale / 2.0;\r\n            const v = this._projectionTexture.vScale / 2.0;\r\n            Matrix.FromValuesToRef(u, 0.0, 0.0, 0.0, 0.0, v, 0.0, 0.0, 0.0, 0.0, 0.5, 0.0, 0.5, 0.5, 0.5, 1.0, this._projectionTextureScalingMatrix);\r\n        }\r\n        this._projectionTextureMatrix.multiplyToRef(this._projectionTextureScalingMatrix, this._projectionTextureMatrix);\r\n    }\r\n\r\n    protected _buildUniformLayout(): void {\r\n        this._uniformBuffer.addUniform(\"vLightData\", 4);\r\n        this._uniformBuffer.addUniform(\"vLightDiffuse\", 4);\r\n        this._uniformBuffer.addUniform(\"vLightSpecular\", 4);\r\n        this._uniformBuffer.addUniform(\"vLightDirection\", 3);\r\n        this._uniformBuffer.addUniform(\"vLightFalloff\", 4);\r\n        this._uniformBuffer.addUniform(\"shadowsInfo\", 3);\r\n        this._uniformBuffer.addUniform(\"depthValues\", 2);\r\n        this._uniformBuffer.create();\r\n    }\r\n\r\n    private _computeAngleValues(): void {\r\n        this._lightAngleScale = 1.0 / Math.max(0.001, Math.cos(this._innerAngle * 0.5) - this._cosHalfAngle);\r\n        this._lightAngleOffset = -this._cosHalfAngle * this._lightAngleScale;\r\n    }\r\n\r\n    /**\r\n     * Sets the passed Effect \"effect\" with the Light textures.\r\n     * @param effect The effect to update\r\n     * @param lightIndex The index of the light in the effect to update\r\n     * @returns The light\r\n     */\r\n    public transferTexturesToEffect(effect: Effect, lightIndex: string): Light {\r\n        if (this.projectionTexture && this.projectionTexture.isReady()) {\r\n            if (this._projectionTextureViewLightDirty) {\r\n                this._computeProjectionTextureViewLightMatrix();\r\n            }\r\n            if (this._projectionTextureProjectionLightDirty) {\r\n                this._computeProjectionTextureProjectionLightMatrix();\r\n            }\r\n            if (this._projectionTextureDirty) {\r\n                this._computeProjectionTextureMatrix();\r\n            }\r\n            effect.setMatrix(\"textureProjectionMatrix\" + lightIndex, this._projectionTextureMatrix);\r\n            effect.setTexture(\"projectionLightSampler\" + lightIndex, this.projectionTexture);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Sets the passed Effect object with the SpotLight transformed position (or position if not parented) and normalized direction.\r\n     * @param effect The effect to update\r\n     * @param lightIndex The index of the light in the effect to update\r\n     * @returns The spot light\r\n     */\r\n    public transferToEffect(effect: Effect, lightIndex: string): SpotLight {\r\n        let normalizeDirection;\r\n\r\n        if (this.computeTransformedInformation()) {\r\n            this._uniformBuffer.updateFloat4(\"vLightData\", this.transformedPosition.x, this.transformedPosition.y, this.transformedPosition.z, this.exponent, lightIndex);\r\n\r\n            normalizeDirection = Vector3.Normalize(this.transformedDirection);\r\n        } else {\r\n            this._uniformBuffer.updateFloat4(\"vLightData\", this.position.x, this.position.y, this.position.z, this.exponent, lightIndex);\r\n\r\n            normalizeDirection = Vector3.Normalize(this.direction);\r\n        }\r\n\r\n        this._uniformBuffer.updateFloat4(\"vLightDirection\", normalizeDirection.x, normalizeDirection.y, normalizeDirection.z, this._cosHalfAngle, lightIndex);\r\n\r\n        this._uniformBuffer.updateFloat4(\"vLightFalloff\", this.range, this._inverseSquaredRange, this._lightAngleScale, this._lightAngleOffset, lightIndex);\r\n        return this;\r\n    }\r\n\r\n    public transferToNodeMaterialEffect(effect: Effect, lightDataUniformName: string) {\r\n        let normalizeDirection;\r\n\r\n        if (this.computeTransformedInformation()) {\r\n            normalizeDirection = Vector3.Normalize(this.transformedDirection);\r\n        } else {\r\n            normalizeDirection = Vector3.Normalize(this.direction);\r\n        }\r\n\r\n        if (this.getScene().useRightHandedSystem) {\r\n            effect.setFloat3(lightDataUniformName, -normalizeDirection.x, -normalizeDirection.y, -normalizeDirection.z);\r\n        } else {\r\n            effect.setFloat3(lightDataUniformName, normalizeDirection.x, normalizeDirection.y, normalizeDirection.z);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Disposes the light and the associated resources.\r\n     */\r\n    public dispose(): void {\r\n        super.dispose();\r\n        if (this._projectionTexture) {\r\n            this._projectionTexture.dispose();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the minZ used for shadow according to both the scene and the light.\r\n     * @param activeCamera The camera we are returning the min for\r\n     * @returns the depth min z\r\n     */\r\n    public getDepthMinZ(activeCamera: Camera): number {\r\n        const engine = this._scene.getEngine();\r\n        const minZ = this.shadowMinZ !== undefined ? this.shadowMinZ : activeCamera.minZ;\r\n\r\n        return engine.useReverseDepthBuffer && engine.isNDCHalfZRange ? minZ : this._scene.getEngine().isNDCHalfZRange ? 0 : minZ;\r\n    }\r\n\r\n    /**\r\n     * Gets the maxZ used for shadow according to both the scene and the light.\r\n     * @param activeCamera The camera we are returning the max for\r\n     * @returns the depth max z\r\n     */\r\n    public getDepthMaxZ(activeCamera: Camera): number {\r\n        const engine = this._scene.getEngine();\r\n        const maxZ = this.shadowMaxZ !== undefined ? this.shadowMaxZ : activeCamera.maxZ;\r\n\r\n        return engine.useReverseDepthBuffer && engine.isNDCHalfZRange ? 0 : maxZ;\r\n    }\r\n\r\n    /**\r\n     * Prepares the list of defines specific to the light type.\r\n     * @param defines the list of defines\r\n     * @param lightIndex defines the index of the light for the effect\r\n     */\r\n    public prepareLightSpecificDefines(defines: any, lightIndex: number): void {\r\n        defines[\"SPOTLIGHT\" + lightIndex] = true;\r\n        defines[\"PROJECTEDLIGHTTEXTURE\" + lightIndex] = this.projectionTexture && this.projectionTexture.isReady() ? true : false;\r\n    }\r\n}\r\n"],
  "mappings": "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",
  "names": ["name", "name", "shader", "name", "shader", "name", "shader", "name", "shader", "name", "shader", "name", "shader", "name", "name", "shader", "name", "shader", "name", "shader", "name", "shader", "name", "shader", "name", "shader", "name", "shader", "name", "shader", "name", "shader", "name", "shader", "name", "shader", "name", "shader", "name", "shader", "name", "shader", "engine", "name", "shader", "name", "shader", "name", "shader", "name", "engine", "scene", "camera", "name", "shader", "w", "h", "reduction", "name", "name", "name", "name"]
}
